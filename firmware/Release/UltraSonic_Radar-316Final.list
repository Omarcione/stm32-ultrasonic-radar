
UltraSonic_Radar-316Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008c88  08008c88  00009c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009094  08009094  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009094  08009094  0000a094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800909c  0800909c  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800909c  0800909c  0000a09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090a0  080090a0  0000a0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080090a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200001d8  0800927c  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  0800927c  0000b498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001000d  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207d  00000000  00000000  0001b215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  0001d292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc5  00000000  00000000  0001e19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277f9  00000000  00000000  0001ed5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b74  00000000  00000000  00046558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f432c  00000000  00000000  000570cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b3f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051bc  00000000  00000000  0014b43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c6c 	.word	0x08008c6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008c6c 	.word	0x08008c6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <HAL_TIM_IC_CaptureCallback>:
void alarm_loop();
void BuzzerOn();
void print_distance_and_angle();

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ee4:	d16d      	bne.n	8000fc2 <HAL_TIM_IC_CaptureCallback+0xee>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7f1b      	ldrb	r3, [r3, #28]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d169      	bne.n	8000fc2 <HAL_TIM_IC_CaptureCallback+0xee>
    {
        if (ic_state == 0)
 8000eee:	4b37      	ldr	r3, [pc, #220]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d11a      	bne.n	8000f2e <HAL_TIM_IC_CaptureCallback+0x5a>
        {
            /* Rising edge detected → record start time */
            ic_start = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000ef8:	2104      	movs	r1, #4
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f003 fc18 	bl	8004730 <HAL_TIM_ReadCapturedValue>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a33      	ldr	r2, [pc, #204]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000f04:	6013      	str	r3, [r2, #0]

            /* Reconfigure capture to catch falling edge next */
            __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f06:	4b33      	ldr	r3, [pc, #204]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6a1a      	ldr	r2, [r3, #32]
 8000f0c:	4b31      	ldr	r3, [pc, #196]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000f14:	621a      	str	r2, [r3, #32]
 8000f16:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6a1a      	ldr	r2, [r3, #32]
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f042 0220 	orr.w	r2, r2, #32
 8000f24:	621a      	str	r2, [r3, #32]
            ic_state = 1;
 8000f26:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
            /* Re-arm for next rising edge */
            __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
            ic_state = 0;
        }
    }
}
 8000f2c:	e049      	b.n	8000fc2 <HAL_TIM_IC_CaptureCallback+0xee>
        else if (ic_state == 1)
 8000f2e:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d144      	bne.n	8000fc2 <HAL_TIM_IC_CaptureCallback+0xee>
            ic_stop = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000f38:	2104      	movs	r1, #4
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f003 fbf8 	bl	8004730 <HAL_TIM_ReadCapturedValue>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a25      	ldr	r2, [pc, #148]	@ (8000fd8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000f44:	6013      	str	r3, [r2, #0]
            if (ic_stop >= ic_start) {
 8000f46:	4b24      	ldr	r3, [pc, #144]	@ (8000fd8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d306      	bcc.n	8000f60 <HAL_TIM_IC_CaptureCallback+0x8c>
                duration = ic_stop - ic_start;
 8000f52:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	e007      	b.n	8000f70 <HAL_TIM_IC_CaptureCallback+0x9c>
                duration = (0xFFFF - ic_start) + ic_stop + 1;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd8 <HAL_TIM_IC_CaptureCallback+0x104>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000f6e:	60fb      	str	r3, [r7, #12]
            if (duration >= 38000U) {
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f249 426f 	movw	r2, #37999	@ 0x946f
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d903      	bls.n	8000f82 <HAL_TIM_IC_CaptureCallback+0xae>
                last_distance = -1.0f;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_TIM_IC_CaptureCallback+0x108>)
 8000f7c:	4a18      	ldr	r2, [pc, #96]	@ (8000fe0 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	e00b      	b.n	8000f9a <HAL_TIM_IC_CaptureCallback+0xc6>
                last_distance = (float)duration / 58.0f;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f8c:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8000fe4 <HAL_TIM_IC_CaptureCallback+0x110>
 8000f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <HAL_TIM_IC_CaptureCallback+0x108>)
 8000f96:	edc3 7a00 	vstr	s15, [r3]
            dist_ready = 1;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6a1a      	ldr	r2, [r3, #32]
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000fae:	621a      	str	r2, [r3, #32]
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6a12      	ldr	r2, [r2, #32]
 8000fba:	621a      	str	r2, [r3, #32]
            ic_state = 0;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000204 	.word	0x20000204
 8000fd0:	200001fc 	.word	0x200001fc
 8000fd4:	20000218 	.word	0x20000218
 8000fd8:	20000200 	.word	0x20000200
 8000fdc:	20000208 	.word	0x20000208
 8000fe0:	bf800000 	.word	0xbf800000
 8000fe4:	42680000 	.word	0x42680000
 8000fe8:	2000020c 	.word	0x2000020c

08000fec <main>:

int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
//  char buf[64];
  uint32_t last_trigger_ms = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]

  HAL_Init();
 8000ff6:	f000 fdc2 	bl	8001b7e <HAL_Init>
  SystemClock_Config();
 8000ffa:	f000 f9ab 	bl	8001354 <SystemClock_Config>

  MX_GPIO_Init();
 8000ffe:	f000 fb13 	bl	8001628 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001002:	f000 fae1 	bl	80015c8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001006:	f000 f9f7 	bl	80013f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800100a:	f000 fa65 	bl	80014d8 <MX_TIM3_Init>

  HAL_TIM_Base_Start(&htim2);
 800100e:	4816      	ldr	r0, [pc, #88]	@ (8001068 <main+0x7c>)
 8001010:	f002 fc90 	bl	8003934 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001014:	2104      	movs	r1, #4
 8001016:	4814      	ldr	r0, [pc, #80]	@ (8001068 <main+0x7c>)
 8001018:	f002 febe 	bl	8003d98 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800101c:	2100      	movs	r1, #0
 800101e:	4813      	ldr	r0, [pc, #76]	@ (800106c <main+0x80>)
 8001020:	f002 fd52 	bl	8003ac8 <HAL_TIM_PWM_Start>
       – Whenever dist_ready == 1, print the new distance.
       – Otherwise, do other work here…
  */
  while (1)
  {
      uint32_t now = HAL_GetTick();
 8001024:	f000 fe14 	bl	8001c50 <HAL_GetTick>
 8001028:	6038      	str	r0, [r7, #0]


      if ((now - last_trigger_ms) >= 200)
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	2bc7      	cmp	r3, #199	@ 0xc7
 8001032:	d903      	bls.n	800103c <main+0x50>
      {
          last_trigger_ms = now;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	607b      	str	r3, [r7, #4]
          TriggerSensor();
 8001038:	f000 f81e 	bl	8001078 <TriggerSensor>
      }

      /* If the IC callback has flagged that a new measurement arrived: */
      if (dist_ready)
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <main+0x84>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d004      	beq.n	8001050 <main+0x64>
      {
          dist_ready = 0;
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <main+0x84>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
          print_distance_and_angle();
 800104c:	f000 f844 	bl	80010d8 <print_distance_and_angle>
      }
      if (buzzer)
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <main+0x88>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <main+0x70>
      		BuzzerOn();
 8001058:	f000 f962 	bl	8001320 <BuzzerOn>

      servo_loop();
 800105c:	f000 f8a4 	bl	80011a8 <servo_loop>
      alarm_loop();
 8001060:	f000 f906 	bl	8001270 <alarm_loop>
  {
 8001064:	e7de      	b.n	8001024 <main+0x38>
 8001066:	bf00      	nop
 8001068:	20000218 	.word	0x20000218
 800106c:	20000264 	.word	0x20000264
 8001070:	2000020c 	.word	0x2000020c
 8001074:	20000214 	.word	0x20000214

08001078 <TriggerSensor>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void TriggerSensor(){
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
    /* Generate a 10 µs high pulse on TRIG_PIN using TIM2 counter */
    HAL_GPIO_WritePin(TRIG_PORT, TRIGGER_PIN, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001082:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001086:	f001 f8ab 	bl	80021e0 <HAL_GPIO_WritePin>
    /* Short low to ensure clean rising edge (~2 µs) */
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 800108a:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <TriggerSensor+0x5c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < 2) { /* ~2 µs */ }
 8001092:	bf00      	nop
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <TriggerSensor+0x5c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109a:	2b01      	cmp	r3, #1
 800109c:	d9fa      	bls.n	8001094 <TriggerSensor+0x1c>

    HAL_GPIO_WritePin(TRIG_PORT, TRIGGER_PIN, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a8:	f001 f89a 	bl	80021e0 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <TriggerSensor+0x5c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < 10) { /* ~10 µs */ }
 80010b4:	bf00      	nop
 80010b6:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <TriggerSensor+0x5c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010bc:	2b09      	cmp	r3, #9
 80010be:	d9fa      	bls.n	80010b6 <TriggerSensor+0x3e>
    HAL_GPIO_WritePin(TRIG_PORT, TRIGGER_PIN, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ca:	f001 f889 	bl	80021e0 <HAL_GPIO_WritePin>

    /* Now TIM2 IC interrupt will catch rising/falling on ECHO (PB3) */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000218 	.word	0x20000218

080010d8 <print_distance_and_angle>:

void print_distance_and_angle(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0a4      	sub	sp, #144	@ 0x90
 80010dc:	af02      	add	r7, sp, #8
    float d_cm = last_distance;
 80010de:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <print_distance_and_angle+0xb4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    char data[64];
    char buf[64];

    if (d_cm < 0.0f || d_cm > 20.0f)   // overflow or out-of-range
 80010e6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d408      	bmi.n	8001106 <print_distance_and_angle+0x2e>
 80010f4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80010f8:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80010fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	dd09      	ble.n	800111a <print_distance_and_angle+0x42>
    {
        snprintf(buf, sizeof(buf), "Out of range\r\n");
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4a21      	ldr	r2, [pc, #132]	@ (8001190 <print_distance_and_angle+0xb8>)
 800110a:	2140      	movs	r1, #64	@ 0x40
 800110c:	4618      	mov	r0, r3
 800110e:	f005 fb81 	bl	8006814 <sniprintf>
        object_found = 0;
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <print_distance_and_angle+0xbc>)
 8001114:	2200      	movs	r2, #0
 8001116:	801a      	strh	r2, [r3, #0]
 8001118:	e027      	b.n	800116a <print_distance_and_angle+0x92>
    }
    else
    {
    	object_found = 1;
 800111a:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <print_distance_and_angle+0xbc>)
 800111c:	2201      	movs	r2, #1
 800111e:	801a      	strh	r2, [r3, #0]
		snprintf(data, sizeof(data), "\nangle: %d\r\n", servo_angle);
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <print_distance_and_angle+0xc0>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001128:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <print_distance_and_angle+0xc4>)
 800112a:	2140      	movs	r1, #64	@ 0x40
 800112c:	f005 fb72 	bl	8006814 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)data, strlen(data) - 1, HAL_MAX_DELAY);
 8001130:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f89b 	bl	8000270 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29b      	uxth	r3, r3
 800113e:	3b01      	subs	r3, #1
 8001140:	b29a      	uxth	r2, r3
 8001142:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001146:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800114a:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <print_distance_and_angle+0xc8>)
 800114c:	f004 f9b0 	bl	80054b0 <HAL_UART_Transmit>

        snprintf(buf, sizeof(buf), "\n%0.1f cm\r\n", d_cm);
 8001150:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001154:	f7ff f9f8 	bl	8000548 <__aeabi_f2d>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	1d38      	adds	r0, r7, #4
 800115e:	e9cd 2300 	strd	r2, r3, [sp]
 8001162:	4a10      	ldr	r2, [pc, #64]	@ (80011a4 <print_distance_and_angle+0xcc>)
 8001164:	2140      	movs	r1, #64	@ 0x40
 8001166:	f005 fb55 	bl	8006814 <sniprintf>
    }
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f87f 	bl	8000270 <strlen>
 8001172:	4603      	mov	r3, r0
 8001174:	b29a      	uxth	r2, r3
 8001176:	1d39      	adds	r1, r7, #4
 8001178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800117c:	4808      	ldr	r0, [pc, #32]	@ (80011a0 <print_distance_and_angle+0xc8>)
 800117e:	f004 f997 	bl	80054b0 <HAL_UART_Transmit>
}
 8001182:	bf00      	nop
 8001184:	3788      	adds	r7, #136	@ 0x88
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000208 	.word	0x20000208
 8001190:	08008c88 	.word	0x08008c88
 8001194:	2000020e 	.word	0x2000020e
 8001198:	200001f4 	.word	0x200001f4
 800119c:	08008c98 	.word	0x08008c98
 80011a0:	200002b0 	.word	0x200002b0
 80011a4:	08008ca8 	.word	0x08008ca8

080011a8 <servo_loop>:

void servo_loop(){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08e      	sub	sp, #56	@ 0x38
 80011ac:	af00      	add	r7, sp, #0
	 if (HAL_GetTick() - last_servo_update >= SERVO_UPDATE_INTERVAL) {
 80011ae:	f000 fd4f 	bl	8001c50 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	4b28      	ldr	r3, [pc, #160]	@ (8001258 <servo_loop+0xb0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b1d      	cmp	r3, #29
 80011bc:	d947      	bls.n	800124e <servo_loop+0xa6>
		last_servo_update = HAL_GetTick();
 80011be:	f000 fd47 	bl	8001c50 <HAL_GetTick>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a24      	ldr	r2, [pc, #144]	@ (8001258 <servo_loop+0xb0>)
 80011c6:	6013      	str	r3, [r2, #0]

		// Update angle
		if (servo_direction)
 80011c8:	4b24      	ldr	r3, [pc, #144]	@ (800125c <servo_loop+0xb4>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <servo_loop+0x36>
			servo_angle += SERVO_STEP;
 80011d0:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <servo_loop+0xb8>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	3301      	adds	r3, #1
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <servo_loop+0xb8>)
 80011da:	801a      	strh	r2, [r3, #0]
 80011dc:	e005      	b.n	80011ea <servo_loop+0x42>
		else
			servo_angle -= SERVO_STEP;
 80011de:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <servo_loop+0xb8>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <servo_loop+0xb8>)
 80011e8:	801a      	strh	r2, [r3, #0]

		// Change direction at limits
		if (servo_angle >= SERVO_MAX_ANGLE) {
 80011ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <servo_loop+0xb8>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	2bb3      	cmp	r3, #179	@ 0xb3
 80011f0:	d906      	bls.n	8001200 <servo_loop+0x58>
			servo_angle = SERVO_MAX_ANGLE;
 80011f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <servo_loop+0xb8>)
 80011f4:	22b4      	movs	r2, #180	@ 0xb4
 80011f6:	801a      	strh	r2, [r3, #0]
			servo_direction = 0; // go backwards
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <servo_loop+0xb4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e009      	b.n	8001214 <servo_loop+0x6c>
		} else if (servo_angle <= SERVO_MIN_ANGLE) {
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <servo_loop+0xb8>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d105      	bne.n	8001214 <servo_loop+0x6c>
			servo_angle = SERVO_MIN_ANGLE;
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <servo_loop+0xb8>)
 800120a:	2200      	movs	r2, #0
 800120c:	801a      	strh	r2, [r3, #0]
			servo_direction = 1;
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <servo_loop+0xb4>)
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
		}

		// Convert angle to PWM pulse width
		int pulse_width = 500 + ((servo_angle * 2000) / SERVO_MAX_ANGLE);
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <servo_loop+0xb8>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800121e:	fb02 f303 	mul.w	r3, r2, r3
 8001222:	4a10      	ldr	r2, [pc, #64]	@ (8001264 <servo_loop+0xbc>)
 8001224:	fb82 1203 	smull	r1, r2, r2, r3
 8001228:	441a      	add	r2, r3
 800122a:	11d2      	asrs	r2, r2, #7
 800122c:	17db      	asrs	r3, r3, #31
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001234:	637b      	str	r3, [r7, #52]	@ 0x34
		char angle_str [50];
		sprintf(angle_str, "current angle: %d, pulse len: %d\n\r", servo_angle, pulse_width);
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <servo_loop+0xb8>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	4638      	mov	r0, r7
 800123e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001240:	4909      	ldr	r1, [pc, #36]	@ (8001268 <servo_loop+0xc0>)
 8001242:	f005 fb1d 	bl	8006880 <siprintf>
//		HAL_UART_Transmit(&huart2, (uint8_t*)angle_str, strlen(angle_str), HAL_MAX_DELAY);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse_width);
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <servo_loop+0xc4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800124c:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 800124e:	bf00      	nop
 8001250:	3738      	adds	r7, #56	@ 0x38
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001f8 	.word	0x200001f8
 800125c:	20000000 	.word	0x20000000
 8001260:	200001f4 	.word	0x200001f4
 8001264:	b60b60b7 	.word	0xb60b60b7
 8001268:	08008cb4 	.word	0x08008cb4
 800126c:	20000264 	.word	0x20000264

08001270 <alarm_loop>:

void alarm_loop(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	static uint8_t cnt = 0;
	static uint8_t blinking = 0;
	static uint32_t last_toggle = 0;
	if (object_found) {
 8001274:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <alarm_loop+0x98>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00d      	beq.n	8001298 <alarm_loop+0x28>
		blinking = 1;
 800127c:	4b23      	ldr	r3, [pc, #140]	@ (800130c <alarm_loop+0x9c>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
		buzzer = 1;
 8001282:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <alarm_loop+0xa0>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
		object_found = 0;
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <alarm_loop+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	801a      	strh	r2, [r3, #0]
		last_toggle = HAL_GetTick();
 800128e:	f000 fcdf 	bl	8001c50 <HAL_GetTick>
 8001292:	4603      	mov	r3, r0
 8001294:	4a1f      	ldr	r2, [pc, #124]	@ (8001314 <alarm_loop+0xa4>)
 8001296:	6013      	str	r3, [r2, #0]
	}
	if (blinking) {
 8001298:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <alarm_loop+0x9c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d031      	beq.n	8001304 <alarm_loop+0x94>
		if (HAL_GetTick() - last_toggle >= ALARM_LEN) {
 80012a0:	f000 fcd6 	bl	8001c50 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <alarm_loop+0xa4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b95      	cmp	r3, #149	@ 0x95
 80012ae:	d929      	bls.n	8001304 <alarm_loop+0x94>
			if (cnt % 2 == 0)
 80012b0:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <alarm_loop+0xa8>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d105      	bne.n	80012ca <alarm_loop+0x5a>
				HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_SET); //turn on LED
 80012be:	2201      	movs	r2, #1
 80012c0:	2120      	movs	r1, #32
 80012c2:	4816      	ldr	r0, [pc, #88]	@ (800131c <alarm_loop+0xac>)
 80012c4:	f000 ff8c 	bl	80021e0 <HAL_GPIO_WritePin>
 80012c8:	e004      	b.n	80012d4 <alarm_loop+0x64>
			else
				HAL_GPIO_WritePin(GPIOB, LED_PIN, GPIO_PIN_RESET); //turn off LED
 80012ca:	2200      	movs	r2, #0
 80012cc:	2120      	movs	r1, #32
 80012ce:	4813      	ldr	r0, [pc, #76]	@ (800131c <alarm_loop+0xac>)
 80012d0:	f000 ff86 	bl	80021e0 <HAL_GPIO_WritePin>
			last_toggle = HAL_GetTick();
 80012d4:	f000 fcbc 	bl	8001c50 <HAL_GetTick>
 80012d8:	4603      	mov	r3, r0
 80012da:	4a0e      	ldr	r2, [pc, #56]	@ (8001314 <alarm_loop+0xa4>)
 80012dc:	6013      	str	r3, [r2, #0]
			cnt++;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <alarm_loop+0xa8>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	3301      	adds	r3, #1
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <alarm_loop+0xa8>)
 80012e8:	701a      	strb	r2, [r3, #0]
			if (cnt >= 6) {
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <alarm_loop+0xa8>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d908      	bls.n	8001304 <alarm_loop+0x94>
				cnt = 0;
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <alarm_loop+0xa8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
				blinking = 0;
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <alarm_loop+0x9c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	701a      	strb	r2, [r3, #0]
				buzzer = 0;
 80012fe:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <alarm_loop+0xa0>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	2000020e 	.word	0x2000020e
 800130c:	20000338 	.word	0x20000338
 8001310:	20000214 	.word	0x20000214
 8001314:	2000033c 	.word	0x2000033c
 8001318:	20000340 	.word	0x20000340
 800131c:	48000400 	.word	0x48000400

08001320 <BuzzerOn>:

void BuzzerOn(){
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	if (TIM3 -> CNT - buzzer_last >= 5){
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <BuzzerOn+0x28>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001328:	4a08      	ldr	r2, [pc, #32]	@ (800134c <BuzzerOn+0x2c>)
 800132a:	6812      	ldr	r2, [r2, #0]
 800132c:	1a9b      	subs	r3, r3, r2
 800132e:	2b04      	cmp	r3, #4
 8001330:	d908      	bls.n	8001344 <BuzzerOn+0x24>
		HAL_GPIO_TogglePin(GPIOB, BUZZER_PIN);
 8001332:	2110      	movs	r1, #16
 8001334:	4806      	ldr	r0, [pc, #24]	@ (8001350 <BuzzerOn+0x30>)
 8001336:	f000 ff6b 	bl	8002210 <HAL_GPIO_TogglePin>
		buzzer_last = TIM3 -> CNT;
 800133a:	4b03      	ldr	r3, [pc, #12]	@ (8001348 <BuzzerOn+0x28>)
 800133c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133e:	461a      	mov	r2, r3
 8001340:	4b02      	ldr	r3, [pc, #8]	@ (800134c <BuzzerOn+0x2c>)
 8001342:	601a      	str	r2, [r3, #0]
	}
}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40000400 	.word	0x40000400
 800134c:	20000210 	.word	0x20000210
 8001350:	48000400 	.word	0x48000400

08001354 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b096      	sub	sp, #88	@ 0x58
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2244      	movs	r2, #68	@ 0x44
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f005 fb70 	bl	8006a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001376:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800137a:	f000 ff71 	bl	8002260 <HAL_PWREx_ControlVoltageScaling>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001384:	f000 f9a6 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001388:	2302      	movs	r3, #2
 800138a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001390:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001392:	2310      	movs	r3, #16
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001396:	2302      	movs	r3, #2
 8001398:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800139a:	2302      	movs	r3, #2
 800139c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013a2:	230a      	movs	r3, #10
 80013a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013a6:	2307      	movs	r3, #7
 80013a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 ffa8 	bl	800230c <HAL_RCC_OscConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013c2:	f000 f987 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c6:	230f      	movs	r3, #15
 80013c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ca:	2303      	movs	r3, #3
 80013cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	2104      	movs	r1, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fb70 	bl	8002ac4 <HAL_RCC_ClockConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013ea:	f000 f973 	bl	80016d4 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3758      	adds	r7, #88	@ 0x58
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	@ 0x30
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001424:	4b2b      	ldr	r3, [pc, #172]	@ (80014d4 <MX_TIM2_Init+0xdc>)
 8001426:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800142a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800142c:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <MX_TIM2_Init+0xdc>)
 800142e:	224f      	movs	r2, #79	@ 0x4f
 8001430:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b28      	ldr	r3, [pc, #160]	@ (80014d4 <MX_TIM2_Init+0xdc>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8001438:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <MX_TIM2_Init+0xdc>)
 800143a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <MX_TIM2_Init+0xdc>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b23      	ldr	r3, [pc, #140]	@ (80014d4 <MX_TIM2_Init+0xdc>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800144c:	4821      	ldr	r0, [pc, #132]	@ (80014d4 <MX_TIM2_Init+0xdc>)
 800144e:	f002 fa19 	bl	8003884 <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001458:	f000 f93c 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001460:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001462:	f107 0320 	add.w	r3, r7, #32
 8001466:	4619      	mov	r1, r3
 8001468:	481a      	ldr	r0, [pc, #104]	@ (80014d4 <MX_TIM2_Init+0xdc>)
 800146a:	f003 f897 	bl	800459c <HAL_TIM_ConfigClockSource>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001474:	f000 f92e 	bl	80016d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001478:	4816      	ldr	r0, [pc, #88]	@ (80014d4 <MX_TIM2_Init+0xdc>)
 800147a:	f002 fc2b 	bl	8003cd4 <HAL_TIM_IC_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001484:	f000 f926 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	480f      	ldr	r0, [pc, #60]	@ (80014d4 <MX_TIM2_Init+0xdc>)
 8001498:	f003 ff16 	bl	80052c8 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80014a2:	f000 f917 	bl	80016d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014aa:	2301      	movs	r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2204      	movs	r2, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <MX_TIM2_Init+0xdc>)
 80014be:	f002 febc 	bl	800423a <HAL_TIM_IC_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80014c8:	f000 f904 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3730      	adds	r7, #48	@ 0x30
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000218 	.word	0x20000218

080014d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	@ 0x38
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f8:	463b      	mov	r3, r7
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	615a      	str	r2, [r3, #20]
 8001508:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800150a:	4b2d      	ldr	r3, [pc, #180]	@ (80015c0 <MX_TIM3_Init+0xe8>)
 800150c:	4a2d      	ldr	r2, [pc, #180]	@ (80015c4 <MX_TIM3_Init+0xec>)
 800150e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001510:	4b2b      	ldr	r3, [pc, #172]	@ (80015c0 <MX_TIM3_Init+0xe8>)
 8001512:	224f      	movs	r2, #79	@ 0x4f
 8001514:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b2a      	ldr	r3, [pc, #168]	@ (80015c0 <MX_TIM3_Init+0xe8>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800151c:	4b28      	ldr	r3, [pc, #160]	@ (80015c0 <MX_TIM3_Init+0xe8>)
 800151e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001522:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001524:	4b26      	ldr	r3, [pc, #152]	@ (80015c0 <MX_TIM3_Init+0xe8>)
 8001526:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800152a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800152c:	4b24      	ldr	r3, [pc, #144]	@ (80015c0 <MX_TIM3_Init+0xe8>)
 800152e:	2280      	movs	r2, #128	@ 0x80
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001532:	4823      	ldr	r0, [pc, #140]	@ (80015c0 <MX_TIM3_Init+0xe8>)
 8001534:	f002 f9a6 	bl	8003884 <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800153e:	f000 f8c9 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001548:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800154c:	4619      	mov	r1, r3
 800154e:	481c      	ldr	r0, [pc, #112]	@ (80015c0 <MX_TIM3_Init+0xe8>)
 8001550:	f003 f824 	bl	800459c <HAL_TIM_ConfigClockSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800155a:	f000 f8bb 	bl	80016d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800155e:	4818      	ldr	r0, [pc, #96]	@ (80015c0 <MX_TIM3_Init+0xe8>)
 8001560:	f002 fa50 	bl	8003a04 <HAL_TIM_PWM_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800156a:	f000 f8b3 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	4810      	ldr	r0, [pc, #64]	@ (80015c0 <MX_TIM3_Init+0xe8>)
 800157e:	f003 fea3 	bl	80052c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001588:	f000 f8a4 	bl	80016d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158c:	2360      	movs	r3, #96	@ 0x60
 800158e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	4619      	mov	r1, r3
 80015a2:	4807      	ldr	r0, [pc, #28]	@ (80015c0 <MX_TIM3_Init+0xe8>)
 80015a4:	f002 fee6 	bl	8004374 <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80015ae:	f000 f891 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015b2:	4803      	ldr	r0, [pc, #12]	@ (80015c0 <MX_TIM3_Init+0xe8>)
 80015b4:	f000 f916 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 80015b8:	bf00      	nop
 80015ba:	3738      	adds	r7, #56	@ 0x38
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000264 	.word	0x20000264
 80015c4:	40000400 	.word	0x40000400

080015c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015cc:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <MX_USART2_UART_Init+0x5c>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001604:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_USART2_UART_Init+0x58>)
 800160c:	f003 ff02 	bl	8005414 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001616:	f000 f85d 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200002b0 	.word	0x200002b0
 8001624:	40004400 	.word	0x40004400

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b23      	ldr	r3, [pc, #140]	@ (80016cc <MX_GPIO_Init+0xa4>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	4a22      	ldr	r2, [pc, #136]	@ (80016cc <MX_GPIO_Init+0xa4>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164a:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <MX_GPIO_Init+0xa4>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <MX_GPIO_Init+0xa4>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	4a1c      	ldr	r2, [pc, #112]	@ (80016cc <MX_GPIO_Init+0xa4>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001662:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <MX_GPIO_Init+0xa4>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001674:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001678:	f000 fdb2 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800167c:	2200      	movs	r2, #0
 800167e:	2130      	movs	r1, #48	@ 0x30
 8001680:	4813      	ldr	r0, [pc, #76]	@ (80016d0 <MX_GPIO_Init+0xa8>)
 8001682:	f000 fdad 	bl	80021e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001686:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800168a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a2:	f000 fbf3 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016a6:	2330      	movs	r3, #48	@ 0x30
 80016a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <MX_GPIO_Init+0xa8>)
 80016be:	f000 fbe5 	bl	8001e8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016c2:	bf00      	nop
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	48000400 	.word	0x48000400

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <Error_Handler+0x8>

080016e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <HAL_MspInit+0x44>)
 80016e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001724 <HAL_MspInit+0x44>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80016f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <HAL_MspInit+0x44>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	@ (8001724 <HAL_MspInit+0x44>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001702:	4a08      	ldr	r2, [pc, #32]	@ (8001724 <HAL_MspInit+0x44>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001708:	6593      	str	r3, [r2, #88]	@ 0x58
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_MspInit+0x44>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	@ 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001748:	d130      	bne.n	80017ac <HAL_TIM_Base_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174a:	4b23      	ldr	r3, [pc, #140]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174e:	4a22      	ldr	r2, [pc, #136]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6593      	str	r3, [r2, #88]	@ 0x58
 8001756:	4b20      	ldr	r3, [pc, #128]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001766:	4a1c      	ldr	r2, [pc, #112]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800177a:	2308      	movs	r3, #8
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800178a:	2301      	movs	r3, #1
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	4619      	mov	r1, r3
 8001794:	4811      	ldr	r0, [pc, #68]	@ (80017dc <HAL_TIM_Base_MspInit+0xb4>)
 8001796:	f000 fb79 	bl	8001e8c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	201c      	movs	r0, #28
 80017a0:	f000 fb3d 	bl	8001e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017a4:	201c      	movs	r0, #28
 80017a6:	f000 fb56 	bl	8001e56 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017aa:	e010      	b.n	80017ce <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0b      	ldr	r2, [pc, #44]	@ (80017e0 <HAL_TIM_Base_MspInit+0xb8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d10b      	bne.n	80017ce <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017b6:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	4a07      	ldr	r2, [pc, #28]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c2:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	@ 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	48000400 	.word	0x48000400
 80017e0:	40000400 	.word	0x40000400

080017e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a11      	ldr	r2, [pc, #68]	@ (8001848 <HAL_TIM_MspPostInit+0x64>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d11c      	bne.n	8001840 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_TIM_MspPostInit+0x68>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4a10      	ldr	r2, [pc, #64]	@ (800184c <HAL_TIM_MspPostInit+0x68>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <HAL_TIM_MspPostInit+0x68>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800181e:	2340      	movs	r3, #64	@ 0x40
 8001820:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183c:	f000 fb26 	bl	8001e8c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001840:	bf00      	nop
 8001842:	3720      	adds	r7, #32
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40000400 	.word	0x40000400
 800184c:	40021000 	.word	0x40021000

08001850 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0ac      	sub	sp, #176	@ 0xb0
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2288      	movs	r2, #136	@ 0x88
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f005 f8e9 	bl	8006a48 <memset>
  if(huart->Instance==USART2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a21      	ldr	r2, [pc, #132]	@ (8001900 <HAL_UART_MspInit+0xb0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d13b      	bne.n	80018f8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001880:	2302      	movs	r3, #2
 8001882:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001884:	2300      	movs	r3, #0
 8001886:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4618      	mov	r0, r3
 800188e:	f001 fb3d 	bl	8002f0c <HAL_RCCEx_PeriphCLKConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001898:	f7ff ff1c 	bl	80016d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800189c:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_UART_MspInit+0xb4>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a0:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <HAL_UART_MspInit+0xb4>)
 80018a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a8:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <HAL_UART_MspInit+0xb4>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <HAL_UART_MspInit+0xb4>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b8:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <HAL_UART_MspInit+0xb4>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c0:	4b10      	ldr	r3, [pc, #64]	@ (8001904 <HAL_UART_MspInit+0xb4>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018cc:	230c      	movs	r3, #12
 80018ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e4:	2307      	movs	r3, #7
 80018e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018ee:	4619      	mov	r1, r3
 80018f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f4:	f000 faca 	bl	8001e8c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80018f8:	bf00      	nop
 80018fa:	37b0      	adds	r7, #176	@ 0xb0
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40004400 	.word	0x40004400
 8001904:	40021000 	.word	0x40021000

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <NMI_Handler+0x4>

08001910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <HardFault_Handler+0x4>

08001918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <MemManage_Handler+0x4>

08001920 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <BusFault_Handler+0x4>

08001928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <UsageFault_Handler+0x4>

08001930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800195e:	f000 f963 	bl	8001c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <TIM2_IRQHandler+0x10>)
 800196e:	f002 fb5d 	bl	800402c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000218 	.word	0x20000218

0800197c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return 1;
 8001980:	2301      	movs	r3, #1
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_kill>:

int _kill(int pid, int sig)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001996:	f005 f85f 	bl	8006a58 <__errno>
 800199a:	4603      	mov	r3, r0
 800199c:	2216      	movs	r2, #22
 800199e:	601a      	str	r2, [r3, #0]
  return -1;
 80019a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_exit>:

void _exit (int status)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ffe7 	bl	800198c <_kill>
  while (1) {}    /* Make sure we hang here */
 80019be:	bf00      	nop
 80019c0:	e7fd      	b.n	80019be <_exit+0x12>

080019c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	e00a      	b.n	80019ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019d4:	f3af 8000 	nop.w
 80019d8:	4601      	mov	r1, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	60ba      	str	r2, [r7, #8]
 80019e0:	b2ca      	uxtb	r2, r1
 80019e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	dbf0      	blt.n	80019d4 <_read+0x12>
  }

  return len;
 80019f2:	687b      	ldr	r3, [r7, #4]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e009      	b.n	8001a22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	60ba      	str	r2, [r7, #8]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	dbf1      	blt.n	8001a0e <_write+0x12>
  }
  return len;
 8001a2a:	687b      	ldr	r3, [r7, #4]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_close>:

int _close(int file)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a5c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_isatty>:

int _isatty(int file)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a74:	2301      	movs	r3, #1
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b085      	sub	sp, #20
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa4:	4a14      	ldr	r2, [pc, #80]	@ (8001af8 <_sbrk+0x5c>)
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <_sbrk+0x60>)
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab0:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <_sbrk+0x64>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	@ (8001b04 <_sbrk+0x68>)
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001abe:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d207      	bcs.n	8001adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001acc:	f004 ffc4 	bl	8006a58 <__errno>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ad6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ada:	e009      	b.n	8001af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001adc:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <_sbrk+0x64>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	@ (8001b00 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <_sbrk+0x64>)
 8001aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20018000 	.word	0x20018000
 8001afc:	00000400 	.word	0x00000400
 8001b00:	20000344 	.word	0x20000344
 8001b04:	20000498 	.word	0x20000498

08001b08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <SystemInit+0x20>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b12:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <SystemInit+0x20>)
 8001b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <Reset_Handler>:
 8001b2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b64 <LoopForever+0x2>
 8001b30:	f7ff ffea 	bl	8001b08 <SystemInit>
 8001b34:	480c      	ldr	r0, [pc, #48]	@ (8001b68 <LoopForever+0x6>)
 8001b36:	490d      	ldr	r1, [pc, #52]	@ (8001b6c <LoopForever+0xa>)
 8001b38:	4a0d      	ldr	r2, [pc, #52]	@ (8001b70 <LoopForever+0xe>)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e002      	b.n	8001b44 <LoopCopyDataInit>

08001b3e <CopyDataInit>:
 8001b3e:	58d4      	ldr	r4, [r2, r3]
 8001b40:	50c4      	str	r4, [r0, r3]
 8001b42:	3304      	adds	r3, #4

08001b44 <LoopCopyDataInit>:
 8001b44:	18c4      	adds	r4, r0, r3
 8001b46:	428c      	cmp	r4, r1
 8001b48:	d3f9      	bcc.n	8001b3e <CopyDataInit>
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <LoopForever+0x12>)
 8001b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b78 <LoopForever+0x16>)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e001      	b.n	8001b56 <LoopFillZerobss>

08001b52 <FillZerobss>:
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	3204      	adds	r2, #4

08001b56 <LoopFillZerobss>:
 8001b56:	42a2      	cmp	r2, r4
 8001b58:	d3fb      	bcc.n	8001b52 <FillZerobss>
 8001b5a:	f004 ff83 	bl	8006a64 <__libc_init_array>
 8001b5e:	f7ff fa45 	bl	8000fec <main>

08001b62 <LoopForever>:
 8001b62:	e7fe      	b.n	8001b62 <LoopForever>
 8001b64:	20018000 	.word	0x20018000
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	200001d8 	.word	0x200001d8
 8001b70:	080090a4 	.word	0x080090a4
 8001b74:	200001d8 	.word	0x200001d8
 8001b78:	20000498 	.word	0x20000498

08001b7c <ADC1_2_IRQHandler>:
 8001b7c:	e7fe      	b.n	8001b7c <ADC1_2_IRQHandler>

08001b7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 f93d 	bl	8001e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b8e:	200f      	movs	r0, #15
 8001b90:	f000 f80e 	bl	8001bb0 <HAL_InitTick>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	71fb      	strb	r3, [r7, #7]
 8001b9e:	e001      	b.n	8001ba4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ba0:	f7ff fd9e 	bl	80016e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bbc:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <HAL_InitTick+0x6c>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d023      	beq.n	8001c0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bc4:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <HAL_InitTick+0x70>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b14      	ldr	r3, [pc, #80]	@ (8001c1c <HAL_InitTick+0x6c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f949 	bl	8001e72 <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10f      	bne.n	8001c06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b0f      	cmp	r3, #15
 8001bea:	d809      	bhi.n	8001c00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bec:	2200      	movs	r2, #0
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bf4:	f000 f913 	bl	8001e1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <HAL_InitTick+0x74>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e007      	b.n	8001c10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e004      	b.n	8001c10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e001      	b.n	8001c10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000000c 	.word	0x2000000c
 8001c20:	20000004 	.word	0x20000004
 8001c24:	20000008 	.word	0x20000008

08001c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_IncTick+0x20>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_IncTick+0x24>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <HAL_IncTick+0x24>)
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	2000000c 	.word	0x2000000c
 8001c4c:	20000348 	.word	0x20000348

08001c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <HAL_GetTick+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000348 	.word	0x20000348

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	@ (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4907      	ldr	r1, [pc, #28]	@ (8001d04 <__NVIC_EnableIRQ+0x38>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	@ (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	@ (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	@ 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	@ 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd4:	d301      	bcc.n	8001dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00f      	b.n	8001dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dda:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <SysTick_Config+0x40>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de2:	210f      	movs	r1, #15
 8001de4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001de8:	f7ff ff8e 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <SysTick_Config+0x40>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df2:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <SysTick_Config+0x40>)
 8001df4:	2207      	movs	r2, #7
 8001df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ff29 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4603      	mov	r3, r0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e30:	f7ff ff3e 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff ff8e 	bl	8001d5c <NVIC_EncodePriority>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff5d 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff31 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffa2 	bl	8001dc4 <SysTick_Config>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	e17f      	b.n	800219c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8171 	beq.w	8002196 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d005      	beq.n	8001ecc <HAL_GPIO_Init+0x40>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d130      	bne.n	8001f2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f02:	2201      	movs	r2, #1
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	f003 0201 	and.w	r2, r3, #1
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	d118      	bne.n	8001f6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f40:	2201      	movs	r2, #1
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	f003 0201 	and.w	r2, r3, #1
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d017      	beq.n	8001fa8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d123      	bne.n	8001ffc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	08da      	lsrs	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3208      	adds	r2, #8
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	08da      	lsrs	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3208      	adds	r2, #8
 8001ff6:	6939      	ldr	r1, [r7, #16]
 8001ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80ac 	beq.w	8002196 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203e:	4b5f      	ldr	r3, [pc, #380]	@ (80021bc <HAL_GPIO_Init+0x330>)
 8002040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002042:	4a5e      	ldr	r2, [pc, #376]	@ (80021bc <HAL_GPIO_Init+0x330>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6613      	str	r3, [r2, #96]	@ 0x60
 800204a:	4b5c      	ldr	r3, [pc, #368]	@ (80021bc <HAL_GPIO_Init+0x330>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002056:	4a5a      	ldr	r2, [pc, #360]	@ (80021c0 <HAL_GPIO_Init+0x334>)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	3302      	adds	r3, #2
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002080:	d025      	beq.n	80020ce <HAL_GPIO_Init+0x242>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a4f      	ldr	r2, [pc, #316]	@ (80021c4 <HAL_GPIO_Init+0x338>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <HAL_GPIO_Init+0x23e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4e      	ldr	r2, [pc, #312]	@ (80021c8 <HAL_GPIO_Init+0x33c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d019      	beq.n	80020c6 <HAL_GPIO_Init+0x23a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4d      	ldr	r2, [pc, #308]	@ (80021cc <HAL_GPIO_Init+0x340>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_GPIO_Init+0x236>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4c      	ldr	r2, [pc, #304]	@ (80021d0 <HAL_GPIO_Init+0x344>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00d      	beq.n	80020be <HAL_GPIO_Init+0x232>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4b      	ldr	r2, [pc, #300]	@ (80021d4 <HAL_GPIO_Init+0x348>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d007      	beq.n	80020ba <HAL_GPIO_Init+0x22e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4a      	ldr	r2, [pc, #296]	@ (80021d8 <HAL_GPIO_Init+0x34c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_GPIO_Init+0x22a>
 80020b2:	2306      	movs	r3, #6
 80020b4:	e00c      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020b6:	2307      	movs	r3, #7
 80020b8:	e00a      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e008      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020be:	2304      	movs	r3, #4
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020c2:	2303      	movs	r3, #3
 80020c4:	e004      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e002      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_GPIO_Init+0x244>
 80020ce:	2300      	movs	r3, #0
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	f002 0203 	and.w	r2, r2, #3
 80020d6:	0092      	lsls	r2, r2, #2
 80020d8:	4093      	lsls	r3, r2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020e0:	4937      	ldr	r1, [pc, #220]	@ (80021c0 <HAL_GPIO_Init+0x334>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020ee:	4b3b      	ldr	r3, [pc, #236]	@ (80021dc <HAL_GPIO_Init+0x350>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002112:	4a32      	ldr	r2, [pc, #200]	@ (80021dc <HAL_GPIO_Init+0x350>)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002118:	4b30      	ldr	r3, [pc, #192]	@ (80021dc <HAL_GPIO_Init+0x350>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4313      	orrs	r3, r2
 800213a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800213c:	4a27      	ldr	r2, [pc, #156]	@ (80021dc <HAL_GPIO_Init+0x350>)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002142:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <HAL_GPIO_Init+0x350>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002166:	4a1d      	ldr	r2, [pc, #116]	@ (80021dc <HAL_GPIO_Init+0x350>)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800216c:	4b1b      	ldr	r3, [pc, #108]	@ (80021dc <HAL_GPIO_Init+0x350>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002190:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <HAL_GPIO_Init+0x350>)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f ae78 	bne.w	8001e9c <HAL_GPIO_Init+0x10>
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000
 80021c4:	48000400 	.word	0x48000400
 80021c8:	48000800 	.word	0x48000800
 80021cc:	48000c00 	.word	0x48000c00
 80021d0:	48001000 	.word	0x48001000
 80021d4:	48001400 	.word	0x48001400
 80021d8:	48001800 	.word	0x48001800
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
 80021ec:	4613      	mov	r3, r2
 80021ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f0:	787b      	ldrb	r3, [r7, #1]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021f6:	887a      	ldrh	r2, [r7, #2]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021fc:	e002      	b.n	8002204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021fe:	887a      	ldrh	r2, [r7, #2]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	041a      	lsls	r2, r3, #16
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43d9      	mvns	r1, r3
 800222e:	887b      	ldrh	r3, [r7, #2]
 8002230:	400b      	ands	r3, r1
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	619a      	str	r2, [r3, #24]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <HAL_PWREx_GetVoltageRange+0x18>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40007000 	.word	0x40007000

08002260 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800226e:	d130      	bne.n	80022d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002270:	4b23      	ldr	r3, [pc, #140]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800227c:	d038      	beq.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800227e:	4b20      	ldr	r3, [pc, #128]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002286:	4a1e      	ldr	r2, [pc, #120]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002288:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800228c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800228e:	4b1d      	ldr	r3, [pc, #116]	@ (8002304 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2232      	movs	r2, #50	@ 0x32
 8002294:	fb02 f303 	mul.w	r3, r2, r3
 8002298:	4a1b      	ldr	r2, [pc, #108]	@ (8002308 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800229a:	fba2 2303 	umull	r2, r3, r2, r3
 800229e:	0c9b      	lsrs	r3, r3, #18
 80022a0:	3301      	adds	r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022a4:	e002      	b.n	80022ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ac:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b8:	d102      	bne.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f2      	bne.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022cc:	d110      	bne.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e00f      	b.n	80022f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022de:	d007      	beq.n	80022f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022e0:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022e8:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80022ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40007000 	.word	0x40007000
 8002304:	20000004 	.word	0x20000004
 8002308:	431bde83 	.word	0x431bde83

0800230c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e3ca      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231e:	4b97      	ldr	r3, [pc, #604]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002328:	4b94      	ldr	r3, [pc, #592]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80e4 	beq.w	8002508 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <HAL_RCC_OscConfig+0x4a>
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	f040 808b 	bne.w	8002464 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b01      	cmp	r3, #1
 8002352:	f040 8087 	bne.w	8002464 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002356:	4b89      	ldr	r3, [pc, #548]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x62>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e3a2      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1a      	ldr	r2, [r3, #32]
 8002372:	4b82      	ldr	r3, [pc, #520]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <HAL_RCC_OscConfig+0x7c>
 800237e:	4b7f      	ldr	r3, [pc, #508]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002386:	e005      	b.n	8002394 <HAL_RCC_OscConfig+0x88>
 8002388:	4b7c      	ldr	r3, [pc, #496]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800238a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002394:	4293      	cmp	r3, r2
 8002396:	d223      	bcs.n	80023e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fd55 	bl	8002e4c <RCC_SetFlashLatencyFromMSIRange>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e383      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ac:	4b73      	ldr	r3, [pc, #460]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a72      	ldr	r2, [pc, #456]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b70      	ldr	r3, [pc, #448]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	496d      	ldr	r1, [pc, #436]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023ca:	4b6c      	ldr	r3, [pc, #432]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	4968      	ldr	r1, [pc, #416]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	604b      	str	r3, [r1, #4]
 80023de:	e025      	b.n	800242c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e0:	4b66      	ldr	r3, [pc, #408]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a65      	ldr	r2, [pc, #404]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023e6:	f043 0308 	orr.w	r3, r3, #8
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	4b63      	ldr	r3, [pc, #396]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	4960      	ldr	r1, [pc, #384]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023fe:	4b5f      	ldr	r3, [pc, #380]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	495b      	ldr	r1, [pc, #364]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800240e:	4313      	orrs	r3, r2
 8002410:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 fd15 	bl	8002e4c <RCC_SetFlashLatencyFromMSIRange>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e343      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800242c:	f000 fc4a 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002430:	4602      	mov	r2, r0
 8002432:	4b52      	ldr	r3, [pc, #328]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	4950      	ldr	r1, [pc, #320]	@ (8002580 <HAL_RCC_OscConfig+0x274>)
 800243e:	5ccb      	ldrb	r3, [r1, r3]
 8002440:	f003 031f 	and.w	r3, r3, #31
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	4a4e      	ldr	r2, [pc, #312]	@ (8002584 <HAL_RCC_OscConfig+0x278>)
 800244a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800244c:	4b4e      	ldr	r3, [pc, #312]	@ (8002588 <HAL_RCC_OscConfig+0x27c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fbad 	bl	8001bb0 <HAL_InitTick>
 8002456:	4603      	mov	r3, r0
 8002458:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d052      	beq.n	8002506 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	e327      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d032      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800246c:	4b43      	ldr	r3, [pc, #268]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a42      	ldr	r2, [pc, #264]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002478:	f7ff fbea 	bl	8001c50 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002480:	f7ff fbe6 	bl	8001c50 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e310      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002492:	4b3a      	ldr	r3, [pc, #232]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0f0      	beq.n	8002480 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249e:	4b37      	ldr	r3, [pc, #220]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a36      	ldr	r2, [pc, #216]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b34      	ldr	r3, [pc, #208]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	4931      	ldr	r1, [pc, #196]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024bc:	4b2f      	ldr	r3, [pc, #188]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	492c      	ldr	r1, [pc, #176]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
 80024d0:	e01a      	b.n	8002508 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80024d2:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a29      	ldr	r2, [pc, #164]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024de:	f7ff fbb7 	bl	8001c50 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024e6:	f7ff fbb3 	bl	8001c50 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e2dd      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024f8:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1f0      	bne.n	80024e6 <HAL_RCC_OscConfig+0x1da>
 8002504:	e000      	b.n	8002508 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002506:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d074      	beq.n	80025fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b08      	cmp	r3, #8
 8002518:	d005      	beq.n	8002526 <HAL_RCC_OscConfig+0x21a>
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d10e      	bne.n	800253e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d10b      	bne.n	800253e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002526:	4b15      	ldr	r3, [pc, #84]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d064      	beq.n	80025fc <HAL_RCC_OscConfig+0x2f0>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d160      	bne.n	80025fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e2ba      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002546:	d106      	bne.n	8002556 <HAL_RCC_OscConfig+0x24a>
 8002548:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0b      	ldr	r2, [pc, #44]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800254e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e026      	b.n	80025a4 <HAL_RCC_OscConfig+0x298>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800255e:	d115      	bne.n	800258c <HAL_RCC_OscConfig+0x280>
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a05      	ldr	r2, [pc, #20]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002566:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a02      	ldr	r2, [pc, #8]	@ (800257c <HAL_RCC_OscConfig+0x270>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e014      	b.n	80025a4 <HAL_RCC_OscConfig+0x298>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	08008cd8 	.word	0x08008cd8
 8002584:	20000004 	.word	0x20000004
 8002588:	20000008 	.word	0x20000008
 800258c:	4ba0      	ldr	r3, [pc, #640]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a9f      	ldr	r2, [pc, #636]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b9d      	ldr	r3, [pc, #628]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a9c      	ldr	r2, [pc, #624]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800259e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff fb50 	bl	8001c50 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7ff fb4c 	bl	8001c50 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	@ 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e276      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c6:	4b92      	ldr	r3, [pc, #584]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x2a8>
 80025d2:	e014      	b.n	80025fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7ff fb3c 	bl	8001c50 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7ff fb38 	bl	8001c50 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	@ 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e262      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ee:	4b88      	ldr	r3, [pc, #544]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x2d0>
 80025fa:	e000      	b.n	80025fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d060      	beq.n	80026cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b04      	cmp	r3, #4
 800260e:	d005      	beq.n	800261c <HAL_RCC_OscConfig+0x310>
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d119      	bne.n	800264a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d116      	bne.n	800264a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800261c:	4b7c      	ldr	r3, [pc, #496]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_OscConfig+0x328>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e23f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b76      	ldr	r3, [pc, #472]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	061b      	lsls	r3, r3, #24
 8002642:	4973      	ldr	r1, [pc, #460]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002648:	e040      	b.n	80026cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d023      	beq.n	800269a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002652:	4b6f      	ldr	r3, [pc, #444]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a6e      	ldr	r2, [pc, #440]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7ff faf7 	bl	8001c50 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7ff faf3 	bl	8001c50 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e21d      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002678:	4b65      	ldr	r3, [pc, #404]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002684:	4b62      	ldr	r3, [pc, #392]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	061b      	lsls	r3, r3, #24
 8002692:	495f      	ldr	r1, [pc, #380]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002694:	4313      	orrs	r3, r2
 8002696:	604b      	str	r3, [r1, #4]
 8002698:	e018      	b.n	80026cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269a:	4b5d      	ldr	r3, [pc, #372]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a5c      	ldr	r2, [pc, #368]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80026a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7ff fad3 	bl	8001c50 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ae:	f7ff facf 	bl	8001c50 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e1f9      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026c0:	4b53      	ldr	r3, [pc, #332]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d03c      	beq.n	8002752 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01c      	beq.n	800271a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f0:	f7ff faae 	bl	8001c50 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f8:	f7ff faaa 	bl	8001c50 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e1d4      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800270a:	4b41      	ldr	r3, [pc, #260]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800270c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0ef      	beq.n	80026f8 <HAL_RCC_OscConfig+0x3ec>
 8002718:	e01b      	b.n	8002752 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271a:	4b3d      	ldr	r3, [pc, #244]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800271c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002720:	4a3b      	ldr	r2, [pc, #236]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002722:	f023 0301 	bic.w	r3, r3, #1
 8002726:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7ff fa91 	bl	8001c50 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002732:	f7ff fa8d 	bl	8001c50 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e1b7      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002744:	4b32      	ldr	r3, [pc, #200]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002746:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ef      	bne.n	8002732 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80a6 	beq.w	80028ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002760:	2300      	movs	r3, #0
 8002762:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002764:	4b2a      	ldr	r3, [pc, #168]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10d      	bne.n	800278c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002770:	4b27      	ldr	r3, [pc, #156]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002774:	4a26      	ldr	r2, [pc, #152]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277a:	6593      	str	r3, [r2, #88]	@ 0x58
 800277c:	4b24      	ldr	r3, [pc, #144]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002788:	2301      	movs	r3, #1
 800278a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278c:	4b21      	ldr	r3, [pc, #132]	@ (8002814 <HAL_RCC_OscConfig+0x508>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d118      	bne.n	80027ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002798:	4b1e      	ldr	r3, [pc, #120]	@ (8002814 <HAL_RCC_OscConfig+0x508>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1d      	ldr	r2, [pc, #116]	@ (8002814 <HAL_RCC_OscConfig+0x508>)
 800279e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a4:	f7ff fa54 	bl	8001c50 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ac:	f7ff fa50 	bl	8001c50 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e17a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027be:	4b15      	ldr	r3, [pc, #84]	@ (8002814 <HAL_RCC_OscConfig+0x508>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d108      	bne.n	80027e4 <HAL_RCC_OscConfig+0x4d8>
 80027d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027e2:	e029      	b.n	8002838 <HAL_RCC_OscConfig+0x52c>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d115      	bne.n	8002818 <HAL_RCC_OscConfig+0x50c>
 80027ec:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80027ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f2:	4a07      	ldr	r2, [pc, #28]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027fc:	4b04      	ldr	r3, [pc, #16]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002802:	4a03      	ldr	r2, [pc, #12]	@ (8002810 <HAL_RCC_OscConfig+0x504>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800280c:	e014      	b.n	8002838 <HAL_RCC_OscConfig+0x52c>
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000
 8002814:	40007000 	.word	0x40007000
 8002818:	4b9c      	ldr	r3, [pc, #624]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281e:	4a9b      	ldr	r2, [pc, #620]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002828:	4b98      	ldr	r3, [pc, #608]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800282e:	4a97      	ldr	r2, [pc, #604]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002830:	f023 0304 	bic.w	r3, r3, #4
 8002834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d016      	beq.n	800286e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002840:	f7ff fa06 	bl	8001c50 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002846:	e00a      	b.n	800285e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002848:	f7ff fa02 	bl	8001c50 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e12a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285e:	4b8b      	ldr	r3, [pc, #556]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ed      	beq.n	8002848 <HAL_RCC_OscConfig+0x53c>
 800286c:	e015      	b.n	800289a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286e:	f7ff f9ef 	bl	8001c50 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002874:	e00a      	b.n	800288c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7ff f9eb 	bl	8001c50 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e113      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800288c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1ed      	bne.n	8002876 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800289a:	7ffb      	ldrb	r3, [r7, #31]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d105      	bne.n	80028ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a0:	4b7a      	ldr	r3, [pc, #488]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	4a79      	ldr	r2, [pc, #484]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80028a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80fe 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	f040 80d0 	bne.w	8002a60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028c0:	4b72      	ldr	r3, [pc, #456]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d130      	bne.n	8002936 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	3b01      	subs	r3, #1
 80028e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d127      	bne.n	8002936 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d11f      	bne.n	8002936 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002900:	2a07      	cmp	r2, #7
 8002902:	bf14      	ite	ne
 8002904:	2201      	movne	r2, #1
 8002906:	2200      	moveq	r2, #0
 8002908:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800290a:	4293      	cmp	r3, r2
 800290c:	d113      	bne.n	8002936 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	3b01      	subs	r3, #1
 800291c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800291e:	429a      	cmp	r2, r3
 8002920:	d109      	bne.n	8002936 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	3b01      	subs	r3, #1
 8002930:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d06e      	beq.n	8002a14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b0c      	cmp	r3, #12
 800293a:	d069      	beq.n	8002a10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800293c:	4b53      	ldr	r3, [pc, #332]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002948:	4b50      	ldr	r3, [pc, #320]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0ad      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002958:	4b4c      	ldr	r3, [pc, #304]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800295e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002962:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002964:	f7ff f974 	bl	8001c50 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296c:	f7ff f970 	bl	8001c50 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e09a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800297e:	4b43      	ldr	r3, [pc, #268]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800298a:	4b40      	ldr	r3, [pc, #256]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	4b40      	ldr	r3, [pc, #256]	@ (8002a90 <HAL_RCC_OscConfig+0x784>)
 8002990:	4013      	ands	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800299a:	3a01      	subs	r2, #1
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	4311      	orrs	r1, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029a4:	0212      	lsls	r2, r2, #8
 80029a6:	4311      	orrs	r1, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029ac:	0852      	lsrs	r2, r2, #1
 80029ae:	3a01      	subs	r2, #1
 80029b0:	0552      	lsls	r2, r2, #21
 80029b2:	4311      	orrs	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029b8:	0852      	lsrs	r2, r2, #1
 80029ba:	3a01      	subs	r2, #1
 80029bc:	0652      	lsls	r2, r2, #25
 80029be:	4311      	orrs	r1, r2
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029c4:	0912      	lsrs	r2, r2, #4
 80029c6:	0452      	lsls	r2, r2, #17
 80029c8:	430a      	orrs	r2, r1
 80029ca:	4930      	ldr	r1, [pc, #192]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029d0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2d      	ldr	r2, [pc, #180]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80029d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029dc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 80029e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029e8:	f7ff f932 	bl	8001c50 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7ff f92e 	bl	8001c50 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e058      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a02:	4b22      	ldr	r3, [pc, #136]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a0e:	e050      	b.n	8002ab2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e04f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a14:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d148      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a20:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a2c:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4a16      	ldr	r2, [pc, #88]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a38:	f7ff f90a 	bl	8001c50 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7ff f906 	bl	8001c50 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e030      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x734>
 8002a5e:	e028      	b.n	8002ab2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d023      	beq.n	8002aae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b09      	ldr	r3, [pc, #36]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a08      	ldr	r2, [pc, #32]	@ (8002a8c <HAL_RCC_OscConfig+0x780>)
 8002a6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7ff f8ed 	bl	8001c50 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a78:	e00c      	b.n	8002a94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7ff f8e9 	bl	8001c50 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d905      	bls.n	8002a94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e013      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_RCC_OscConfig+0x7b0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ec      	bne.n	8002a7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002aa0:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <HAL_RCC_OscConfig+0x7b0>)
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	4905      	ldr	r1, [pc, #20]	@ (8002abc <HAL_RCC_OscConfig+0x7b0>)
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_RCC_OscConfig+0x7b4>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60cb      	str	r3, [r1, #12]
 8002aac:	e001      	b.n	8002ab2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	feeefffc 	.word	0xfeeefffc

08002ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0e7      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b75      	ldr	r3, [pc, #468]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d910      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b72      	ldr	r3, [pc, #456]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 0207 	bic.w	r2, r3, #7
 8002aee:	4970      	ldr	r1, [pc, #448]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b6e      	ldr	r3, [pc, #440]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0cf      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d010      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4b66      	ldr	r3, [pc, #408]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d908      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	4b63      	ldr	r3, [pc, #396]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4960      	ldr	r1, [pc, #384]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d04c      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d107      	bne.n	8002b5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d121      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e0a6      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b62:	4b54      	ldr	r3, [pc, #336]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d115      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e09a      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e08e      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e086      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b9a:	4b46      	ldr	r3, [pc, #280]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 0203 	bic.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4943      	ldr	r1, [pc, #268]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bac:	f7ff f850 	bl	8001c50 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7ff f84c 	bl	8001c50 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e06e      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 020c 	and.w	r2, r3, #12
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1eb      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d010      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	4b31      	ldr	r3, [pc, #196]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d208      	bcs.n	8002c0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	492b      	ldr	r1, [pc, #172]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0a:	4b29      	ldr	r3, [pc, #164]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d210      	bcs.n	8002c3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c18:	4b25      	ldr	r3, [pc, #148]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 0207 	bic.w	r2, r3, #7
 8002c20:	4923      	ldr	r1, [pc, #140]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c28:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e036      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c46:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4918      	ldr	r1, [pc, #96]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d009      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c64:	4b13      	ldr	r3, [pc, #76]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4910      	ldr	r1, [pc, #64]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c78:	f000 f824 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	490b      	ldr	r1, [pc, #44]	@ (8002cb8 <HAL_RCC_ClockConfig+0x1f4>)
 8002c8a:	5ccb      	ldrb	r3, [r1, r3]
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
 8002c94:	4a09      	ldr	r2, [pc, #36]	@ (8002cbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7fe ff87 	bl	8001bb0 <HAL_InitTick>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ca6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	08008cd8 	.word	0x08008cd8
 8002cbc:	20000004 	.word	0x20000004
 8002cc0:	20000008 	.word	0x20000008

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	@ 0x24
 8002cc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b0c      	cmp	r3, #12
 8002cf0:	d121      	bne.n	8002d36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d11e      	bne.n	8002d36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cf8:	4b34      	ldr	r3, [pc, #208]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d04:	4b31      	ldr	r3, [pc, #196]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	e005      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d14:	4b2d      	ldr	r3, [pc, #180]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d20:	4a2b      	ldr	r2, [pc, #172]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d34:	e00a      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d102      	bne.n	8002d42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d3c:	4b25      	ldr	r3, [pc, #148]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	e004      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d101      	bne.n	8002d4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d48:	4b23      	ldr	r3, [pc, #140]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d134      	bne.n	8002dbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d52:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d003      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0xac>
 8002d68:	e005      	b.n	8002d76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d6c:	617b      	str	r3, [r7, #20]
      break;
 8002d6e:	e005      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d72:	617b      	str	r3, [r7, #20]
      break;
 8002d74:	e002      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	617b      	str	r3, [r7, #20]
      break;
 8002d7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d7c:	4b13      	ldr	r3, [pc, #76]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	3301      	adds	r3, #1
 8002d88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d8a:	4b10      	ldr	r3, [pc, #64]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	fb03 f202 	mul.w	r2, r3, r2
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002da2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	0e5b      	lsrs	r3, r3, #25
 8002da8:	f003 0303 	and.w	r3, r3, #3
 8002dac:	3301      	adds	r3, #1
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002dbc:	69bb      	ldr	r3, [r7, #24]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3724      	adds	r7, #36	@ 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08008cf0 	.word	0x08008cf0
 8002dd4:	00f42400 	.word	0x00f42400
 8002dd8:	007a1200 	.word	0x007a1200

08002ddc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de0:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000004 	.word	0x20000004

08002df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002df8:	f7ff fff0 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4904      	ldr	r1, [pc, #16]	@ (8002e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	08008ce8 	.word	0x08008ce8

08002e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e24:	f7ff ffda 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	0adb      	lsrs	r3, r3, #11
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	4904      	ldr	r1, [pc, #16]	@ (8002e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e36:	5ccb      	ldrb	r3, [r1, r3]
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	08008ce8 	.word	0x08008ce8

08002e4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e58:	4b2a      	ldr	r3, [pc, #168]	@ (8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e64:	f7ff f9ee 	bl	8002244 <HAL_PWREx_GetVoltageRange>
 8002e68:	6178      	str	r0, [r7, #20]
 8002e6a:	e014      	b.n	8002e96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e6c:	4b25      	ldr	r3, [pc, #148]	@ (8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e70:	4a24      	ldr	r2, [pc, #144]	@ (8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e78:	4b22      	ldr	r3, [pc, #136]	@ (8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e84:	f7ff f9de 	bl	8002244 <HAL_PWREx_GetVoltageRange>
 8002e88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002f04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e94:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e9c:	d10b      	bne.n	8002eb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b80      	cmp	r3, #128	@ 0x80
 8002ea2:	d919      	bls.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ea8:	d902      	bls.n	8002eb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eaa:	2302      	movs	r3, #2
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	e013      	b.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	e010      	b.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b80      	cmp	r3, #128	@ 0x80
 8002eba:	d902      	bls.n	8002ec2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	e00a      	b.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b80      	cmp	r3, #128	@ 0x80
 8002ec6:	d102      	bne.n	8002ece <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ec8:	2302      	movs	r3, #2
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	e004      	b.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b70      	cmp	r3, #112	@ 0x70
 8002ed2:	d101      	bne.n	8002ed8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 0207 	bic.w	r2, r3, #7
 8002ee0:	4909      	ldr	r1, [pc, #36]	@ (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ee8:	4b07      	ldr	r3, [pc, #28]	@ (8002f08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d001      	beq.n	8002efa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40022000 	.word	0x40022000

08002f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f14:	2300      	movs	r3, #0
 8002f16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f18:	2300      	movs	r3, #0
 8002f1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d041      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f30:	d02a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002f32:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f36:	d824      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f3c:	d008      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f42:	d81e      	bhi.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002f48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f4c:	d010      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f4e:	e018      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f50:	4b86      	ldr	r3, [pc, #536]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4a85      	ldr	r2, [pc, #532]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f5c:	e015      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 fabb 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f6e:	e00c      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3320      	adds	r3, #32
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fba6 	bl	80036c8 <RCCEx_PLLSAI2_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f80:	e003      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	74fb      	strb	r3, [r7, #19]
      break;
 8002f86:	e000      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f8a:	7cfb      	ldrb	r3, [r7, #19]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f90:	4b76      	ldr	r3, [pc, #472]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f9e:	4973      	ldr	r1, [pc, #460]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fa6:	e001      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d041      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fc0:	d02a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002fc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002fc6:	d824      	bhi.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fcc:	d008      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fd2:	d81e      	bhi.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002fd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fdc:	d010      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fde:	e018      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fe0:	4b62      	ldr	r3, [pc, #392]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4a61      	ldr	r2, [pc, #388]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fec:	e015      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fa73 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ffe:	e00c      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3320      	adds	r3, #32
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fb5e 	bl	80036c8 <RCCEx_PLLSAI2_Config>
 800300c:	4603      	mov	r3, r0
 800300e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003010:	e003      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	74fb      	strb	r3, [r7, #19]
      break;
 8003016:	e000      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003018:	bf00      	nop
    }

    if(ret == HAL_OK)
 800301a:	7cfb      	ldrb	r3, [r7, #19]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10b      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003020:	4b52      	ldr	r3, [pc, #328]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003026:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800302e:	494f      	ldr	r1, [pc, #316]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003036:	e001      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003038:	7cfb      	ldrb	r3, [r7, #19]
 800303a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a0 	beq.w	800318a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800304e:	4b47      	ldr	r3, [pc, #284]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00d      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003064:	4b41      	ldr	r3, [pc, #260]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	4a40      	ldr	r2, [pc, #256]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003070:	4b3e      	ldr	r3, [pc, #248]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800307c:	2301      	movs	r3, #1
 800307e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003080:	4b3b      	ldr	r3, [pc, #236]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a3a      	ldr	r2, [pc, #232]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800308a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800308c:	f7fe fde0 	bl	8001c50 <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003092:	e009      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003094:	f7fe fddc 	bl	8001c50 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d902      	bls.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	74fb      	strb	r3, [r7, #19]
        break;
 80030a6:	e005      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030a8:	4b31      	ldr	r3, [pc, #196]	@ (8003170 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0ef      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d15c      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030ba:	4b2c      	ldr	r3, [pc, #176]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01f      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d019      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030d8:	4b24      	ldr	r3, [pc, #144]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030e4:	4b21      	ldr	r3, [pc, #132]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ea:	4a20      	ldr	r2, [pc, #128]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030f4:	4b1d      	ldr	r3, [pc, #116]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fa:	4a1c      	ldr	r2, [pc, #112]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003104:	4a19      	ldr	r2, [pc, #100]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d016      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003116:	f7fe fd9b 	bl	8001c50 <HAL_GetTick>
 800311a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311c:	e00b      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311e:	f7fe fd97 	bl	8001c50 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d902      	bls.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	74fb      	strb	r3, [r7, #19]
            break;
 8003134:	e006      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003136:	4b0d      	ldr	r3, [pc, #52]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ec      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003144:	7cfb      	ldrb	r3, [r7, #19]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800314a:	4b08      	ldr	r3, [pc, #32]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003150:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800315a:	4904      	ldr	r1, [pc, #16]	@ (800316c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315c:	4313      	orrs	r3, r2
 800315e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003162:	e009      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	74bb      	strb	r3, [r7, #18]
 8003168:	e006      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003178:	7c7b      	ldrb	r3, [r7, #17]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317e:	4b9e      	ldr	r3, [pc, #632]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003182:	4a9d      	ldr	r2, [pc, #628]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003184:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003188:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003196:	4b98      	ldr	r3, [pc, #608]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319c:	f023 0203 	bic.w	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a4:	4994      	ldr	r1, [pc, #592]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b8:	4b8f      	ldr	r3, [pc, #572]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031be:	f023 020c 	bic.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c6:	498c      	ldr	r1, [pc, #560]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031da:	4b87      	ldr	r3, [pc, #540]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	4983      	ldr	r1, [pc, #524]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031fc:	4b7e      	ldr	r3, [pc, #504]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003202:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	497b      	ldr	r1, [pc, #492]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800321e:	4b76      	ldr	r3, [pc, #472]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003224:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800322c:	4972      	ldr	r1, [pc, #456]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003240:	4b6d      	ldr	r3, [pc, #436]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003246:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324e:	496a      	ldr	r1, [pc, #424]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003262:	4b65      	ldr	r3, [pc, #404]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003268:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003270:	4961      	ldr	r1, [pc, #388]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003284:	4b5c      	ldr	r3, [pc, #368]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	4959      	ldr	r1, [pc, #356]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032a6:	4b54      	ldr	r3, [pc, #336]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b4:	4950      	ldr	r1, [pc, #320]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032c8:	4b4b      	ldr	r3, [pc, #300]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d6:	4948      	ldr	r1, [pc, #288]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ea:	4b43      	ldr	r3, [pc, #268]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	493f      	ldr	r1, [pc, #252]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d028      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800330c:	4b3a      	ldr	r3, [pc, #232]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003312:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800331a:	4937      	ldr	r1, [pc, #220]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800332a:	d106      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800332c:	4b32      	ldr	r3, [pc, #200]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4a31      	ldr	r2, [pc, #196]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003332:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003336:	60d3      	str	r3, [r2, #12]
 8003338:	e011      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800333e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003342:	d10c      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	2101      	movs	r1, #1
 800334a:	4618      	mov	r0, r3
 800334c:	f000 f8c8 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d028      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800336a:	4b23      	ldr	r3, [pc, #140]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003370:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	491f      	ldr	r1, [pc, #124]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003388:	d106      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800338a:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	4a1a      	ldr	r2, [pc, #104]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003390:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003394:	60d3      	str	r3, [r2, #12]
 8003396:	e011      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f899 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b2:	7cfb      	ldrb	r3, [r7, #19]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d02b      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c8:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d6:	4908      	ldr	r1, [pc, #32]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033e6:	d109      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e8:	4b03      	ldr	r3, [pc, #12]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a02      	ldr	r2, [pc, #8]	@ (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033f2:	60d3      	str	r3, [r2, #12]
 80033f4:	e014      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003400:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003404:	d10c      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3304      	adds	r3, #4
 800340a:	2101      	movs	r1, #1
 800340c:	4618      	mov	r0, r3
 800340e:	f000 f867 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d02f      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800342c:	4b2b      	ldr	r3, [pc, #172]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003432:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800343a:	4928      	ldr	r1, [pc, #160]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003446:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800344a:	d10d      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	2102      	movs	r1, #2
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f844 	bl	80034e0 <RCCEx_PLLSAI1_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d014      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	74bb      	strb	r3, [r7, #18]
 8003466:	e011      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800346c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003470:	d10c      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3320      	adds	r3, #32
 8003476:	2102      	movs	r1, #2
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f925 	bl	80036c8 <RCCEx_PLLSAI2_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003498:	4b10      	ldr	r3, [pc, #64]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800349e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034a6:	490d      	ldr	r1, [pc, #52]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034ba:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ca:	4904      	ldr	r1, [pc, #16]	@ (80034dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000

080034e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ee:	4b75      	ldr	r3, [pc, #468]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d018      	beq.n	800352c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80034fa:	4b72      	ldr	r3, [pc, #456]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0203 	and.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d10d      	bne.n	8003526 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
       ||
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003512:	4b6c      	ldr	r3, [pc, #432]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
       ||
 8003522:	429a      	cmp	r2, r3
 8003524:	d047      	beq.n	80035b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	e044      	b.n	80035b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d018      	beq.n	8003566 <RCCEx_PLLSAI1_Config+0x86>
 8003534:	2b03      	cmp	r3, #3
 8003536:	d825      	bhi.n	8003584 <RCCEx_PLLSAI1_Config+0xa4>
 8003538:	2b01      	cmp	r3, #1
 800353a:	d002      	beq.n	8003542 <RCCEx_PLLSAI1_Config+0x62>
 800353c:	2b02      	cmp	r3, #2
 800353e:	d009      	beq.n	8003554 <RCCEx_PLLSAI1_Config+0x74>
 8003540:	e020      	b.n	8003584 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003542:	4b60      	ldr	r3, [pc, #384]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d11d      	bne.n	800358a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003552:	e01a      	b.n	800358a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003554:	4b5b      	ldr	r3, [pc, #364]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d116      	bne.n	800358e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003564:	e013      	b.n	800358e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003566:	4b57      	ldr	r3, [pc, #348]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003572:	4b54      	ldr	r3, [pc, #336]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003582:	e006      	b.n	8003592 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      break;
 8003588:	e004      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800358a:	bf00      	nop
 800358c:	e002      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800358e:	bf00      	nop
 8003590:	e000      	b.n	8003594 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003592:	bf00      	nop
    }

    if(status == HAL_OK)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10d      	bne.n	80035b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800359a:	4b4a      	ldr	r3, [pc, #296]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	430b      	orrs	r3, r1
 80035b0:	4944      	ldr	r1, [pc, #272]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d17d      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035bc:	4b41      	ldr	r3, [pc, #260]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a40      	ldr	r2, [pc, #256]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c8:	f7fe fb42 	bl	8001c50 <HAL_GetTick>
 80035cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ce:	e009      	b.n	80035e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035d0:	f7fe fb3e 	bl	8001c50 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d902      	bls.n	80035e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	73fb      	strb	r3, [r7, #15]
        break;
 80035e2:	e005      	b.n	80035f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035e4:	4b37      	ldr	r3, [pc, #220]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ef      	bne.n	80035d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d160      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d111      	bne.n	8003620 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035fc:	4b31      	ldr	r3, [pc, #196]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6892      	ldr	r2, [r2, #8]
 800360c:	0211      	lsls	r1, r2, #8
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68d2      	ldr	r2, [r2, #12]
 8003612:	0912      	lsrs	r2, r2, #4
 8003614:	0452      	lsls	r2, r2, #17
 8003616:	430a      	orrs	r2, r1
 8003618:	492a      	ldr	r1, [pc, #168]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800361a:	4313      	orrs	r3, r2
 800361c:	610b      	str	r3, [r1, #16]
 800361e:	e027      	b.n	8003670 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d112      	bne.n	800364c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003626:	4b27      	ldr	r3, [pc, #156]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800362e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6892      	ldr	r2, [r2, #8]
 8003636:	0211      	lsls	r1, r2, #8
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6912      	ldr	r2, [r2, #16]
 800363c:	0852      	lsrs	r2, r2, #1
 800363e:	3a01      	subs	r2, #1
 8003640:	0552      	lsls	r2, r2, #21
 8003642:	430a      	orrs	r2, r1
 8003644:	491f      	ldr	r1, [pc, #124]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	610b      	str	r3, [r1, #16]
 800364a:	e011      	b.n	8003670 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800364c:	4b1d      	ldr	r3, [pc, #116]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003654:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6892      	ldr	r2, [r2, #8]
 800365c:	0211      	lsls	r1, r2, #8
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6952      	ldr	r2, [r2, #20]
 8003662:	0852      	lsrs	r2, r2, #1
 8003664:	3a01      	subs	r2, #1
 8003666:	0652      	lsls	r2, r2, #25
 8003668:	430a      	orrs	r2, r1
 800366a:	4916      	ldr	r1, [pc, #88]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003670:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a13      	ldr	r2, [pc, #76]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003676:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800367a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fe fae8 	bl	8001c50 <HAL_GetTick>
 8003680:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003682:	e009      	b.n	8003698 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003684:	f7fe fae4 	bl	8001c50 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d902      	bls.n	8003698 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	73fb      	strb	r3, [r7, #15]
          break;
 8003696:	e005      	b.n	80036a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003698:	4b0a      	ldr	r3, [pc, #40]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ef      	beq.n	8003684 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036aa:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	4904      	ldr	r1, [pc, #16]	@ (80036c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000

080036c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80036e2:	4b67      	ldr	r3, [pc, #412]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d10d      	bne.n	800370e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
       ||
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80036fa:	4b61      	ldr	r3, [pc, #388]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
       ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d047      	beq.n	800379e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e044      	b.n	800379e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d018      	beq.n	800374e <RCCEx_PLLSAI2_Config+0x86>
 800371c:	2b03      	cmp	r3, #3
 800371e:	d825      	bhi.n	800376c <RCCEx_PLLSAI2_Config+0xa4>
 8003720:	2b01      	cmp	r3, #1
 8003722:	d002      	beq.n	800372a <RCCEx_PLLSAI2_Config+0x62>
 8003724:	2b02      	cmp	r3, #2
 8003726:	d009      	beq.n	800373c <RCCEx_PLLSAI2_Config+0x74>
 8003728:	e020      	b.n	800376c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800372a:	4b55      	ldr	r3, [pc, #340]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d11d      	bne.n	8003772 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373a:	e01a      	b.n	8003772 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800373c:	4b50      	ldr	r3, [pc, #320]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374c:	e013      	b.n	8003776 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800374e:	4b4c      	ldr	r3, [pc, #304]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800375a:	4b49      	ldr	r3, [pc, #292]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800376a:	e006      	b.n	800377a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      break;
 8003770:	e004      	b.n	800377c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800377a:	bf00      	nop
    }

    if(status == HAL_OK)
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10d      	bne.n	800379e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003782:	4b3f      	ldr	r3, [pc, #252]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	3b01      	subs	r3, #1
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	430b      	orrs	r3, r1
 8003798:	4939      	ldr	r1, [pc, #228]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379a:	4313      	orrs	r3, r2
 800379c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d167      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037a4:	4b36      	ldr	r3, [pc, #216]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a35      	ldr	r2, [pc, #212]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fe fa4e 	bl	8001c50 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037b6:	e009      	b.n	80037cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037b8:	f7fe fa4a 	bl	8001c50 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d902      	bls.n	80037cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	73fb      	strb	r3, [r7, #15]
        break;
 80037ca:	e005      	b.n	80037d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ef      	bne.n	80037b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d14a      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d111      	bne.n	8003808 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037e4:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80037ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6892      	ldr	r2, [r2, #8]
 80037f4:	0211      	lsls	r1, r2, #8
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	68d2      	ldr	r2, [r2, #12]
 80037fa:	0912      	lsrs	r2, r2, #4
 80037fc:	0452      	lsls	r2, r2, #17
 80037fe:	430a      	orrs	r2, r1
 8003800:	491f      	ldr	r1, [pc, #124]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003802:	4313      	orrs	r3, r2
 8003804:	614b      	str	r3, [r1, #20]
 8003806:	e011      	b.n	800382c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003808:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380a:	695b      	ldr	r3, [r3, #20]
 800380c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003810:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6892      	ldr	r2, [r2, #8]
 8003818:	0211      	lsls	r1, r2, #8
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6912      	ldr	r2, [r2, #16]
 800381e:	0852      	lsrs	r2, r2, #1
 8003820:	3a01      	subs	r2, #1
 8003822:	0652      	lsls	r2, r2, #25
 8003824:	430a      	orrs	r2, r1
 8003826:	4916      	ldr	r1, [pc, #88]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003828:	4313      	orrs	r3, r2
 800382a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800382c:	4b14      	ldr	r3, [pc, #80]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a13      	ldr	r2, [pc, #76]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fe fa0a 	bl	8001c50 <HAL_GetTick>
 800383c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800383e:	e009      	b.n	8003854 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003840:	f7fe fa06 	bl	8001c50 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d902      	bls.n	8003854 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	73fb      	strb	r3, [r7, #15]
          break;
 8003852:	e005      	b.n	8003860 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003854:	4b0a      	ldr	r3, [pc, #40]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ef      	beq.n	8003840 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003866:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	4904      	ldr	r1, [pc, #16]	@ (8003880 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003870:	4313      	orrs	r3, r2
 8003872:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000

08003884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e049      	b.n	800392a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd ff3c 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3304      	adds	r3, #4
 80038c0:	4619      	mov	r1, r3
 80038c2:	4610      	mov	r0, r2
 80038c4:	f000 ffa0 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
	...

08003934 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d001      	beq.n	800394c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e047      	b.n	80039dc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a23      	ldr	r2, [pc, #140]	@ (80039e8 <HAL_TIM_Base_Start+0xb4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d01d      	beq.n	800399a <HAL_TIM_Base_Start+0x66>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003966:	d018      	beq.n	800399a <HAL_TIM_Base_Start+0x66>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1f      	ldr	r2, [pc, #124]	@ (80039ec <HAL_TIM_Base_Start+0xb8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_TIM_Base_Start+0x66>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1e      	ldr	r2, [pc, #120]	@ (80039f0 <HAL_TIM_Base_Start+0xbc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00e      	beq.n	800399a <HAL_TIM_Base_Start+0x66>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1c      	ldr	r2, [pc, #112]	@ (80039f4 <HAL_TIM_Base_Start+0xc0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d009      	beq.n	800399a <HAL_TIM_Base_Start+0x66>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1b      	ldr	r2, [pc, #108]	@ (80039f8 <HAL_TIM_Base_Start+0xc4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d004      	beq.n	800399a <HAL_TIM_Base_Start+0x66>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a19      	ldr	r2, [pc, #100]	@ (80039fc <HAL_TIM_Base_Start+0xc8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d115      	bne.n	80039c6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	4b17      	ldr	r3, [pc, #92]	@ (8003a00 <HAL_TIM_Base_Start+0xcc>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b06      	cmp	r3, #6
 80039aa:	d015      	beq.n	80039d8 <HAL_TIM_Base_Start+0xa4>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b2:	d011      	beq.n	80039d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c4:	e008      	b.n	80039d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	e000      	b.n	80039da <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40000400 	.word	0x40000400
 80039f0:	40000800 	.word	0x40000800
 80039f4:	40000c00 	.word	0x40000c00
 80039f8:	40013400 	.word	0x40013400
 80039fc:	40014000 	.word	0x40014000
 8003a00:	00010007 	.word	0x00010007

08003a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e049      	b.n	8003aaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f841 	bl	8003ab2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f000 fee0 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
	...

08003ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <HAL_TIM_PWM_Start+0x24>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	bf14      	ite	ne
 8003ae4:	2301      	movne	r3, #1
 8003ae6:	2300      	moveq	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e03c      	b.n	8003b66 <HAL_TIM_PWM_Start+0x9e>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d109      	bne.n	8003b06 <HAL_TIM_PWM_Start+0x3e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	e02f      	b.n	8003b66 <HAL_TIM_PWM_Start+0x9e>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d109      	bne.n	8003b20 <HAL_TIM_PWM_Start+0x58>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	bf14      	ite	ne
 8003b18:	2301      	movne	r3, #1
 8003b1a:	2300      	moveq	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	e022      	b.n	8003b66 <HAL_TIM_PWM_Start+0x9e>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b0c      	cmp	r3, #12
 8003b24:	d109      	bne.n	8003b3a <HAL_TIM_PWM_Start+0x72>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	bf14      	ite	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	2300      	moveq	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	e015      	b.n	8003b66 <HAL_TIM_PWM_Start+0x9e>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d109      	bne.n	8003b54 <HAL_TIM_PWM_Start+0x8c>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	e008      	b.n	8003b66 <HAL_TIM_PWM_Start+0x9e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e09c      	b.n	8003ca8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <HAL_TIM_PWM_Start+0xb6>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b7c:	e023      	b.n	8003bc6 <HAL_TIM_PWM_Start+0xfe>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d104      	bne.n	8003b8e <HAL_TIM_PWM_Start+0xc6>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b8c:	e01b      	b.n	8003bc6 <HAL_TIM_PWM_Start+0xfe>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d104      	bne.n	8003b9e <HAL_TIM_PWM_Start+0xd6>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b9c:	e013      	b.n	8003bc6 <HAL_TIM_PWM_Start+0xfe>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b0c      	cmp	r3, #12
 8003ba2:	d104      	bne.n	8003bae <HAL_TIM_PWM_Start+0xe6>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bac:	e00b      	b.n	8003bc6 <HAL_TIM_PWM_Start+0xfe>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d104      	bne.n	8003bbe <HAL_TIM_PWM_Start+0xf6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bbc:	e003      	b.n	8003bc6 <HAL_TIM_PWM_Start+0xfe>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	6839      	ldr	r1, [r7, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 fb54 	bl	800527c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a35      	ldr	r2, [pc, #212]	@ (8003cb0 <HAL_TIM_PWM_Start+0x1e8>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d013      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x13e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a34      	ldr	r2, [pc, #208]	@ (8003cb4 <HAL_TIM_PWM_Start+0x1ec>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00e      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x13e>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a32      	ldr	r2, [pc, #200]	@ (8003cb8 <HAL_TIM_PWM_Start+0x1f0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d009      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x13e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a31      	ldr	r2, [pc, #196]	@ (8003cbc <HAL_TIM_PWM_Start+0x1f4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_TIM_PWM_Start+0x13e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a2f      	ldr	r2, [pc, #188]	@ (8003cc0 <HAL_TIM_PWM_Start+0x1f8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_PWM_Start+0x142>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e000      	b.n	8003c0c <HAL_TIM_PWM_Start+0x144>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a22      	ldr	r2, [pc, #136]	@ (8003cb0 <HAL_TIM_PWM_Start+0x1e8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01d      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x19e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c32:	d018      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x19e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a22      	ldr	r2, [pc, #136]	@ (8003cc4 <HAL_TIM_PWM_Start+0x1fc>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x19e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a21      	ldr	r2, [pc, #132]	@ (8003cc8 <HAL_TIM_PWM_Start+0x200>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x19e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ccc <HAL_TIM_PWM_Start+0x204>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x19e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a17      	ldr	r2, [pc, #92]	@ (8003cb4 <HAL_TIM_PWM_Start+0x1ec>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_TIM_PWM_Start+0x19e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a15      	ldr	r2, [pc, #84]	@ (8003cb8 <HAL_TIM_PWM_Start+0x1f0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d115      	bne.n	8003c92 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	4b18      	ldr	r3, [pc, #96]	@ (8003cd0 <HAL_TIM_PWM_Start+0x208>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2b06      	cmp	r3, #6
 8003c76:	d015      	beq.n	8003ca4 <HAL_TIM_PWM_Start+0x1dc>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c7e:	d011      	beq.n	8003ca4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c90:	e008      	b.n	8003ca4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f042 0201 	orr.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e000      	b.n	8003ca6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	40013400 	.word	0x40013400
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40000800 	.word	0x40000800
 8003ccc:	40000c00 	.word	0x40000c00
 8003cd0:	00010007 	.word	0x00010007

08003cd4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e049      	b.n	8003d7a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f841 	bl	8003d82 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f000 fd78 	bl	8004808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d104      	bne.n	8003db6 <HAL_TIM_IC_Start_IT+0x1e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e023      	b.n	8003dfe <HAL_TIM_IC_Start_IT+0x66>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d104      	bne.n	8003dc6 <HAL_TIM_IC_Start_IT+0x2e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	e01b      	b.n	8003dfe <HAL_TIM_IC_Start_IT+0x66>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_IC_Start_IT+0x3e>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	e013      	b.n	8003dfe <HAL_TIM_IC_Start_IT+0x66>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	d104      	bne.n	8003de6 <HAL_TIM_IC_Start_IT+0x4e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e00b      	b.n	8003dfe <HAL_TIM_IC_Start_IT+0x66>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d104      	bne.n	8003df6 <HAL_TIM_IC_Start_IT+0x5e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e003      	b.n	8003dfe <HAL_TIM_IC_Start_IT+0x66>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <HAL_TIM_IC_Start_IT+0x78>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e013      	b.n	8003e38 <HAL_TIM_IC_Start_IT+0xa0>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d104      	bne.n	8003e20 <HAL_TIM_IC_Start_IT+0x88>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	e00b      	b.n	8003e38 <HAL_TIM_IC_Start_IT+0xa0>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d104      	bne.n	8003e30 <HAL_TIM_IC_Start_IT+0x98>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e003      	b.n	8003e38 <HAL_TIM_IC_Start_IT+0xa0>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e3a:	7bbb      	ldrb	r3, [r7, #14]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d102      	bne.n	8003e46 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e40:	7b7b      	ldrb	r3, [r7, #13]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d001      	beq.n	8003e4a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0dd      	b.n	8004006 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_IC_Start_IT+0xc2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e58:	e023      	b.n	8003ea2 <HAL_TIM_IC_Start_IT+0x10a>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_IC_Start_IT+0xd2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e68:	e01b      	b.n	8003ea2 <HAL_TIM_IC_Start_IT+0x10a>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_IC_Start_IT+0xe2>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e78:	e013      	b.n	8003ea2 <HAL_TIM_IC_Start_IT+0x10a>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b0c      	cmp	r3, #12
 8003e7e:	d104      	bne.n	8003e8a <HAL_TIM_IC_Start_IT+0xf2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e88:	e00b      	b.n	8003ea2 <HAL_TIM_IC_Start_IT+0x10a>
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d104      	bne.n	8003e9a <HAL_TIM_IC_Start_IT+0x102>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e98:	e003      	b.n	8003ea2 <HAL_TIM_IC_Start_IT+0x10a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_IC_Start_IT+0x11a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eb0:	e013      	b.n	8003eda <HAL_TIM_IC_Start_IT+0x142>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b04      	cmp	r3, #4
 8003eb6:	d104      	bne.n	8003ec2 <HAL_TIM_IC_Start_IT+0x12a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ec0:	e00b      	b.n	8003eda <HAL_TIM_IC_Start_IT+0x142>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_IC_Start_IT+0x13a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ed0:	e003      	b.n	8003eda <HAL_TIM_IC_Start_IT+0x142>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b0c      	cmp	r3, #12
 8003ede:	d841      	bhi.n	8003f64 <HAL_TIM_IC_Start_IT+0x1cc>
 8003ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <HAL_TIM_IC_Start_IT+0x150>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003f1d 	.word	0x08003f1d
 8003eec:	08003f65 	.word	0x08003f65
 8003ef0:	08003f65 	.word	0x08003f65
 8003ef4:	08003f65 	.word	0x08003f65
 8003ef8:	08003f2f 	.word	0x08003f2f
 8003efc:	08003f65 	.word	0x08003f65
 8003f00:	08003f65 	.word	0x08003f65
 8003f04:	08003f65 	.word	0x08003f65
 8003f08:	08003f41 	.word	0x08003f41
 8003f0c:	08003f65 	.word	0x08003f65
 8003f10:	08003f65 	.word	0x08003f65
 8003f14:	08003f65 	.word	0x08003f65
 8003f18:	08003f53 	.word	0x08003f53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0202 	orr.w	r2, r2, #2
 8003f2a:	60da      	str	r2, [r3, #12]
      break;
 8003f2c:	e01d      	b.n	8003f6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68da      	ldr	r2, [r3, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0204 	orr.w	r2, r2, #4
 8003f3c:	60da      	str	r2, [r3, #12]
      break;
 8003f3e:	e014      	b.n	8003f6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0208 	orr.w	r2, r2, #8
 8003f4e:	60da      	str	r2, [r3, #12]
      break;
 8003f50:	e00b      	b.n	8003f6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0210 	orr.w	r2, r2, #16
 8003f60:	60da      	str	r2, [r3, #12]
      break;
 8003f62:	e002      	b.n	8003f6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
      break;
 8003f68:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d149      	bne.n	8004004 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2201      	movs	r2, #1
 8003f76:	6839      	ldr	r1, [r7, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 f97f 	bl	800527c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a23      	ldr	r2, [pc, #140]	@ (8004010 <HAL_TIM_IC_Start_IT+0x278>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d01d      	beq.n	8003fc4 <HAL_TIM_IC_Start_IT+0x22c>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f90:	d018      	beq.n	8003fc4 <HAL_TIM_IC_Start_IT+0x22c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1f      	ldr	r2, [pc, #124]	@ (8004014 <HAL_TIM_IC_Start_IT+0x27c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <HAL_TIM_IC_Start_IT+0x22c>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8004018 <HAL_TIM_IC_Start_IT+0x280>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_TIM_IC_Start_IT+0x22c>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1c      	ldr	r2, [pc, #112]	@ (800401c <HAL_TIM_IC_Start_IT+0x284>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIM_IC_Start_IT+0x22c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8004020 <HAL_TIM_IC_Start_IT+0x288>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIM_IC_Start_IT+0x22c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a19      	ldr	r2, [pc, #100]	@ (8004024 <HAL_TIM_IC_Start_IT+0x28c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d115      	bne.n	8003ff0 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	4b17      	ldr	r3, [pc, #92]	@ (8004028 <HAL_TIM_IC_Start_IT+0x290>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d015      	beq.n	8004002 <HAL_TIM_IC_Start_IT+0x26a>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fdc:	d011      	beq.n	8004002 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0201 	orr.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fee:	e008      	b.n	8004002 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e000      	b.n	8004004 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004002:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40012c00 	.word	0x40012c00
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800
 800401c:	40000c00 	.word	0x40000c00
 8004020:	40013400 	.word	0x40013400
 8004024:	40014000 	.word	0x40014000
 8004028:	00010007 	.word	0x00010007

0800402c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d020      	beq.n	8004090 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01b      	beq.n	8004090 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0202 	mvn.w	r2, #2
 8004060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fc ff2c 	bl	8000ed4 <HAL_TIM_IC_CaptureCallback>
 800407c:	e005      	b.n	800408a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fba4 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fbab 	bl	80047e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d020      	beq.n	80040dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01b      	beq.n	80040dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0204 	mvn.w	r2, #4
 80040ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fc ff06 	bl	8000ed4 <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fb7e 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fb85 	bl	80047e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d020      	beq.n	8004128 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01b      	beq.n	8004128 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0208 	mvn.w	r2, #8
 80040f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2204      	movs	r2, #4
 80040fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fc fee0 	bl	8000ed4 <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fb58 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fb5f 	bl	80047e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	d020      	beq.n	8004174 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01b      	beq.n	8004174 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0210 	mvn.w	r2, #16
 8004144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2208      	movs	r2, #8
 800414a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fc feba 	bl	8000ed4 <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fb32 	bl	80047cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fb39 	bl	80047e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d007      	beq.n	8004198 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f06f 0201 	mvn.w	r2, #1
 8004190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fb10 	bl	80047b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d104      	bne.n	80041ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00c      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80041be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f001 f913 	bl	80053ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00c      	beq.n	80041ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80041e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f001 f90b 	bl	8005400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00c      	beq.n	800420e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 faf3 	bl	80047f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00c      	beq.n	8004232 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d007      	beq.n	8004232 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f06f 0220 	mvn.w	r2, #32
 800422a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f001 f8d3 	bl	80053d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004254:	2302      	movs	r3, #2
 8004256:	e088      	b.n	800436a <HAL_TIM_IC_ConfigChannel+0x130>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11b      	bne.n	800429e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004276:	f000 fe43 	bl	8004f00 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699a      	ldr	r2, [r3, #24]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 020c 	bic.w	r2, r2, #12
 8004288:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6999      	ldr	r1, [r3, #24]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	619a      	str	r2, [r3, #24]
 800429c:	e060      	b.n	8004360 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d11c      	bne.n	80042de <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80042b4:	f000 fec1 	bl	800503a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80042c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6999      	ldr	r1, [r3, #24]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	021a      	lsls	r2, r3, #8
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	619a      	str	r2, [r3, #24]
 80042dc:	e040      	b.n	8004360 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d11b      	bne.n	800431c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80042f4:	f000 ff0e 	bl	8005114 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69da      	ldr	r2, [r3, #28]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 020c 	bic.w	r2, r2, #12
 8004306:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69d9      	ldr	r1, [r3, #28]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	61da      	str	r2, [r3, #28]
 800431a:	e021      	b.n	8004360 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d11c      	bne.n	800435c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004332:	f000 ff2b 	bl	800518c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004344:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69d9      	ldr	r1, [r3, #28]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	021a      	lsls	r2, r3, #8
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	61da      	str	r2, [r3, #28]
 800435a:	e001      	b.n	8004360 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004368:	7dfb      	ldrb	r3, [r7, #23]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800438e:	2302      	movs	r3, #2
 8004390:	e0ff      	b.n	8004592 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b14      	cmp	r3, #20
 800439e:	f200 80f0 	bhi.w	8004582 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80043a2:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043fd 	.word	0x080043fd
 80043ac:	08004583 	.word	0x08004583
 80043b0:	08004583 	.word	0x08004583
 80043b4:	08004583 	.word	0x08004583
 80043b8:	0800443d 	.word	0x0800443d
 80043bc:	08004583 	.word	0x08004583
 80043c0:	08004583 	.word	0x08004583
 80043c4:	08004583 	.word	0x08004583
 80043c8:	0800447f 	.word	0x0800447f
 80043cc:	08004583 	.word	0x08004583
 80043d0:	08004583 	.word	0x08004583
 80043d4:	08004583 	.word	0x08004583
 80043d8:	080044bf 	.word	0x080044bf
 80043dc:	08004583 	.word	0x08004583
 80043e0:	08004583 	.word	0x08004583
 80043e4:	08004583 	.word	0x08004583
 80043e8:	08004501 	.word	0x08004501
 80043ec:	08004583 	.word	0x08004583
 80043f0:	08004583 	.word	0x08004583
 80043f4:	08004583 	.word	0x08004583
 80043f8:	08004541 	.word	0x08004541
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	4618      	mov	r0, r3
 8004404:	f000 faa6 	bl	8004954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699a      	ldr	r2, [r3, #24]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0208 	orr.w	r2, r2, #8
 8004416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0204 	bic.w	r2, r2, #4
 8004426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6999      	ldr	r1, [r3, #24]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	619a      	str	r2, [r3, #24]
      break;
 800443a:	e0a5      	b.n	8004588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68b9      	ldr	r1, [r7, #8]
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fb16 	bl	8004a74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699a      	ldr	r2, [r3, #24]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6999      	ldr	r1, [r3, #24]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	021a      	lsls	r2, r3, #8
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	619a      	str	r2, [r3, #24]
      break;
 800447c:	e084      	b.n	8004588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fb7f 	bl	8004b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0208 	orr.w	r2, r2, #8
 8004498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69da      	ldr	r2, [r3, #28]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0204 	bic.w	r2, r2, #4
 80044a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69d9      	ldr	r1, [r3, #28]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	61da      	str	r2, [r3, #28]
      break;
 80044bc:	e064      	b.n	8004588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fbe7 	bl	8004c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69da      	ldr	r2, [r3, #28]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69d9      	ldr	r1, [r3, #28]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	021a      	lsls	r2, r3, #8
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	61da      	str	r2, [r3, #28]
      break;
 80044fe:	e043      	b.n	8004588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	4618      	mov	r0, r3
 8004508:	f000 fc30 	bl	8004d6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0208 	orr.w	r2, r2, #8
 800451a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0204 	bic.w	r2, r2, #4
 800452a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800453e:	e023      	b.n	8004588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fc74 	bl	8004e34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800455a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800456a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	021a      	lsls	r2, r3, #8
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004580:	e002      	b.n	8004588 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]
      break;
 8004586:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004590:	7dfb      	ldrb	r3, [r7, #23]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop

0800459c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_TIM_ConfigClockSource+0x1c>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e0b6      	b.n	8004726 <HAL_TIM_ConfigClockSource+0x18a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f4:	d03e      	beq.n	8004674 <HAL_TIM_ConfigClockSource+0xd8>
 80045f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045fa:	f200 8087 	bhi.w	800470c <HAL_TIM_ConfigClockSource+0x170>
 80045fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004602:	f000 8086 	beq.w	8004712 <HAL_TIM_ConfigClockSource+0x176>
 8004606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800460a:	d87f      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x170>
 800460c:	2b70      	cmp	r3, #112	@ 0x70
 800460e:	d01a      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0xaa>
 8004610:	2b70      	cmp	r3, #112	@ 0x70
 8004612:	d87b      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x170>
 8004614:	2b60      	cmp	r3, #96	@ 0x60
 8004616:	d050      	beq.n	80046ba <HAL_TIM_ConfigClockSource+0x11e>
 8004618:	2b60      	cmp	r3, #96	@ 0x60
 800461a:	d877      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x170>
 800461c:	2b50      	cmp	r3, #80	@ 0x50
 800461e:	d03c      	beq.n	800469a <HAL_TIM_ConfigClockSource+0xfe>
 8004620:	2b50      	cmp	r3, #80	@ 0x50
 8004622:	d873      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x170>
 8004624:	2b40      	cmp	r3, #64	@ 0x40
 8004626:	d058      	beq.n	80046da <HAL_TIM_ConfigClockSource+0x13e>
 8004628:	2b40      	cmp	r3, #64	@ 0x40
 800462a:	d86f      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x170>
 800462c:	2b30      	cmp	r3, #48	@ 0x30
 800462e:	d064      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x15e>
 8004630:	2b30      	cmp	r3, #48	@ 0x30
 8004632:	d86b      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x170>
 8004634:	2b20      	cmp	r3, #32
 8004636:	d060      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x15e>
 8004638:	2b20      	cmp	r3, #32
 800463a:	d867      	bhi.n	800470c <HAL_TIM_ConfigClockSource+0x170>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05c      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x15e>
 8004640:	2b10      	cmp	r3, #16
 8004642:	d05a      	beq.n	80046fa <HAL_TIM_ConfigClockSource+0x15e>
 8004644:	e062      	b.n	800470c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004656:	f000 fdf1 	bl	800523c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004668:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	609a      	str	r2, [r3, #8]
      break;
 8004672:	e04f      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004684:	f000 fdda 	bl	800523c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004696:	609a      	str	r2, [r3, #8]
      break;
 8004698:	e03c      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a6:	461a      	mov	r2, r3
 80046a8:	f000 fc98 	bl	8004fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2150      	movs	r1, #80	@ 0x50
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fda7 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 80046b8:	e02c      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046c6:	461a      	mov	r2, r3
 80046c8:	f000 fcf4 	bl	80050b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2160      	movs	r1, #96	@ 0x60
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fd97 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 80046d8:	e01c      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e6:	461a      	mov	r2, r3
 80046e8:	f000 fc78 	bl	8004fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2140      	movs	r1, #64	@ 0x40
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fd87 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 80046f8:	e00c      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4619      	mov	r1, r3
 8004704:	4610      	mov	r0, r2
 8004706:	f000 fd7e 	bl	8005206 <TIM_ITRx_SetConfig>
      break;
 800470a:	e003      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      break;
 8004710:	e000      	b.n	8004714 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004724:	7bfb      	ldrb	r3, [r7, #15]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b0c      	cmp	r3, #12
 8004742:	d831      	bhi.n	80047a8 <HAL_TIM_ReadCapturedValue+0x78>
 8004744:	a201      	add	r2, pc, #4	@ (adr r2, 800474c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474a:	bf00      	nop
 800474c:	08004781 	.word	0x08004781
 8004750:	080047a9 	.word	0x080047a9
 8004754:	080047a9 	.word	0x080047a9
 8004758:	080047a9 	.word	0x080047a9
 800475c:	0800478b 	.word	0x0800478b
 8004760:	080047a9 	.word	0x080047a9
 8004764:	080047a9 	.word	0x080047a9
 8004768:	080047a9 	.word	0x080047a9
 800476c:	08004795 	.word	0x08004795
 8004770:	080047a9 	.word	0x080047a9
 8004774:	080047a9 	.word	0x080047a9
 8004778:	080047a9 	.word	0x080047a9
 800477c:	0800479f 	.word	0x0800479f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004786:	60fb      	str	r3, [r7, #12]

      break;
 8004788:	e00f      	b.n	80047aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004790:	60fb      	str	r3, [r7, #12]

      break;
 8004792:	e00a      	b.n	80047aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479a:	60fb      	str	r3, [r7, #12]

      break;
 800479c:	e005      	b.n	80047aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a4:	60fb      	str	r3, [r7, #12]

      break;
 80047a6:	e000      	b.n	80047aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80047a8:	bf00      	nop
  }

  return tmpreg;
 80047aa:	68fb      	ldr	r3, [r7, #12]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a46      	ldr	r2, [pc, #280]	@ (8004934 <TIM_Base_SetConfig+0x12c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d013      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004826:	d00f      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a43      	ldr	r2, [pc, #268]	@ (8004938 <TIM_Base_SetConfig+0x130>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00b      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a42      	ldr	r2, [pc, #264]	@ (800493c <TIM_Base_SetConfig+0x134>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a41      	ldr	r2, [pc, #260]	@ (8004940 <TIM_Base_SetConfig+0x138>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a40      	ldr	r2, [pc, #256]	@ (8004944 <TIM_Base_SetConfig+0x13c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d108      	bne.n	800485a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a35      	ldr	r2, [pc, #212]	@ (8004934 <TIM_Base_SetConfig+0x12c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01f      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004868:	d01b      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a32      	ldr	r2, [pc, #200]	@ (8004938 <TIM_Base_SetConfig+0x130>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d017      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a31      	ldr	r2, [pc, #196]	@ (800493c <TIM_Base_SetConfig+0x134>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a30      	ldr	r2, [pc, #192]	@ (8004940 <TIM_Base_SetConfig+0x138>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00f      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a2f      	ldr	r2, [pc, #188]	@ (8004944 <TIM_Base_SetConfig+0x13c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00b      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2e      	ldr	r2, [pc, #184]	@ (8004948 <TIM_Base_SetConfig+0x140>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2d      	ldr	r2, [pc, #180]	@ (800494c <TIM_Base_SetConfig+0x144>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d003      	beq.n	80048a2 <TIM_Base_SetConfig+0x9a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2c      	ldr	r2, [pc, #176]	@ (8004950 <TIM_Base_SetConfig+0x148>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d108      	bne.n	80048b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a16      	ldr	r2, [pc, #88]	@ (8004934 <TIM_Base_SetConfig+0x12c>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00f      	beq.n	8004900 <TIM_Base_SetConfig+0xf8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a18      	ldr	r2, [pc, #96]	@ (8004944 <TIM_Base_SetConfig+0x13c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00b      	beq.n	8004900 <TIM_Base_SetConfig+0xf8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a17      	ldr	r2, [pc, #92]	@ (8004948 <TIM_Base_SetConfig+0x140>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d007      	beq.n	8004900 <TIM_Base_SetConfig+0xf8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a16      	ldr	r2, [pc, #88]	@ (800494c <TIM_Base_SetConfig+0x144>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d003      	beq.n	8004900 <TIM_Base_SetConfig+0xf8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a15      	ldr	r2, [pc, #84]	@ (8004950 <TIM_Base_SetConfig+0x148>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d103      	bne.n	8004908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b01      	cmp	r3, #1
 8004918:	d105      	bne.n	8004926 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f023 0201 	bic.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	611a      	str	r2, [r3, #16]
  }
}
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40012c00 	.word	0x40012c00
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40000c00 	.word	0x40000c00
 8004944:	40013400 	.word	0x40013400
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800

08004954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f023 0201 	bic.w	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f023 0302 	bic.w	r3, r3, #2
 80049a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004a60 <TIM_OC1_SetConfig+0x10c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00f      	beq.n	80049d4 <TIM_OC1_SetConfig+0x80>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004a64 <TIM_OC1_SetConfig+0x110>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00b      	beq.n	80049d4 <TIM_OC1_SetConfig+0x80>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a2a      	ldr	r2, [pc, #168]	@ (8004a68 <TIM_OC1_SetConfig+0x114>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d007      	beq.n	80049d4 <TIM_OC1_SetConfig+0x80>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a29      	ldr	r2, [pc, #164]	@ (8004a6c <TIM_OC1_SetConfig+0x118>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d003      	beq.n	80049d4 <TIM_OC1_SetConfig+0x80>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a28      	ldr	r2, [pc, #160]	@ (8004a70 <TIM_OC1_SetConfig+0x11c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d10c      	bne.n	80049ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f023 0308 	bic.w	r3, r3, #8
 80049da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f023 0304 	bic.w	r3, r3, #4
 80049ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a60 <TIM_OC1_SetConfig+0x10c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00f      	beq.n	8004a16 <TIM_OC1_SetConfig+0xc2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004a64 <TIM_OC1_SetConfig+0x110>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00b      	beq.n	8004a16 <TIM_OC1_SetConfig+0xc2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a19      	ldr	r2, [pc, #100]	@ (8004a68 <TIM_OC1_SetConfig+0x114>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d007      	beq.n	8004a16 <TIM_OC1_SetConfig+0xc2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a18      	ldr	r2, [pc, #96]	@ (8004a6c <TIM_OC1_SetConfig+0x118>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d003      	beq.n	8004a16 <TIM_OC1_SetConfig+0xc2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a17      	ldr	r2, [pc, #92]	@ (8004a70 <TIM_OC1_SetConfig+0x11c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d111      	bne.n	8004a3a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	621a      	str	r2, [r3, #32]
}
 8004a54:	bf00      	nop
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40013400 	.word	0x40013400
 8004a68:	40014000 	.word	0x40014000
 8004a6c:	40014400 	.word	0x40014400
 8004a70:	40014800 	.word	0x40014800

08004a74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f023 0210 	bic.w	r2, r3, #16
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 0320 	bic.w	r3, r3, #32
 8004ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a28      	ldr	r2, [pc, #160]	@ (8004b74 <TIM_OC2_SetConfig+0x100>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_OC2_SetConfig+0x6c>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a27      	ldr	r2, [pc, #156]	@ (8004b78 <TIM_OC2_SetConfig+0x104>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10d      	bne.n	8004afc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004afa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a1d      	ldr	r2, [pc, #116]	@ (8004b74 <TIM_OC2_SetConfig+0x100>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d00f      	beq.n	8004b24 <TIM_OC2_SetConfig+0xb0>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a1c      	ldr	r2, [pc, #112]	@ (8004b78 <TIM_OC2_SetConfig+0x104>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00b      	beq.n	8004b24 <TIM_OC2_SetConfig+0xb0>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b7c <TIM_OC2_SetConfig+0x108>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d007      	beq.n	8004b24 <TIM_OC2_SetConfig+0xb0>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a1a      	ldr	r2, [pc, #104]	@ (8004b80 <TIM_OC2_SetConfig+0x10c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_OC2_SetConfig+0xb0>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a19      	ldr	r2, [pc, #100]	@ (8004b84 <TIM_OC2_SetConfig+0x110>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d113      	bne.n	8004b4c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40012c00 	.word	0x40012c00
 8004b78:	40013400 	.word	0x40013400
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40014400 	.word	0x40014400
 8004b84:	40014800 	.word	0x40014800

08004b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0303 	bic.w	r3, r3, #3
 8004bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a27      	ldr	r2, [pc, #156]	@ (8004c84 <TIM_OC3_SetConfig+0xfc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_OC3_SetConfig+0x6a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a26      	ldr	r2, [pc, #152]	@ (8004c88 <TIM_OC3_SetConfig+0x100>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d10d      	bne.n	8004c0e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	021b      	lsls	r3, r3, #8
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a1c      	ldr	r2, [pc, #112]	@ (8004c84 <TIM_OC3_SetConfig+0xfc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00f      	beq.n	8004c36 <TIM_OC3_SetConfig+0xae>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a1b      	ldr	r2, [pc, #108]	@ (8004c88 <TIM_OC3_SetConfig+0x100>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00b      	beq.n	8004c36 <TIM_OC3_SetConfig+0xae>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1a      	ldr	r2, [pc, #104]	@ (8004c8c <TIM_OC3_SetConfig+0x104>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d007      	beq.n	8004c36 <TIM_OC3_SetConfig+0xae>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a19      	ldr	r2, [pc, #100]	@ (8004c90 <TIM_OC3_SetConfig+0x108>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d003      	beq.n	8004c36 <TIM_OC3_SetConfig+0xae>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a18      	ldr	r2, [pc, #96]	@ (8004c94 <TIM_OC3_SetConfig+0x10c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d113      	bne.n	8004c5e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	621a      	str	r2, [r3, #32]
}
 8004c78:	bf00      	nop
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	40013400 	.word	0x40013400
 8004c8c:	40014000 	.word	0x40014000
 8004c90:	40014400 	.word	0x40014400
 8004c94:	40014800 	.word	0x40014800

08004c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	031b      	lsls	r3, r3, #12
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a18      	ldr	r2, [pc, #96]	@ (8004d58 <TIM_OC4_SetConfig+0xc0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00f      	beq.n	8004d1c <TIM_OC4_SetConfig+0x84>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a17      	ldr	r2, [pc, #92]	@ (8004d5c <TIM_OC4_SetConfig+0xc4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <TIM_OC4_SetConfig+0x84>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a16      	ldr	r2, [pc, #88]	@ (8004d60 <TIM_OC4_SetConfig+0xc8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d007      	beq.n	8004d1c <TIM_OC4_SetConfig+0x84>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a15      	ldr	r2, [pc, #84]	@ (8004d64 <TIM_OC4_SetConfig+0xcc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_OC4_SetConfig+0x84>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a14      	ldr	r2, [pc, #80]	@ (8004d68 <TIM_OC4_SetConfig+0xd0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d109      	bne.n	8004d30 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	019b      	lsls	r3, r3, #6
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	621a      	str	r2, [r3, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40013400 	.word	0x40013400
 8004d60:	40014000 	.word	0x40014000
 8004d64:	40014400 	.word	0x40014400
 8004d68:	40014800 	.word	0x40014800

08004d6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004db0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	041b      	lsls	r3, r3, #16
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a17      	ldr	r2, [pc, #92]	@ (8004e20 <TIM_OC5_SetConfig+0xb4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00f      	beq.n	8004de6 <TIM_OC5_SetConfig+0x7a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a16      	ldr	r2, [pc, #88]	@ (8004e24 <TIM_OC5_SetConfig+0xb8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00b      	beq.n	8004de6 <TIM_OC5_SetConfig+0x7a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a15      	ldr	r2, [pc, #84]	@ (8004e28 <TIM_OC5_SetConfig+0xbc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d007      	beq.n	8004de6 <TIM_OC5_SetConfig+0x7a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a14      	ldr	r2, [pc, #80]	@ (8004e2c <TIM_OC5_SetConfig+0xc0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d003      	beq.n	8004de6 <TIM_OC5_SetConfig+0x7a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a13      	ldr	r2, [pc, #76]	@ (8004e30 <TIM_OC5_SetConfig+0xc4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d109      	bne.n	8004dfa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	621a      	str	r2, [r3, #32]
}
 8004e14:	bf00      	nop
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40013400 	.word	0x40013400
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800

08004e34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	051b      	lsls	r3, r3, #20
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a18      	ldr	r2, [pc, #96]	@ (8004eec <TIM_OC6_SetConfig+0xb8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00f      	beq.n	8004eb0 <TIM_OC6_SetConfig+0x7c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a17      	ldr	r2, [pc, #92]	@ (8004ef0 <TIM_OC6_SetConfig+0xbc>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00b      	beq.n	8004eb0 <TIM_OC6_SetConfig+0x7c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a16      	ldr	r2, [pc, #88]	@ (8004ef4 <TIM_OC6_SetConfig+0xc0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <TIM_OC6_SetConfig+0x7c>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a15      	ldr	r2, [pc, #84]	@ (8004ef8 <TIM_OC6_SetConfig+0xc4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_OC6_SetConfig+0x7c>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a14      	ldr	r2, [pc, #80]	@ (8004efc <TIM_OC6_SetConfig+0xc8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d109      	bne.n	8004ec4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	029b      	lsls	r3, r3, #10
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	621a      	str	r2, [r3, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	40013400 	.word	0x40013400
 8004ef4:	40014000 	.word	0x40014000
 8004ef8:	40014400 	.word	0x40014400
 8004efc:	40014800 	.word	0x40014800

08004f00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f023 0201 	bic.w	r2, r3, #1
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a26      	ldr	r2, [pc, #152]	@ (8004fc4 <TIM_TI1_SetConfig+0xc4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d017      	beq.n	8004f5e <TIM_TI1_SetConfig+0x5e>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f34:	d013      	beq.n	8004f5e <TIM_TI1_SetConfig+0x5e>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a23      	ldr	r2, [pc, #140]	@ (8004fc8 <TIM_TI1_SetConfig+0xc8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00f      	beq.n	8004f5e <TIM_TI1_SetConfig+0x5e>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4a22      	ldr	r2, [pc, #136]	@ (8004fcc <TIM_TI1_SetConfig+0xcc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00b      	beq.n	8004f5e <TIM_TI1_SetConfig+0x5e>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4a21      	ldr	r2, [pc, #132]	@ (8004fd0 <TIM_TI1_SetConfig+0xd0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d007      	beq.n	8004f5e <TIM_TI1_SetConfig+0x5e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a20      	ldr	r2, [pc, #128]	@ (8004fd4 <TIM_TI1_SetConfig+0xd4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d003      	beq.n	8004f5e <TIM_TI1_SetConfig+0x5e>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd8 <TIM_TI1_SetConfig+0xd8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d101      	bne.n	8004f62 <TIM_TI1_SetConfig+0x62>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <TIM_TI1_SetConfig+0x64>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f023 0303 	bic.w	r3, r3, #3
 8004f6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	e003      	b.n	8004f82 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f023 030a 	bic.w	r3, r3, #10
 8004f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f003 030a 	and.w	r3, r3, #10
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40012c00 	.word	0x40012c00
 8004fc8:	40000400 	.word	0x40000400
 8004fcc:	40000800 	.word	0x40000800
 8004fd0:	40000c00 	.word	0x40000c00
 8004fd4:	40013400 	.word	0x40013400
 8004fd8:	40014000 	.word	0x40014000

08004fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f023 030a 	bic.w	r3, r3, #10
 8005018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800503a:	b480      	push	{r7}
 800503c:	b087      	sub	sp, #28
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	f023 0210 	bic.w	r2, r3, #16
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	031b      	lsls	r3, r3, #12
 800507e:	b29b      	uxth	r3, r3
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800508c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	621a      	str	r2, [r3, #32]
}
 80050a8:	bf00      	nop
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f023 0210 	bic.w	r2, r3, #16
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	031b      	lsls	r3, r3, #12
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	621a      	str	r2, [r3, #32]
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
 8005120:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f023 0303 	bic.w	r3, r3, #3
 8005140:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005150:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	b2db      	uxtb	r3, r3
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005164:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	621a      	str	r2, [r3, #32]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051ca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	031b      	lsls	r3, r3, #12
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80051de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	031b      	lsls	r3, r3, #12
 80051e4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	621a      	str	r2, [r3, #32]
}
 80051fa:	bf00      	nop
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005206:	b480      	push	{r7}
 8005208:	b085      	sub	sp, #20
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	f043 0307 	orr.w	r3, r3, #7
 8005228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	609a      	str	r2, [r3, #8]
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	021a      	lsls	r2, r3, #8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	431a      	orrs	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4313      	orrs	r3, r2
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	609a      	str	r2, [r3, #8]
}
 8005270:	bf00      	nop
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	2201      	movs	r2, #1
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1a      	ldr	r2, [r3, #32]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	43db      	mvns	r3, r3
 800529e:	401a      	ands	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	fa01 f303 	lsl.w	r3, r1, r3
 80052b4:	431a      	orrs	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
	...

080052c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052dc:	2302      	movs	r3, #2
 80052de:	e068      	b.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2e      	ldr	r2, [pc, #184]	@ (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d004      	beq.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a2d      	ldr	r2, [pc, #180]	@ (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d108      	bne.n	8005326 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800531a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800532c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a1e      	ldr	r2, [pc, #120]	@ (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d01d      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005352:	d018      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1b      	ldr	r2, [pc, #108]	@ (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1a      	ldr	r2, [pc, #104]	@ (80053cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00e      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a18      	ldr	r2, [pc, #96]	@ (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a13      	ldr	r2, [pc, #76]	@ (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a14      	ldr	r2, [pc, #80]	@ (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d10c      	bne.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800538c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	4313      	orrs	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40013400 	.word	0x40013400
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40000c00 	.word	0x40000c00
 80053d4:	40014000 	.word	0x40014000

080053d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e040      	b.n	80054a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fc fa0a 	bl	8001850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2224      	movs	r2, #36	@ 0x24
 8005440:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0201 	bic.w	r2, r2, #1
 8005450:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fb6a 	bl	8005b34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f8af 	bl	80055c4 <UART_SetConfig>
 8005466:	4603      	mov	r3, r0
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e01b      	b.n	80054a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800547e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800548e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fbe9 	bl	8005c78 <UART_CheckIdleState>
 80054a6:	4603      	mov	r3, r0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	@ 0x28
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d177      	bne.n	80055b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_UART_Transmit+0x24>
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e070      	b.n	80055ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2221      	movs	r2, #33	@ 0x21
 80054e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054e6:	f7fc fbb3 	bl	8001c50 <HAL_GetTick>
 80054ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	88fa      	ldrh	r2, [r7, #6]
 80054f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005504:	d108      	bne.n	8005518 <HAL_UART_Transmit+0x68>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d104      	bne.n	8005518 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	e003      	b.n	8005520 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005520:	e02f      	b.n	8005582 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2200      	movs	r2, #0
 800552a:	2180      	movs	r1, #128	@ 0x80
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fc4b 	bl	8005dc8 <UART_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e03b      	b.n	80055ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10b      	bne.n	8005560 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	881a      	ldrh	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005554:	b292      	uxth	r2, r2
 8005556:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	3302      	adds	r3, #2
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	e007      	b.n	8005570 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	3301      	adds	r3, #1
 800556e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005588:	b29b      	uxth	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1c9      	bne.n	8005522 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2200      	movs	r2, #0
 8005596:	2140      	movs	r1, #64	@ 0x40
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fc15 	bl	8005dc8 <UART_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d004      	beq.n	80055ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e005      	b.n	80055ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	e000      	b.n	80055ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80055b8:	2302      	movs	r3, #2
  }
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3720      	adds	r7, #32
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c8:	b08a      	sub	sp, #40	@ 0x28
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	431a      	orrs	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4ba4      	ldr	r3, [pc, #656]	@ (8005884 <UART_SetConfig+0x2c0>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055fc:	430b      	orrs	r3, r1
 80055fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a99      	ldr	r2, [pc, #612]	@ (8005888 <UART_SetConfig+0x2c4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800562c:	4313      	orrs	r3, r2
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005640:	430a      	orrs	r2, r1
 8005642:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a90      	ldr	r2, [pc, #576]	@ (800588c <UART_SetConfig+0x2c8>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d126      	bne.n	800569c <UART_SetConfig+0xd8>
 800564e:	4b90      	ldr	r3, [pc, #576]	@ (8005890 <UART_SetConfig+0x2cc>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	2b03      	cmp	r3, #3
 800565a:	d81b      	bhi.n	8005694 <UART_SetConfig+0xd0>
 800565c:	a201      	add	r2, pc, #4	@ (adr r2, 8005664 <UART_SetConfig+0xa0>)
 800565e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005662:	bf00      	nop
 8005664:	08005675 	.word	0x08005675
 8005668:	08005685 	.word	0x08005685
 800566c:	0800567d 	.word	0x0800567d
 8005670:	0800568d 	.word	0x0800568d
 8005674:	2301      	movs	r3, #1
 8005676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800567a:	e116      	b.n	80058aa <UART_SetConfig+0x2e6>
 800567c:	2302      	movs	r3, #2
 800567e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005682:	e112      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005684:	2304      	movs	r3, #4
 8005686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800568a:	e10e      	b.n	80058aa <UART_SetConfig+0x2e6>
 800568c:	2308      	movs	r3, #8
 800568e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005692:	e10a      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005694:	2310      	movs	r3, #16
 8005696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800569a:	e106      	b.n	80058aa <UART_SetConfig+0x2e6>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a7c      	ldr	r2, [pc, #496]	@ (8005894 <UART_SetConfig+0x2d0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d138      	bne.n	8005718 <UART_SetConfig+0x154>
 80056a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005890 <UART_SetConfig+0x2cc>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ac:	f003 030c 	and.w	r3, r3, #12
 80056b0:	2b0c      	cmp	r3, #12
 80056b2:	d82d      	bhi.n	8005710 <UART_SetConfig+0x14c>
 80056b4:	a201      	add	r2, pc, #4	@ (adr r2, 80056bc <UART_SetConfig+0xf8>)
 80056b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ba:	bf00      	nop
 80056bc:	080056f1 	.word	0x080056f1
 80056c0:	08005711 	.word	0x08005711
 80056c4:	08005711 	.word	0x08005711
 80056c8:	08005711 	.word	0x08005711
 80056cc:	08005701 	.word	0x08005701
 80056d0:	08005711 	.word	0x08005711
 80056d4:	08005711 	.word	0x08005711
 80056d8:	08005711 	.word	0x08005711
 80056dc:	080056f9 	.word	0x080056f9
 80056e0:	08005711 	.word	0x08005711
 80056e4:	08005711 	.word	0x08005711
 80056e8:	08005711 	.word	0x08005711
 80056ec:	08005709 	.word	0x08005709
 80056f0:	2300      	movs	r3, #0
 80056f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056f6:	e0d8      	b.n	80058aa <UART_SetConfig+0x2e6>
 80056f8:	2302      	movs	r3, #2
 80056fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056fe:	e0d4      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005700:	2304      	movs	r3, #4
 8005702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005706:	e0d0      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005708:	2308      	movs	r3, #8
 800570a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800570e:	e0cc      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005710:	2310      	movs	r3, #16
 8005712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005716:	e0c8      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a5e      	ldr	r2, [pc, #376]	@ (8005898 <UART_SetConfig+0x2d4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d125      	bne.n	800576e <UART_SetConfig+0x1aa>
 8005722:	4b5b      	ldr	r3, [pc, #364]	@ (8005890 <UART_SetConfig+0x2cc>)
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005728:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800572c:	2b30      	cmp	r3, #48	@ 0x30
 800572e:	d016      	beq.n	800575e <UART_SetConfig+0x19a>
 8005730:	2b30      	cmp	r3, #48	@ 0x30
 8005732:	d818      	bhi.n	8005766 <UART_SetConfig+0x1a2>
 8005734:	2b20      	cmp	r3, #32
 8005736:	d00a      	beq.n	800574e <UART_SetConfig+0x18a>
 8005738:	2b20      	cmp	r3, #32
 800573a:	d814      	bhi.n	8005766 <UART_SetConfig+0x1a2>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <UART_SetConfig+0x182>
 8005740:	2b10      	cmp	r3, #16
 8005742:	d008      	beq.n	8005756 <UART_SetConfig+0x192>
 8005744:	e00f      	b.n	8005766 <UART_SetConfig+0x1a2>
 8005746:	2300      	movs	r3, #0
 8005748:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800574c:	e0ad      	b.n	80058aa <UART_SetConfig+0x2e6>
 800574e:	2302      	movs	r3, #2
 8005750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005754:	e0a9      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005756:	2304      	movs	r3, #4
 8005758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575c:	e0a5      	b.n	80058aa <UART_SetConfig+0x2e6>
 800575e:	2308      	movs	r3, #8
 8005760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005764:	e0a1      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005766:	2310      	movs	r3, #16
 8005768:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800576c:	e09d      	b.n	80058aa <UART_SetConfig+0x2e6>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a4a      	ldr	r2, [pc, #296]	@ (800589c <UART_SetConfig+0x2d8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d125      	bne.n	80057c4 <UART_SetConfig+0x200>
 8005778:	4b45      	ldr	r3, [pc, #276]	@ (8005890 <UART_SetConfig+0x2cc>)
 800577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800577e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005782:	2bc0      	cmp	r3, #192	@ 0xc0
 8005784:	d016      	beq.n	80057b4 <UART_SetConfig+0x1f0>
 8005786:	2bc0      	cmp	r3, #192	@ 0xc0
 8005788:	d818      	bhi.n	80057bc <UART_SetConfig+0x1f8>
 800578a:	2b80      	cmp	r3, #128	@ 0x80
 800578c:	d00a      	beq.n	80057a4 <UART_SetConfig+0x1e0>
 800578e:	2b80      	cmp	r3, #128	@ 0x80
 8005790:	d814      	bhi.n	80057bc <UART_SetConfig+0x1f8>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d002      	beq.n	800579c <UART_SetConfig+0x1d8>
 8005796:	2b40      	cmp	r3, #64	@ 0x40
 8005798:	d008      	beq.n	80057ac <UART_SetConfig+0x1e8>
 800579a:	e00f      	b.n	80057bc <UART_SetConfig+0x1f8>
 800579c:	2300      	movs	r3, #0
 800579e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057a2:	e082      	b.n	80058aa <UART_SetConfig+0x2e6>
 80057a4:	2302      	movs	r3, #2
 80057a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057aa:	e07e      	b.n	80058aa <UART_SetConfig+0x2e6>
 80057ac:	2304      	movs	r3, #4
 80057ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b2:	e07a      	b.n	80058aa <UART_SetConfig+0x2e6>
 80057b4:	2308      	movs	r3, #8
 80057b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ba:	e076      	b.n	80058aa <UART_SetConfig+0x2e6>
 80057bc:	2310      	movs	r3, #16
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c2:	e072      	b.n	80058aa <UART_SetConfig+0x2e6>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a35      	ldr	r2, [pc, #212]	@ (80058a0 <UART_SetConfig+0x2dc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d12a      	bne.n	8005824 <UART_SetConfig+0x260>
 80057ce:	4b30      	ldr	r3, [pc, #192]	@ (8005890 <UART_SetConfig+0x2cc>)
 80057d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057dc:	d01a      	beq.n	8005814 <UART_SetConfig+0x250>
 80057de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057e2:	d81b      	bhi.n	800581c <UART_SetConfig+0x258>
 80057e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057e8:	d00c      	beq.n	8005804 <UART_SetConfig+0x240>
 80057ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ee:	d815      	bhi.n	800581c <UART_SetConfig+0x258>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <UART_SetConfig+0x238>
 80057f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057f8:	d008      	beq.n	800580c <UART_SetConfig+0x248>
 80057fa:	e00f      	b.n	800581c <UART_SetConfig+0x258>
 80057fc:	2300      	movs	r3, #0
 80057fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005802:	e052      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005804:	2302      	movs	r3, #2
 8005806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800580a:	e04e      	b.n	80058aa <UART_SetConfig+0x2e6>
 800580c:	2304      	movs	r3, #4
 800580e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005812:	e04a      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005814:	2308      	movs	r3, #8
 8005816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800581a:	e046      	b.n	80058aa <UART_SetConfig+0x2e6>
 800581c:	2310      	movs	r3, #16
 800581e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005822:	e042      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a17      	ldr	r2, [pc, #92]	@ (8005888 <UART_SetConfig+0x2c4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d13a      	bne.n	80058a4 <UART_SetConfig+0x2e0>
 800582e:	4b18      	ldr	r3, [pc, #96]	@ (8005890 <UART_SetConfig+0x2cc>)
 8005830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005834:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005838:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800583c:	d01a      	beq.n	8005874 <UART_SetConfig+0x2b0>
 800583e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005842:	d81b      	bhi.n	800587c <UART_SetConfig+0x2b8>
 8005844:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005848:	d00c      	beq.n	8005864 <UART_SetConfig+0x2a0>
 800584a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800584e:	d815      	bhi.n	800587c <UART_SetConfig+0x2b8>
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <UART_SetConfig+0x298>
 8005854:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005858:	d008      	beq.n	800586c <UART_SetConfig+0x2a8>
 800585a:	e00f      	b.n	800587c <UART_SetConfig+0x2b8>
 800585c:	2300      	movs	r3, #0
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005862:	e022      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005864:	2302      	movs	r3, #2
 8005866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800586a:	e01e      	b.n	80058aa <UART_SetConfig+0x2e6>
 800586c:	2304      	movs	r3, #4
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005872:	e01a      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005874:	2308      	movs	r3, #8
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587a:	e016      	b.n	80058aa <UART_SetConfig+0x2e6>
 800587c:	2310      	movs	r3, #16
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005882:	e012      	b.n	80058aa <UART_SetConfig+0x2e6>
 8005884:	efff69f3 	.word	0xefff69f3
 8005888:	40008000 	.word	0x40008000
 800588c:	40013800 	.word	0x40013800
 8005890:	40021000 	.word	0x40021000
 8005894:	40004400 	.word	0x40004400
 8005898:	40004800 	.word	0x40004800
 800589c:	40004c00 	.word	0x40004c00
 80058a0:	40005000 	.word	0x40005000
 80058a4:	2310      	movs	r3, #16
 80058a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a9f      	ldr	r2, [pc, #636]	@ (8005b2c <UART_SetConfig+0x568>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d17a      	bne.n	80059aa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d824      	bhi.n	8005906 <UART_SetConfig+0x342>
 80058bc:	a201      	add	r2, pc, #4	@ (adr r2, 80058c4 <UART_SetConfig+0x300>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058e9 	.word	0x080058e9
 80058c8:	08005907 	.word	0x08005907
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	08005907 	.word	0x08005907
 80058d4:	080058f7 	.word	0x080058f7
 80058d8:	08005907 	.word	0x08005907
 80058dc:	08005907 	.word	0x08005907
 80058e0:	08005907 	.word	0x08005907
 80058e4:	080058ff 	.word	0x080058ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e8:	f7fd fa84 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 80058ec:	61f8      	str	r0, [r7, #28]
        break;
 80058ee:	e010      	b.n	8005912 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f0:	4b8f      	ldr	r3, [pc, #572]	@ (8005b30 <UART_SetConfig+0x56c>)
 80058f2:	61fb      	str	r3, [r7, #28]
        break;
 80058f4:	e00d      	b.n	8005912 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f6:	f7fd f9e5 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 80058fa:	61f8      	str	r0, [r7, #28]
        break;
 80058fc:	e009      	b.n	8005912 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005902:	61fb      	str	r3, [r7, #28]
        break;
 8005904:	e005      	b.n	8005912 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005910:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80fb 	beq.w	8005b10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	4413      	add	r3, r2
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	429a      	cmp	r2, r3
 8005928:	d305      	bcc.n	8005936 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005930:	69fa      	ldr	r2, [r7, #28]
 8005932:	429a      	cmp	r2, r3
 8005934:	d903      	bls.n	800593e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800593c:	e0e8      	b.n	8005b10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	2200      	movs	r2, #0
 8005942:	461c      	mov	r4, r3
 8005944:	4615      	mov	r5, r2
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	022b      	lsls	r3, r5, #8
 8005950:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005954:	0222      	lsls	r2, r4, #8
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	6849      	ldr	r1, [r1, #4]
 800595a:	0849      	lsrs	r1, r1, #1
 800595c:	2000      	movs	r0, #0
 800595e:	4688      	mov	r8, r1
 8005960:	4681      	mov	r9, r0
 8005962:	eb12 0a08 	adds.w	sl, r2, r8
 8005966:	eb43 0b09 	adc.w	fp, r3, r9
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	603b      	str	r3, [r7, #0]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005978:	4650      	mov	r0, sl
 800597a:	4659      	mov	r1, fp
 800597c:	f7fb f914 	bl	8000ba8 <__aeabi_uldivmod>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4613      	mov	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800598e:	d308      	bcc.n	80059a2 <UART_SetConfig+0x3de>
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005996:	d204      	bcs.n	80059a2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	60da      	str	r2, [r3, #12]
 80059a0:	e0b6      	b.n	8005b10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059a8:	e0b2      	b.n	8005b10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059b2:	d15e      	bne.n	8005a72 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80059b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d828      	bhi.n	8005a0e <UART_SetConfig+0x44a>
 80059bc:	a201      	add	r2, pc, #4	@ (adr r2, 80059c4 <UART_SetConfig+0x400>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	080059f1 	.word	0x080059f1
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	08005a0f 	.word	0x08005a0f
 80059d4:	080059ff 	.word	0x080059ff
 80059d8:	08005a0f 	.word	0x08005a0f
 80059dc:	08005a0f 	.word	0x08005a0f
 80059e0:	08005a0f 	.word	0x08005a0f
 80059e4:	08005a07 	.word	0x08005a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7fd fa04 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 80059ec:	61f8      	str	r0, [r7, #28]
        break;
 80059ee:	e014      	b.n	8005a1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f0:	f7fd fa16 	bl	8002e20 <HAL_RCC_GetPCLK2Freq>
 80059f4:	61f8      	str	r0, [r7, #28]
        break;
 80059f6:	e010      	b.n	8005a1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005b30 <UART_SetConfig+0x56c>)
 80059fa:	61fb      	str	r3, [r7, #28]
        break;
 80059fc:	e00d      	b.n	8005a1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fe:	f7fd f961 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8005a02:	61f8      	str	r0, [r7, #28]
        break;
 8005a04:	e009      	b.n	8005a1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a0a:	61fb      	str	r3, [r7, #28]
        break;
 8005a0c:	e005      	b.n	8005a1a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d077      	beq.n	8005b10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	005a      	lsls	r2, r3, #1
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	085b      	lsrs	r3, r3, #1
 8005a2a:	441a      	add	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	2b0f      	cmp	r3, #15
 8005a3a:	d916      	bls.n	8005a6a <UART_SetConfig+0x4a6>
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a42:	d212      	bcs.n	8005a6a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f023 030f 	bic.w	r3, r3, #15
 8005a4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	8afb      	ldrh	r3, [r7, #22]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	8afa      	ldrh	r2, [r7, #22]
 8005a66:	60da      	str	r2, [r3, #12]
 8005a68:	e052      	b.n	8005b10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a70:	e04e      	b.n	8005b10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d827      	bhi.n	8005aca <UART_SetConfig+0x506>
 8005a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a80 <UART_SetConfig+0x4bc>)
 8005a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a80:	08005aa5 	.word	0x08005aa5
 8005a84:	08005aad 	.word	0x08005aad
 8005a88:	08005ab5 	.word	0x08005ab5
 8005a8c:	08005acb 	.word	0x08005acb
 8005a90:	08005abb 	.word	0x08005abb
 8005a94:	08005acb 	.word	0x08005acb
 8005a98:	08005acb 	.word	0x08005acb
 8005a9c:	08005acb 	.word	0x08005acb
 8005aa0:	08005ac3 	.word	0x08005ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa4:	f7fd f9a6 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 8005aa8:	61f8      	str	r0, [r7, #28]
        break;
 8005aaa:	e014      	b.n	8005ad6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aac:	f7fd f9b8 	bl	8002e20 <HAL_RCC_GetPCLK2Freq>
 8005ab0:	61f8      	str	r0, [r7, #28]
        break;
 8005ab2:	e010      	b.n	8005ad6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8005b30 <UART_SetConfig+0x56c>)
 8005ab6:	61fb      	str	r3, [r7, #28]
        break;
 8005ab8:	e00d      	b.n	8005ad6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aba:	f7fd f903 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8005abe:	61f8      	str	r0, [r7, #28]
        break;
 8005ac0:	e009      	b.n	8005ad6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ac6:	61fb      	str	r3, [r7, #28]
        break;
 8005ac8:	e005      	b.n	8005ad6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ad4:	bf00      	nop
    }

    if (pclk != 0U)
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d019      	beq.n	8005b10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	085a      	lsrs	r2, r3, #1
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	441a      	add	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b0f      	cmp	r3, #15
 8005af4:	d909      	bls.n	8005b0a <UART_SetConfig+0x546>
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005afc:	d205      	bcs.n	8005b0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60da      	str	r2, [r3, #12]
 8005b08:	e002      	b.n	8005b10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005b1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3728      	adds	r7, #40	@ 0x28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40008000 	.word	0x40008000
 8005b30:	00f42400 	.word	0x00f42400

08005b34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d01a      	beq.n	8005c4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c32:	d10a      	bne.n	8005c4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	605a      	str	r2, [r3, #4]
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b098      	sub	sp, #96	@ 0x60
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c88:	f7fb ffe2 	bl	8001c50 <HAL_GetTick>
 8005c8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d12e      	bne.n	8005cfa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f88c 	bl	8005dc8 <UART_WaitOnFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d021      	beq.n	8005cfa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cca:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e6      	bne.n	8005cb6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e062      	b.n	8005dc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d149      	bne.n	8005d9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d10:	2200      	movs	r2, #0
 8005d12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f856 	bl	8005dc8 <UART_WaitOnFlagUntilTimeout>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d03c      	beq.n	8005d9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2a:	e853 3f00 	ldrex	r3, [r3]
 8005d2e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d48:	e841 2300 	strex	r3, r2, [r1]
 8005d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1e6      	bne.n	8005d22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	3308      	adds	r3, #8
 8005d5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	e853 3f00 	ldrex	r3, [r3]
 8005d62:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3308      	adds	r3, #8
 8005d72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d74:	61fa      	str	r2, [r7, #28]
 8005d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	69b9      	ldr	r1, [r7, #24]
 8005d7a:	69fa      	ldr	r2, [r7, #28]
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	617b      	str	r3, [r7, #20]
   return(result);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e5      	bne.n	8005d54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e011      	b.n	8005dc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3758      	adds	r7, #88	@ 0x58
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	603b      	str	r3, [r7, #0]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd8:	e04f      	b.n	8005e7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005de0:	d04b      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de2:	f7fb ff35 	bl	8001c50 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d302      	bcc.n	8005df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e04e      	b.n	8005e9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d037      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b80      	cmp	r3, #128	@ 0x80
 8005e0e:	d034      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b40      	cmp	r3, #64	@ 0x40
 8005e14:	d031      	beq.n	8005e7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d110      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2208      	movs	r2, #8
 8005e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f838 	bl	8005ea2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2208      	movs	r2, #8
 8005e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e029      	b.n	8005e9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e54:	d111      	bne.n	8005e7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f81e 	bl	8005ea2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e00f      	b.n	8005e9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4013      	ands	r3, r2
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	bf0c      	ite	eq
 8005e8a:	2301      	moveq	r3, #1
 8005e8c:	2300      	movne	r3, #0
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	79fb      	ldrb	r3, [r7, #7]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d0a0      	beq.n	8005dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b095      	sub	sp, #84	@ 0x54
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb2:	e853 3f00 	ldrex	r3, [r3]
 8005eb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005eca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ece:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e6      	bne.n	8005eaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3308      	adds	r3, #8
 8005ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f023 0301 	bic.w	r3, r3, #1
 8005ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3308      	adds	r3, #8
 8005efa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005efc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e5      	bne.n	8005edc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d118      	bne.n	8005f4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	e853 3f00 	ldrex	r3, [r3]
 8005f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f023 0310 	bic.w	r3, r3, #16
 8005f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	6979      	ldr	r1, [r7, #20]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	613b      	str	r3, [r7, #16]
   return(result);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e6      	bne.n	8005f18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f5e:	bf00      	nop
 8005f60:	3754      	adds	r7, #84	@ 0x54
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <__cvt>:
 8005f6a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f6e:	ec57 6b10 	vmov	r6, r7, d0
 8005f72:	2f00      	cmp	r7, #0
 8005f74:	460c      	mov	r4, r1
 8005f76:	4619      	mov	r1, r3
 8005f78:	463b      	mov	r3, r7
 8005f7a:	bfbb      	ittet	lt
 8005f7c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f80:	461f      	movlt	r7, r3
 8005f82:	2300      	movge	r3, #0
 8005f84:	232d      	movlt	r3, #45	@ 0x2d
 8005f86:	700b      	strb	r3, [r1, #0]
 8005f88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f8a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f8e:	4691      	mov	r9, r2
 8005f90:	f023 0820 	bic.w	r8, r3, #32
 8005f94:	bfbc      	itt	lt
 8005f96:	4632      	movlt	r2, r6
 8005f98:	4616      	movlt	r6, r2
 8005f9a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f9e:	d005      	beq.n	8005fac <__cvt+0x42>
 8005fa0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fa4:	d100      	bne.n	8005fa8 <__cvt+0x3e>
 8005fa6:	3401      	adds	r4, #1
 8005fa8:	2102      	movs	r1, #2
 8005faa:	e000      	b.n	8005fae <__cvt+0x44>
 8005fac:	2103      	movs	r1, #3
 8005fae:	ab03      	add	r3, sp, #12
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	ab02      	add	r3, sp, #8
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	ec47 6b10 	vmov	d0, r6, r7
 8005fba:	4653      	mov	r3, sl
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	f000 fe07 	bl	8006bd0 <_dtoa_r>
 8005fc2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	d119      	bne.n	8005ffe <__cvt+0x94>
 8005fca:	f019 0f01 	tst.w	r9, #1
 8005fce:	d00e      	beq.n	8005fee <__cvt+0x84>
 8005fd0:	eb00 0904 	add.w	r9, r0, r4
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	4630      	mov	r0, r6
 8005fda:	4639      	mov	r1, r7
 8005fdc:	f7fa fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fe0:	b108      	cbz	r0, 8005fe6 <__cvt+0x7c>
 8005fe2:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fe6:	2230      	movs	r2, #48	@ 0x30
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	454b      	cmp	r3, r9
 8005fec:	d31e      	bcc.n	800602c <__cvt+0xc2>
 8005fee:	9b03      	ldr	r3, [sp, #12]
 8005ff0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ff2:	1b5b      	subs	r3, r3, r5
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	b004      	add	sp, #16
 8005ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006002:	eb00 0904 	add.w	r9, r0, r4
 8006006:	d1e5      	bne.n	8005fd4 <__cvt+0x6a>
 8006008:	7803      	ldrb	r3, [r0, #0]
 800600a:	2b30      	cmp	r3, #48	@ 0x30
 800600c:	d10a      	bne.n	8006024 <__cvt+0xba>
 800600e:	2200      	movs	r2, #0
 8006010:	2300      	movs	r3, #0
 8006012:	4630      	mov	r0, r6
 8006014:	4639      	mov	r1, r7
 8006016:	f7fa fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 800601a:	b918      	cbnz	r0, 8006024 <__cvt+0xba>
 800601c:	f1c4 0401 	rsb	r4, r4, #1
 8006020:	f8ca 4000 	str.w	r4, [sl]
 8006024:	f8da 3000 	ldr.w	r3, [sl]
 8006028:	4499      	add	r9, r3
 800602a:	e7d3      	b.n	8005fd4 <__cvt+0x6a>
 800602c:	1c59      	adds	r1, r3, #1
 800602e:	9103      	str	r1, [sp, #12]
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e7d9      	b.n	8005fe8 <__cvt+0x7e>

08006034 <__exponent>:
 8006034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006036:	2900      	cmp	r1, #0
 8006038:	bfba      	itte	lt
 800603a:	4249      	neglt	r1, r1
 800603c:	232d      	movlt	r3, #45	@ 0x2d
 800603e:	232b      	movge	r3, #43	@ 0x2b
 8006040:	2909      	cmp	r1, #9
 8006042:	7002      	strb	r2, [r0, #0]
 8006044:	7043      	strb	r3, [r0, #1]
 8006046:	dd29      	ble.n	800609c <__exponent+0x68>
 8006048:	f10d 0307 	add.w	r3, sp, #7
 800604c:	461d      	mov	r5, r3
 800604e:	270a      	movs	r7, #10
 8006050:	461a      	mov	r2, r3
 8006052:	fbb1 f6f7 	udiv	r6, r1, r7
 8006056:	fb07 1416 	mls	r4, r7, r6, r1
 800605a:	3430      	adds	r4, #48	@ 0x30
 800605c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006060:	460c      	mov	r4, r1
 8006062:	2c63      	cmp	r4, #99	@ 0x63
 8006064:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006068:	4631      	mov	r1, r6
 800606a:	dcf1      	bgt.n	8006050 <__exponent+0x1c>
 800606c:	3130      	adds	r1, #48	@ 0x30
 800606e:	1e94      	subs	r4, r2, #2
 8006070:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006074:	1c41      	adds	r1, r0, #1
 8006076:	4623      	mov	r3, r4
 8006078:	42ab      	cmp	r3, r5
 800607a:	d30a      	bcc.n	8006092 <__exponent+0x5e>
 800607c:	f10d 0309 	add.w	r3, sp, #9
 8006080:	1a9b      	subs	r3, r3, r2
 8006082:	42ac      	cmp	r4, r5
 8006084:	bf88      	it	hi
 8006086:	2300      	movhi	r3, #0
 8006088:	3302      	adds	r3, #2
 800608a:	4403      	add	r3, r0
 800608c:	1a18      	subs	r0, r3, r0
 800608e:	b003      	add	sp, #12
 8006090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006092:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006096:	f801 6f01 	strb.w	r6, [r1, #1]!
 800609a:	e7ed      	b.n	8006078 <__exponent+0x44>
 800609c:	2330      	movs	r3, #48	@ 0x30
 800609e:	3130      	adds	r1, #48	@ 0x30
 80060a0:	7083      	strb	r3, [r0, #2]
 80060a2:	70c1      	strb	r1, [r0, #3]
 80060a4:	1d03      	adds	r3, r0, #4
 80060a6:	e7f1      	b.n	800608c <__exponent+0x58>

080060a8 <_printf_float>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	b08d      	sub	sp, #52	@ 0x34
 80060ae:	460c      	mov	r4, r1
 80060b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80060b4:	4616      	mov	r6, r2
 80060b6:	461f      	mov	r7, r3
 80060b8:	4605      	mov	r5, r0
 80060ba:	f000 fcfb 	bl	8006ab4 <_localeconv_r>
 80060be:	6803      	ldr	r3, [r0, #0]
 80060c0:	9304      	str	r3, [sp, #16]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fa f8d4 	bl	8000270 <strlen>
 80060c8:	2300      	movs	r3, #0
 80060ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80060cc:	f8d8 3000 	ldr.w	r3, [r8]
 80060d0:	9005      	str	r0, [sp, #20]
 80060d2:	3307      	adds	r3, #7
 80060d4:	f023 0307 	bic.w	r3, r3, #7
 80060d8:	f103 0208 	add.w	r2, r3, #8
 80060dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80060e0:	f8d4 b000 	ldr.w	fp, [r4]
 80060e4:	f8c8 2000 	str.w	r2, [r8]
 80060e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80060f0:	9307      	str	r3, [sp, #28]
 80060f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80060f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80060fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060fe:	4b9c      	ldr	r3, [pc, #624]	@ (8006370 <_printf_float+0x2c8>)
 8006100:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006104:	f7fa fd12 	bl	8000b2c <__aeabi_dcmpun>
 8006108:	bb70      	cbnz	r0, 8006168 <_printf_float+0xc0>
 800610a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800610e:	4b98      	ldr	r3, [pc, #608]	@ (8006370 <_printf_float+0x2c8>)
 8006110:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006114:	f7fa fcec 	bl	8000af0 <__aeabi_dcmple>
 8006118:	bb30      	cbnz	r0, 8006168 <_printf_float+0xc0>
 800611a:	2200      	movs	r2, #0
 800611c:	2300      	movs	r3, #0
 800611e:	4640      	mov	r0, r8
 8006120:	4649      	mov	r1, r9
 8006122:	f7fa fcdb 	bl	8000adc <__aeabi_dcmplt>
 8006126:	b110      	cbz	r0, 800612e <_printf_float+0x86>
 8006128:	232d      	movs	r3, #45	@ 0x2d
 800612a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800612e:	4a91      	ldr	r2, [pc, #580]	@ (8006374 <_printf_float+0x2cc>)
 8006130:	4b91      	ldr	r3, [pc, #580]	@ (8006378 <_printf_float+0x2d0>)
 8006132:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006136:	bf8c      	ite	hi
 8006138:	4690      	movhi	r8, r2
 800613a:	4698      	movls	r8, r3
 800613c:	2303      	movs	r3, #3
 800613e:	6123      	str	r3, [r4, #16]
 8006140:	f02b 0304 	bic.w	r3, fp, #4
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	f04f 0900 	mov.w	r9, #0
 800614a:	9700      	str	r7, [sp, #0]
 800614c:	4633      	mov	r3, r6
 800614e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006150:	4621      	mov	r1, r4
 8006152:	4628      	mov	r0, r5
 8006154:	f000 f9d2 	bl	80064fc <_printf_common>
 8006158:	3001      	adds	r0, #1
 800615a:	f040 808d 	bne.w	8006278 <_printf_float+0x1d0>
 800615e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006162:	b00d      	add	sp, #52	@ 0x34
 8006164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006168:	4642      	mov	r2, r8
 800616a:	464b      	mov	r3, r9
 800616c:	4640      	mov	r0, r8
 800616e:	4649      	mov	r1, r9
 8006170:	f7fa fcdc 	bl	8000b2c <__aeabi_dcmpun>
 8006174:	b140      	cbz	r0, 8006188 <_printf_float+0xe0>
 8006176:	464b      	mov	r3, r9
 8006178:	2b00      	cmp	r3, #0
 800617a:	bfbc      	itt	lt
 800617c:	232d      	movlt	r3, #45	@ 0x2d
 800617e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006182:	4a7e      	ldr	r2, [pc, #504]	@ (800637c <_printf_float+0x2d4>)
 8006184:	4b7e      	ldr	r3, [pc, #504]	@ (8006380 <_printf_float+0x2d8>)
 8006186:	e7d4      	b.n	8006132 <_printf_float+0x8a>
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800618e:	9206      	str	r2, [sp, #24]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	d13b      	bne.n	800620c <_printf_float+0x164>
 8006194:	2306      	movs	r3, #6
 8006196:	6063      	str	r3, [r4, #4]
 8006198:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800619c:	2300      	movs	r3, #0
 800619e:	6022      	str	r2, [r4, #0]
 80061a0:	9303      	str	r3, [sp, #12]
 80061a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80061a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061a8:	ab09      	add	r3, sp, #36	@ 0x24
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	6861      	ldr	r1, [r4, #4]
 80061ae:	ec49 8b10 	vmov	d0, r8, r9
 80061b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80061b6:	4628      	mov	r0, r5
 80061b8:	f7ff fed7 	bl	8005f6a <__cvt>
 80061bc:	9b06      	ldr	r3, [sp, #24]
 80061be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061c0:	2b47      	cmp	r3, #71	@ 0x47
 80061c2:	4680      	mov	r8, r0
 80061c4:	d129      	bne.n	800621a <_printf_float+0x172>
 80061c6:	1cc8      	adds	r0, r1, #3
 80061c8:	db02      	blt.n	80061d0 <_printf_float+0x128>
 80061ca:	6863      	ldr	r3, [r4, #4]
 80061cc:	4299      	cmp	r1, r3
 80061ce:	dd41      	ble.n	8006254 <_printf_float+0x1ac>
 80061d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80061d4:	fa5f fa8a 	uxtb.w	sl, sl
 80061d8:	3901      	subs	r1, #1
 80061da:	4652      	mov	r2, sl
 80061dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80061e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80061e2:	f7ff ff27 	bl	8006034 <__exponent>
 80061e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061e8:	1813      	adds	r3, r2, r0
 80061ea:	2a01      	cmp	r2, #1
 80061ec:	4681      	mov	r9, r0
 80061ee:	6123      	str	r3, [r4, #16]
 80061f0:	dc02      	bgt.n	80061f8 <_printf_float+0x150>
 80061f2:	6822      	ldr	r2, [r4, #0]
 80061f4:	07d2      	lsls	r2, r2, #31
 80061f6:	d501      	bpl.n	80061fc <_printf_float+0x154>
 80061f8:	3301      	adds	r3, #1
 80061fa:	6123      	str	r3, [r4, #16]
 80061fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0a2      	beq.n	800614a <_printf_float+0xa2>
 8006204:	232d      	movs	r3, #45	@ 0x2d
 8006206:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800620a:	e79e      	b.n	800614a <_printf_float+0xa2>
 800620c:	9a06      	ldr	r2, [sp, #24]
 800620e:	2a47      	cmp	r2, #71	@ 0x47
 8006210:	d1c2      	bne.n	8006198 <_printf_float+0xf0>
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1c0      	bne.n	8006198 <_printf_float+0xf0>
 8006216:	2301      	movs	r3, #1
 8006218:	e7bd      	b.n	8006196 <_printf_float+0xee>
 800621a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800621e:	d9db      	bls.n	80061d8 <_printf_float+0x130>
 8006220:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006224:	d118      	bne.n	8006258 <_printf_float+0x1b0>
 8006226:	2900      	cmp	r1, #0
 8006228:	6863      	ldr	r3, [r4, #4]
 800622a:	dd0b      	ble.n	8006244 <_printf_float+0x19c>
 800622c:	6121      	str	r1, [r4, #16]
 800622e:	b913      	cbnz	r3, 8006236 <_printf_float+0x18e>
 8006230:	6822      	ldr	r2, [r4, #0]
 8006232:	07d0      	lsls	r0, r2, #31
 8006234:	d502      	bpl.n	800623c <_printf_float+0x194>
 8006236:	3301      	adds	r3, #1
 8006238:	440b      	add	r3, r1
 800623a:	6123      	str	r3, [r4, #16]
 800623c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800623e:	f04f 0900 	mov.w	r9, #0
 8006242:	e7db      	b.n	80061fc <_printf_float+0x154>
 8006244:	b913      	cbnz	r3, 800624c <_printf_float+0x1a4>
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	07d2      	lsls	r2, r2, #31
 800624a:	d501      	bpl.n	8006250 <_printf_float+0x1a8>
 800624c:	3302      	adds	r3, #2
 800624e:	e7f4      	b.n	800623a <_printf_float+0x192>
 8006250:	2301      	movs	r3, #1
 8006252:	e7f2      	b.n	800623a <_printf_float+0x192>
 8006254:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800625a:	4299      	cmp	r1, r3
 800625c:	db05      	blt.n	800626a <_printf_float+0x1c2>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	6121      	str	r1, [r4, #16]
 8006262:	07d8      	lsls	r0, r3, #31
 8006264:	d5ea      	bpl.n	800623c <_printf_float+0x194>
 8006266:	1c4b      	adds	r3, r1, #1
 8006268:	e7e7      	b.n	800623a <_printf_float+0x192>
 800626a:	2900      	cmp	r1, #0
 800626c:	bfd4      	ite	le
 800626e:	f1c1 0202 	rsble	r2, r1, #2
 8006272:	2201      	movgt	r2, #1
 8006274:	4413      	add	r3, r2
 8006276:	e7e0      	b.n	800623a <_printf_float+0x192>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	055a      	lsls	r2, r3, #21
 800627c:	d407      	bmi.n	800628e <_printf_float+0x1e6>
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	4642      	mov	r2, r8
 8006282:	4631      	mov	r1, r6
 8006284:	4628      	mov	r0, r5
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	d12b      	bne.n	80062e4 <_printf_float+0x23c>
 800628c:	e767      	b.n	800615e <_printf_float+0xb6>
 800628e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006292:	f240 80dd 	bls.w	8006450 <_printf_float+0x3a8>
 8006296:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800629a:	2200      	movs	r2, #0
 800629c:	2300      	movs	r3, #0
 800629e:	f7fa fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d033      	beq.n	800630e <_printf_float+0x266>
 80062a6:	4a37      	ldr	r2, [pc, #220]	@ (8006384 <_printf_float+0x2dc>)
 80062a8:	2301      	movs	r3, #1
 80062aa:	4631      	mov	r1, r6
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b8      	blx	r7
 80062b0:	3001      	adds	r0, #1
 80062b2:	f43f af54 	beq.w	800615e <_printf_float+0xb6>
 80062b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80062ba:	4543      	cmp	r3, r8
 80062bc:	db02      	blt.n	80062c4 <_printf_float+0x21c>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	07d8      	lsls	r0, r3, #31
 80062c2:	d50f      	bpl.n	80062e4 <_printf_float+0x23c>
 80062c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c8:	4631      	mov	r1, r6
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	f43f af45 	beq.w	800615e <_printf_float+0xb6>
 80062d4:	f04f 0900 	mov.w	r9, #0
 80062d8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80062dc:	f104 0a1a 	add.w	sl, r4, #26
 80062e0:	45c8      	cmp	r8, r9
 80062e2:	dc09      	bgt.n	80062f8 <_printf_float+0x250>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	079b      	lsls	r3, r3, #30
 80062e8:	f100 8103 	bmi.w	80064f2 <_printf_float+0x44a>
 80062ec:	68e0      	ldr	r0, [r4, #12]
 80062ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062f0:	4298      	cmp	r0, r3
 80062f2:	bfb8      	it	lt
 80062f4:	4618      	movlt	r0, r3
 80062f6:	e734      	b.n	8006162 <_printf_float+0xba>
 80062f8:	2301      	movs	r3, #1
 80062fa:	4652      	mov	r2, sl
 80062fc:	4631      	mov	r1, r6
 80062fe:	4628      	mov	r0, r5
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	f43f af2b 	beq.w	800615e <_printf_float+0xb6>
 8006308:	f109 0901 	add.w	r9, r9, #1
 800630c:	e7e8      	b.n	80062e0 <_printf_float+0x238>
 800630e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006310:	2b00      	cmp	r3, #0
 8006312:	dc39      	bgt.n	8006388 <_printf_float+0x2e0>
 8006314:	4a1b      	ldr	r2, [pc, #108]	@ (8006384 <_printf_float+0x2dc>)
 8006316:	2301      	movs	r3, #1
 8006318:	4631      	mov	r1, r6
 800631a:	4628      	mov	r0, r5
 800631c:	47b8      	blx	r7
 800631e:	3001      	adds	r0, #1
 8006320:	f43f af1d 	beq.w	800615e <_printf_float+0xb6>
 8006324:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006328:	ea59 0303 	orrs.w	r3, r9, r3
 800632c:	d102      	bne.n	8006334 <_printf_float+0x28c>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	07d9      	lsls	r1, r3, #31
 8006332:	d5d7      	bpl.n	80062e4 <_printf_float+0x23c>
 8006334:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006338:	4631      	mov	r1, r6
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	f43f af0d 	beq.w	800615e <_printf_float+0xb6>
 8006344:	f04f 0a00 	mov.w	sl, #0
 8006348:	f104 0b1a 	add.w	fp, r4, #26
 800634c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800634e:	425b      	negs	r3, r3
 8006350:	4553      	cmp	r3, sl
 8006352:	dc01      	bgt.n	8006358 <_printf_float+0x2b0>
 8006354:	464b      	mov	r3, r9
 8006356:	e793      	b.n	8006280 <_printf_float+0x1d8>
 8006358:	2301      	movs	r3, #1
 800635a:	465a      	mov	r2, fp
 800635c:	4631      	mov	r1, r6
 800635e:	4628      	mov	r0, r5
 8006360:	47b8      	blx	r7
 8006362:	3001      	adds	r0, #1
 8006364:	f43f aefb 	beq.w	800615e <_printf_float+0xb6>
 8006368:	f10a 0a01 	add.w	sl, sl, #1
 800636c:	e7ee      	b.n	800634c <_printf_float+0x2a4>
 800636e:	bf00      	nop
 8006370:	7fefffff 	.word	0x7fefffff
 8006374:	08008d24 	.word	0x08008d24
 8006378:	08008d20 	.word	0x08008d20
 800637c:	08008d2c 	.word	0x08008d2c
 8006380:	08008d28 	.word	0x08008d28
 8006384:	08008d30 	.word	0x08008d30
 8006388:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800638a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800638e:	4553      	cmp	r3, sl
 8006390:	bfa8      	it	ge
 8006392:	4653      	movge	r3, sl
 8006394:	2b00      	cmp	r3, #0
 8006396:	4699      	mov	r9, r3
 8006398:	dc36      	bgt.n	8006408 <_printf_float+0x360>
 800639a:	f04f 0b00 	mov.w	fp, #0
 800639e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063a2:	f104 021a 	add.w	r2, r4, #26
 80063a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063a8:	9306      	str	r3, [sp, #24]
 80063aa:	eba3 0309 	sub.w	r3, r3, r9
 80063ae:	455b      	cmp	r3, fp
 80063b0:	dc31      	bgt.n	8006416 <_printf_float+0x36e>
 80063b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b4:	459a      	cmp	sl, r3
 80063b6:	dc3a      	bgt.n	800642e <_printf_float+0x386>
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	07da      	lsls	r2, r3, #31
 80063bc:	d437      	bmi.n	800642e <_printf_float+0x386>
 80063be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c0:	ebaa 0903 	sub.w	r9, sl, r3
 80063c4:	9b06      	ldr	r3, [sp, #24]
 80063c6:	ebaa 0303 	sub.w	r3, sl, r3
 80063ca:	4599      	cmp	r9, r3
 80063cc:	bfa8      	it	ge
 80063ce:	4699      	movge	r9, r3
 80063d0:	f1b9 0f00 	cmp.w	r9, #0
 80063d4:	dc33      	bgt.n	800643e <_printf_float+0x396>
 80063d6:	f04f 0800 	mov.w	r8, #0
 80063da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063de:	f104 0b1a 	add.w	fp, r4, #26
 80063e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063e4:	ebaa 0303 	sub.w	r3, sl, r3
 80063e8:	eba3 0309 	sub.w	r3, r3, r9
 80063ec:	4543      	cmp	r3, r8
 80063ee:	f77f af79 	ble.w	80062e4 <_printf_float+0x23c>
 80063f2:	2301      	movs	r3, #1
 80063f4:	465a      	mov	r2, fp
 80063f6:	4631      	mov	r1, r6
 80063f8:	4628      	mov	r0, r5
 80063fa:	47b8      	blx	r7
 80063fc:	3001      	adds	r0, #1
 80063fe:	f43f aeae 	beq.w	800615e <_printf_float+0xb6>
 8006402:	f108 0801 	add.w	r8, r8, #1
 8006406:	e7ec      	b.n	80063e2 <_printf_float+0x33a>
 8006408:	4642      	mov	r2, r8
 800640a:	4631      	mov	r1, r6
 800640c:	4628      	mov	r0, r5
 800640e:	47b8      	blx	r7
 8006410:	3001      	adds	r0, #1
 8006412:	d1c2      	bne.n	800639a <_printf_float+0x2f2>
 8006414:	e6a3      	b.n	800615e <_printf_float+0xb6>
 8006416:	2301      	movs	r3, #1
 8006418:	4631      	mov	r1, r6
 800641a:	4628      	mov	r0, r5
 800641c:	9206      	str	r2, [sp, #24]
 800641e:	47b8      	blx	r7
 8006420:	3001      	adds	r0, #1
 8006422:	f43f ae9c 	beq.w	800615e <_printf_float+0xb6>
 8006426:	9a06      	ldr	r2, [sp, #24]
 8006428:	f10b 0b01 	add.w	fp, fp, #1
 800642c:	e7bb      	b.n	80063a6 <_printf_float+0x2fe>
 800642e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006432:	4631      	mov	r1, r6
 8006434:	4628      	mov	r0, r5
 8006436:	47b8      	blx	r7
 8006438:	3001      	adds	r0, #1
 800643a:	d1c0      	bne.n	80063be <_printf_float+0x316>
 800643c:	e68f      	b.n	800615e <_printf_float+0xb6>
 800643e:	9a06      	ldr	r2, [sp, #24]
 8006440:	464b      	mov	r3, r9
 8006442:	4442      	add	r2, r8
 8006444:	4631      	mov	r1, r6
 8006446:	4628      	mov	r0, r5
 8006448:	47b8      	blx	r7
 800644a:	3001      	adds	r0, #1
 800644c:	d1c3      	bne.n	80063d6 <_printf_float+0x32e>
 800644e:	e686      	b.n	800615e <_printf_float+0xb6>
 8006450:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006454:	f1ba 0f01 	cmp.w	sl, #1
 8006458:	dc01      	bgt.n	800645e <_printf_float+0x3b6>
 800645a:	07db      	lsls	r3, r3, #31
 800645c:	d536      	bpl.n	80064cc <_printf_float+0x424>
 800645e:	2301      	movs	r3, #1
 8006460:	4642      	mov	r2, r8
 8006462:	4631      	mov	r1, r6
 8006464:	4628      	mov	r0, r5
 8006466:	47b8      	blx	r7
 8006468:	3001      	adds	r0, #1
 800646a:	f43f ae78 	beq.w	800615e <_printf_float+0xb6>
 800646e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006472:	4631      	mov	r1, r6
 8006474:	4628      	mov	r0, r5
 8006476:	47b8      	blx	r7
 8006478:	3001      	adds	r0, #1
 800647a:	f43f ae70 	beq.w	800615e <_printf_float+0xb6>
 800647e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006482:	2200      	movs	r2, #0
 8006484:	2300      	movs	r3, #0
 8006486:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800648a:	f7fa fb1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800648e:	b9c0      	cbnz	r0, 80064c2 <_printf_float+0x41a>
 8006490:	4653      	mov	r3, sl
 8006492:	f108 0201 	add.w	r2, r8, #1
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	d10c      	bne.n	80064ba <_printf_float+0x412>
 80064a0:	e65d      	b.n	800615e <_printf_float+0xb6>
 80064a2:	2301      	movs	r3, #1
 80064a4:	465a      	mov	r2, fp
 80064a6:	4631      	mov	r1, r6
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	f43f ae56 	beq.w	800615e <_printf_float+0xb6>
 80064b2:	f108 0801 	add.w	r8, r8, #1
 80064b6:	45d0      	cmp	r8, sl
 80064b8:	dbf3      	blt.n	80064a2 <_printf_float+0x3fa>
 80064ba:	464b      	mov	r3, r9
 80064bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064c0:	e6df      	b.n	8006282 <_printf_float+0x1da>
 80064c2:	f04f 0800 	mov.w	r8, #0
 80064c6:	f104 0b1a 	add.w	fp, r4, #26
 80064ca:	e7f4      	b.n	80064b6 <_printf_float+0x40e>
 80064cc:	2301      	movs	r3, #1
 80064ce:	4642      	mov	r2, r8
 80064d0:	e7e1      	b.n	8006496 <_printf_float+0x3ee>
 80064d2:	2301      	movs	r3, #1
 80064d4:	464a      	mov	r2, r9
 80064d6:	4631      	mov	r1, r6
 80064d8:	4628      	mov	r0, r5
 80064da:	47b8      	blx	r7
 80064dc:	3001      	adds	r0, #1
 80064de:	f43f ae3e 	beq.w	800615e <_printf_float+0xb6>
 80064e2:	f108 0801 	add.w	r8, r8, #1
 80064e6:	68e3      	ldr	r3, [r4, #12]
 80064e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064ea:	1a5b      	subs	r3, r3, r1
 80064ec:	4543      	cmp	r3, r8
 80064ee:	dcf0      	bgt.n	80064d2 <_printf_float+0x42a>
 80064f0:	e6fc      	b.n	80062ec <_printf_float+0x244>
 80064f2:	f04f 0800 	mov.w	r8, #0
 80064f6:	f104 0919 	add.w	r9, r4, #25
 80064fa:	e7f4      	b.n	80064e6 <_printf_float+0x43e>

080064fc <_printf_common>:
 80064fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006500:	4616      	mov	r6, r2
 8006502:	4698      	mov	r8, r3
 8006504:	688a      	ldr	r2, [r1, #8]
 8006506:	690b      	ldr	r3, [r1, #16]
 8006508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800650c:	4293      	cmp	r3, r2
 800650e:	bfb8      	it	lt
 8006510:	4613      	movlt	r3, r2
 8006512:	6033      	str	r3, [r6, #0]
 8006514:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006518:	4607      	mov	r7, r0
 800651a:	460c      	mov	r4, r1
 800651c:	b10a      	cbz	r2, 8006522 <_printf_common+0x26>
 800651e:	3301      	adds	r3, #1
 8006520:	6033      	str	r3, [r6, #0]
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	0699      	lsls	r1, r3, #26
 8006526:	bf42      	ittt	mi
 8006528:	6833      	ldrmi	r3, [r6, #0]
 800652a:	3302      	addmi	r3, #2
 800652c:	6033      	strmi	r3, [r6, #0]
 800652e:	6825      	ldr	r5, [r4, #0]
 8006530:	f015 0506 	ands.w	r5, r5, #6
 8006534:	d106      	bne.n	8006544 <_printf_common+0x48>
 8006536:	f104 0a19 	add.w	sl, r4, #25
 800653a:	68e3      	ldr	r3, [r4, #12]
 800653c:	6832      	ldr	r2, [r6, #0]
 800653e:	1a9b      	subs	r3, r3, r2
 8006540:	42ab      	cmp	r3, r5
 8006542:	dc26      	bgt.n	8006592 <_printf_common+0x96>
 8006544:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006548:	6822      	ldr	r2, [r4, #0]
 800654a:	3b00      	subs	r3, #0
 800654c:	bf18      	it	ne
 800654e:	2301      	movne	r3, #1
 8006550:	0692      	lsls	r2, r2, #26
 8006552:	d42b      	bmi.n	80065ac <_printf_common+0xb0>
 8006554:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006558:	4641      	mov	r1, r8
 800655a:	4638      	mov	r0, r7
 800655c:	47c8      	blx	r9
 800655e:	3001      	adds	r0, #1
 8006560:	d01e      	beq.n	80065a0 <_printf_common+0xa4>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	6922      	ldr	r2, [r4, #16]
 8006566:	f003 0306 	and.w	r3, r3, #6
 800656a:	2b04      	cmp	r3, #4
 800656c:	bf02      	ittt	eq
 800656e:	68e5      	ldreq	r5, [r4, #12]
 8006570:	6833      	ldreq	r3, [r6, #0]
 8006572:	1aed      	subeq	r5, r5, r3
 8006574:	68a3      	ldr	r3, [r4, #8]
 8006576:	bf0c      	ite	eq
 8006578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800657c:	2500      	movne	r5, #0
 800657e:	4293      	cmp	r3, r2
 8006580:	bfc4      	itt	gt
 8006582:	1a9b      	subgt	r3, r3, r2
 8006584:	18ed      	addgt	r5, r5, r3
 8006586:	2600      	movs	r6, #0
 8006588:	341a      	adds	r4, #26
 800658a:	42b5      	cmp	r5, r6
 800658c:	d11a      	bne.n	80065c4 <_printf_common+0xc8>
 800658e:	2000      	movs	r0, #0
 8006590:	e008      	b.n	80065a4 <_printf_common+0xa8>
 8006592:	2301      	movs	r3, #1
 8006594:	4652      	mov	r2, sl
 8006596:	4641      	mov	r1, r8
 8006598:	4638      	mov	r0, r7
 800659a:	47c8      	blx	r9
 800659c:	3001      	adds	r0, #1
 800659e:	d103      	bne.n	80065a8 <_printf_common+0xac>
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a8:	3501      	adds	r5, #1
 80065aa:	e7c6      	b.n	800653a <_printf_common+0x3e>
 80065ac:	18e1      	adds	r1, r4, r3
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	2030      	movs	r0, #48	@ 0x30
 80065b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065b6:	4422      	add	r2, r4
 80065b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065c0:	3302      	adds	r3, #2
 80065c2:	e7c7      	b.n	8006554 <_printf_common+0x58>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4622      	mov	r2, r4
 80065c8:	4641      	mov	r1, r8
 80065ca:	4638      	mov	r0, r7
 80065cc:	47c8      	blx	r9
 80065ce:	3001      	adds	r0, #1
 80065d0:	d0e6      	beq.n	80065a0 <_printf_common+0xa4>
 80065d2:	3601      	adds	r6, #1
 80065d4:	e7d9      	b.n	800658a <_printf_common+0x8e>
	...

080065d8 <_printf_i>:
 80065d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	7e0f      	ldrb	r7, [r1, #24]
 80065de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065e0:	2f78      	cmp	r7, #120	@ 0x78
 80065e2:	4691      	mov	r9, r2
 80065e4:	4680      	mov	r8, r0
 80065e6:	460c      	mov	r4, r1
 80065e8:	469a      	mov	sl, r3
 80065ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065ee:	d807      	bhi.n	8006600 <_printf_i+0x28>
 80065f0:	2f62      	cmp	r7, #98	@ 0x62
 80065f2:	d80a      	bhi.n	800660a <_printf_i+0x32>
 80065f4:	2f00      	cmp	r7, #0
 80065f6:	f000 80d1 	beq.w	800679c <_printf_i+0x1c4>
 80065fa:	2f58      	cmp	r7, #88	@ 0x58
 80065fc:	f000 80b8 	beq.w	8006770 <_printf_i+0x198>
 8006600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006608:	e03a      	b.n	8006680 <_printf_i+0xa8>
 800660a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800660e:	2b15      	cmp	r3, #21
 8006610:	d8f6      	bhi.n	8006600 <_printf_i+0x28>
 8006612:	a101      	add	r1, pc, #4	@ (adr r1, 8006618 <_printf_i+0x40>)
 8006614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006618:	08006671 	.word	0x08006671
 800661c:	08006685 	.word	0x08006685
 8006620:	08006601 	.word	0x08006601
 8006624:	08006601 	.word	0x08006601
 8006628:	08006601 	.word	0x08006601
 800662c:	08006601 	.word	0x08006601
 8006630:	08006685 	.word	0x08006685
 8006634:	08006601 	.word	0x08006601
 8006638:	08006601 	.word	0x08006601
 800663c:	08006601 	.word	0x08006601
 8006640:	08006601 	.word	0x08006601
 8006644:	08006783 	.word	0x08006783
 8006648:	080066af 	.word	0x080066af
 800664c:	0800673d 	.word	0x0800673d
 8006650:	08006601 	.word	0x08006601
 8006654:	08006601 	.word	0x08006601
 8006658:	080067a5 	.word	0x080067a5
 800665c:	08006601 	.word	0x08006601
 8006660:	080066af 	.word	0x080066af
 8006664:	08006601 	.word	0x08006601
 8006668:	08006601 	.word	0x08006601
 800666c:	08006745 	.word	0x08006745
 8006670:	6833      	ldr	r3, [r6, #0]
 8006672:	1d1a      	adds	r2, r3, #4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6032      	str	r2, [r6, #0]
 8006678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800667c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006680:	2301      	movs	r3, #1
 8006682:	e09c      	b.n	80067be <_printf_i+0x1e6>
 8006684:	6833      	ldr	r3, [r6, #0]
 8006686:	6820      	ldr	r0, [r4, #0]
 8006688:	1d19      	adds	r1, r3, #4
 800668a:	6031      	str	r1, [r6, #0]
 800668c:	0606      	lsls	r6, r0, #24
 800668e:	d501      	bpl.n	8006694 <_printf_i+0xbc>
 8006690:	681d      	ldr	r5, [r3, #0]
 8006692:	e003      	b.n	800669c <_printf_i+0xc4>
 8006694:	0645      	lsls	r5, r0, #25
 8006696:	d5fb      	bpl.n	8006690 <_printf_i+0xb8>
 8006698:	f9b3 5000 	ldrsh.w	r5, [r3]
 800669c:	2d00      	cmp	r5, #0
 800669e:	da03      	bge.n	80066a8 <_printf_i+0xd0>
 80066a0:	232d      	movs	r3, #45	@ 0x2d
 80066a2:	426d      	negs	r5, r5
 80066a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066a8:	4858      	ldr	r0, [pc, #352]	@ (800680c <_printf_i+0x234>)
 80066aa:	230a      	movs	r3, #10
 80066ac:	e011      	b.n	80066d2 <_printf_i+0xfa>
 80066ae:	6821      	ldr	r1, [r4, #0]
 80066b0:	6833      	ldr	r3, [r6, #0]
 80066b2:	0608      	lsls	r0, r1, #24
 80066b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80066b8:	d402      	bmi.n	80066c0 <_printf_i+0xe8>
 80066ba:	0649      	lsls	r1, r1, #25
 80066bc:	bf48      	it	mi
 80066be:	b2ad      	uxthmi	r5, r5
 80066c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80066c2:	4852      	ldr	r0, [pc, #328]	@ (800680c <_printf_i+0x234>)
 80066c4:	6033      	str	r3, [r6, #0]
 80066c6:	bf14      	ite	ne
 80066c8:	230a      	movne	r3, #10
 80066ca:	2308      	moveq	r3, #8
 80066cc:	2100      	movs	r1, #0
 80066ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066d2:	6866      	ldr	r6, [r4, #4]
 80066d4:	60a6      	str	r6, [r4, #8]
 80066d6:	2e00      	cmp	r6, #0
 80066d8:	db05      	blt.n	80066e6 <_printf_i+0x10e>
 80066da:	6821      	ldr	r1, [r4, #0]
 80066dc:	432e      	orrs	r6, r5
 80066de:	f021 0104 	bic.w	r1, r1, #4
 80066e2:	6021      	str	r1, [r4, #0]
 80066e4:	d04b      	beq.n	800677e <_printf_i+0x1a6>
 80066e6:	4616      	mov	r6, r2
 80066e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80066ec:	fb03 5711 	mls	r7, r3, r1, r5
 80066f0:	5dc7      	ldrb	r7, [r0, r7]
 80066f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066f6:	462f      	mov	r7, r5
 80066f8:	42bb      	cmp	r3, r7
 80066fa:	460d      	mov	r5, r1
 80066fc:	d9f4      	bls.n	80066e8 <_printf_i+0x110>
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d10b      	bne.n	800671a <_printf_i+0x142>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	07df      	lsls	r7, r3, #31
 8006706:	d508      	bpl.n	800671a <_printf_i+0x142>
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	6861      	ldr	r1, [r4, #4]
 800670c:	4299      	cmp	r1, r3
 800670e:	bfde      	ittt	le
 8006710:	2330      	movle	r3, #48	@ 0x30
 8006712:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006716:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800671a:	1b92      	subs	r2, r2, r6
 800671c:	6122      	str	r2, [r4, #16]
 800671e:	f8cd a000 	str.w	sl, [sp]
 8006722:	464b      	mov	r3, r9
 8006724:	aa03      	add	r2, sp, #12
 8006726:	4621      	mov	r1, r4
 8006728:	4640      	mov	r0, r8
 800672a:	f7ff fee7 	bl	80064fc <_printf_common>
 800672e:	3001      	adds	r0, #1
 8006730:	d14a      	bne.n	80067c8 <_printf_i+0x1f0>
 8006732:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006736:	b004      	add	sp, #16
 8006738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673c:	6823      	ldr	r3, [r4, #0]
 800673e:	f043 0320 	orr.w	r3, r3, #32
 8006742:	6023      	str	r3, [r4, #0]
 8006744:	4832      	ldr	r0, [pc, #200]	@ (8006810 <_printf_i+0x238>)
 8006746:	2778      	movs	r7, #120	@ 0x78
 8006748:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	6831      	ldr	r1, [r6, #0]
 8006750:	061f      	lsls	r7, r3, #24
 8006752:	f851 5b04 	ldr.w	r5, [r1], #4
 8006756:	d402      	bmi.n	800675e <_printf_i+0x186>
 8006758:	065f      	lsls	r7, r3, #25
 800675a:	bf48      	it	mi
 800675c:	b2ad      	uxthmi	r5, r5
 800675e:	6031      	str	r1, [r6, #0]
 8006760:	07d9      	lsls	r1, r3, #31
 8006762:	bf44      	itt	mi
 8006764:	f043 0320 	orrmi.w	r3, r3, #32
 8006768:	6023      	strmi	r3, [r4, #0]
 800676a:	b11d      	cbz	r5, 8006774 <_printf_i+0x19c>
 800676c:	2310      	movs	r3, #16
 800676e:	e7ad      	b.n	80066cc <_printf_i+0xf4>
 8006770:	4826      	ldr	r0, [pc, #152]	@ (800680c <_printf_i+0x234>)
 8006772:	e7e9      	b.n	8006748 <_printf_i+0x170>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	f023 0320 	bic.w	r3, r3, #32
 800677a:	6023      	str	r3, [r4, #0]
 800677c:	e7f6      	b.n	800676c <_printf_i+0x194>
 800677e:	4616      	mov	r6, r2
 8006780:	e7bd      	b.n	80066fe <_printf_i+0x126>
 8006782:	6833      	ldr	r3, [r6, #0]
 8006784:	6825      	ldr	r5, [r4, #0]
 8006786:	6961      	ldr	r1, [r4, #20]
 8006788:	1d18      	adds	r0, r3, #4
 800678a:	6030      	str	r0, [r6, #0]
 800678c:	062e      	lsls	r6, r5, #24
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	d501      	bpl.n	8006796 <_printf_i+0x1be>
 8006792:	6019      	str	r1, [r3, #0]
 8006794:	e002      	b.n	800679c <_printf_i+0x1c4>
 8006796:	0668      	lsls	r0, r5, #25
 8006798:	d5fb      	bpl.n	8006792 <_printf_i+0x1ba>
 800679a:	8019      	strh	r1, [r3, #0]
 800679c:	2300      	movs	r3, #0
 800679e:	6123      	str	r3, [r4, #16]
 80067a0:	4616      	mov	r6, r2
 80067a2:	e7bc      	b.n	800671e <_printf_i+0x146>
 80067a4:	6833      	ldr	r3, [r6, #0]
 80067a6:	1d1a      	adds	r2, r3, #4
 80067a8:	6032      	str	r2, [r6, #0]
 80067aa:	681e      	ldr	r6, [r3, #0]
 80067ac:	6862      	ldr	r2, [r4, #4]
 80067ae:	2100      	movs	r1, #0
 80067b0:	4630      	mov	r0, r6
 80067b2:	f7f9 fd0d 	bl	80001d0 <memchr>
 80067b6:	b108      	cbz	r0, 80067bc <_printf_i+0x1e4>
 80067b8:	1b80      	subs	r0, r0, r6
 80067ba:	6060      	str	r0, [r4, #4]
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	6123      	str	r3, [r4, #16]
 80067c0:	2300      	movs	r3, #0
 80067c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067c6:	e7aa      	b.n	800671e <_printf_i+0x146>
 80067c8:	6923      	ldr	r3, [r4, #16]
 80067ca:	4632      	mov	r2, r6
 80067cc:	4649      	mov	r1, r9
 80067ce:	4640      	mov	r0, r8
 80067d0:	47d0      	blx	sl
 80067d2:	3001      	adds	r0, #1
 80067d4:	d0ad      	beq.n	8006732 <_printf_i+0x15a>
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	079b      	lsls	r3, r3, #30
 80067da:	d413      	bmi.n	8006804 <_printf_i+0x22c>
 80067dc:	68e0      	ldr	r0, [r4, #12]
 80067de:	9b03      	ldr	r3, [sp, #12]
 80067e0:	4298      	cmp	r0, r3
 80067e2:	bfb8      	it	lt
 80067e4:	4618      	movlt	r0, r3
 80067e6:	e7a6      	b.n	8006736 <_printf_i+0x15e>
 80067e8:	2301      	movs	r3, #1
 80067ea:	4632      	mov	r2, r6
 80067ec:	4649      	mov	r1, r9
 80067ee:	4640      	mov	r0, r8
 80067f0:	47d0      	blx	sl
 80067f2:	3001      	adds	r0, #1
 80067f4:	d09d      	beq.n	8006732 <_printf_i+0x15a>
 80067f6:	3501      	adds	r5, #1
 80067f8:	68e3      	ldr	r3, [r4, #12]
 80067fa:	9903      	ldr	r1, [sp, #12]
 80067fc:	1a5b      	subs	r3, r3, r1
 80067fe:	42ab      	cmp	r3, r5
 8006800:	dcf2      	bgt.n	80067e8 <_printf_i+0x210>
 8006802:	e7eb      	b.n	80067dc <_printf_i+0x204>
 8006804:	2500      	movs	r5, #0
 8006806:	f104 0619 	add.w	r6, r4, #25
 800680a:	e7f5      	b.n	80067f8 <_printf_i+0x220>
 800680c:	08008d32 	.word	0x08008d32
 8006810:	08008d43 	.word	0x08008d43

08006814 <sniprintf>:
 8006814:	b40c      	push	{r2, r3}
 8006816:	b530      	push	{r4, r5, lr}
 8006818:	4b18      	ldr	r3, [pc, #96]	@ (800687c <sniprintf+0x68>)
 800681a:	1e0c      	subs	r4, r1, #0
 800681c:	681d      	ldr	r5, [r3, #0]
 800681e:	b09d      	sub	sp, #116	@ 0x74
 8006820:	da08      	bge.n	8006834 <sniprintf+0x20>
 8006822:	238b      	movs	r3, #139	@ 0x8b
 8006824:	602b      	str	r3, [r5, #0]
 8006826:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800682a:	b01d      	add	sp, #116	@ 0x74
 800682c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006830:	b002      	add	sp, #8
 8006832:	4770      	bx	lr
 8006834:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006838:	f8ad 3014 	strh.w	r3, [sp, #20]
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006842:	bf14      	ite	ne
 8006844:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8006848:	4623      	moveq	r3, r4
 800684a:	9304      	str	r3, [sp, #16]
 800684c:	9307      	str	r3, [sp, #28]
 800684e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006852:	9002      	str	r0, [sp, #8]
 8006854:	9006      	str	r0, [sp, #24]
 8006856:	f8ad 3016 	strh.w	r3, [sp, #22]
 800685a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800685c:	ab21      	add	r3, sp, #132	@ 0x84
 800685e:	a902      	add	r1, sp, #8
 8006860:	4628      	mov	r0, r5
 8006862:	9301      	str	r3, [sp, #4]
 8006864:	f000 ffe0 	bl	8007828 <_svfiprintf_r>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	bfbc      	itt	lt
 800686c:	238b      	movlt	r3, #139	@ 0x8b
 800686e:	602b      	strlt	r3, [r5, #0]
 8006870:	2c00      	cmp	r4, #0
 8006872:	d0da      	beq.n	800682a <sniprintf+0x16>
 8006874:	9b02      	ldr	r3, [sp, #8]
 8006876:	2200      	movs	r2, #0
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e7d6      	b.n	800682a <sniprintf+0x16>
 800687c:	2000001c 	.word	0x2000001c

08006880 <siprintf>:
 8006880:	b40e      	push	{r1, r2, r3}
 8006882:	b510      	push	{r4, lr}
 8006884:	b09d      	sub	sp, #116	@ 0x74
 8006886:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006888:	9002      	str	r0, [sp, #8]
 800688a:	9006      	str	r0, [sp, #24]
 800688c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006890:	480a      	ldr	r0, [pc, #40]	@ (80068bc <siprintf+0x3c>)
 8006892:	9107      	str	r1, [sp, #28]
 8006894:	9104      	str	r1, [sp, #16]
 8006896:	490a      	ldr	r1, [pc, #40]	@ (80068c0 <siprintf+0x40>)
 8006898:	f853 2b04 	ldr.w	r2, [r3], #4
 800689c:	9105      	str	r1, [sp, #20]
 800689e:	2400      	movs	r4, #0
 80068a0:	a902      	add	r1, sp, #8
 80068a2:	6800      	ldr	r0, [r0, #0]
 80068a4:	9301      	str	r3, [sp, #4]
 80068a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80068a8:	f000 ffbe 	bl	8007828 <_svfiprintf_r>
 80068ac:	9b02      	ldr	r3, [sp, #8]
 80068ae:	701c      	strb	r4, [r3, #0]
 80068b0:	b01d      	add	sp, #116	@ 0x74
 80068b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b6:	b003      	add	sp, #12
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	2000001c 	.word	0x2000001c
 80068c0:	ffff0208 	.word	0xffff0208

080068c4 <std>:
 80068c4:	2300      	movs	r3, #0
 80068c6:	b510      	push	{r4, lr}
 80068c8:	4604      	mov	r4, r0
 80068ca:	e9c0 3300 	strd	r3, r3, [r0]
 80068ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068d2:	6083      	str	r3, [r0, #8]
 80068d4:	8181      	strh	r1, [r0, #12]
 80068d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80068d8:	81c2      	strh	r2, [r0, #14]
 80068da:	6183      	str	r3, [r0, #24]
 80068dc:	4619      	mov	r1, r3
 80068de:	2208      	movs	r2, #8
 80068e0:	305c      	adds	r0, #92	@ 0x5c
 80068e2:	f000 f8b1 	bl	8006a48 <memset>
 80068e6:	4b0d      	ldr	r3, [pc, #52]	@ (800691c <std+0x58>)
 80068e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80068ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006920 <std+0x5c>)
 80068ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006924 <std+0x60>)
 80068f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006928 <std+0x64>)
 80068f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80068f6:	4b0d      	ldr	r3, [pc, #52]	@ (800692c <std+0x68>)
 80068f8:	6224      	str	r4, [r4, #32]
 80068fa:	429c      	cmp	r4, r3
 80068fc:	d006      	beq.n	800690c <std+0x48>
 80068fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006902:	4294      	cmp	r4, r2
 8006904:	d002      	beq.n	800690c <std+0x48>
 8006906:	33d0      	adds	r3, #208	@ 0xd0
 8006908:	429c      	cmp	r4, r3
 800690a:	d105      	bne.n	8006918 <std+0x54>
 800690c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006914:	f000 b8ca 	b.w	8006aac <__retarget_lock_init_recursive>
 8006918:	bd10      	pop	{r4, pc}
 800691a:	bf00      	nop
 800691c:	080083d9 	.word	0x080083d9
 8006920:	080083fb 	.word	0x080083fb
 8006924:	08008433 	.word	0x08008433
 8006928:	08008457 	.word	0x08008457
 800692c:	2000034c 	.word	0x2000034c

08006930 <stdio_exit_handler>:
 8006930:	4a02      	ldr	r2, [pc, #8]	@ (800693c <stdio_exit_handler+0xc>)
 8006932:	4903      	ldr	r1, [pc, #12]	@ (8006940 <stdio_exit_handler+0x10>)
 8006934:	4803      	ldr	r0, [pc, #12]	@ (8006944 <stdio_exit_handler+0x14>)
 8006936:	f000 b869 	b.w	8006a0c <_fwalk_sglue>
 800693a:	bf00      	nop
 800693c:	20000010 	.word	0x20000010
 8006940:	08007c7d 	.word	0x08007c7d
 8006944:	20000020 	.word	0x20000020

08006948 <cleanup_stdio>:
 8006948:	6841      	ldr	r1, [r0, #4]
 800694a:	4b0c      	ldr	r3, [pc, #48]	@ (800697c <cleanup_stdio+0x34>)
 800694c:	4299      	cmp	r1, r3
 800694e:	b510      	push	{r4, lr}
 8006950:	4604      	mov	r4, r0
 8006952:	d001      	beq.n	8006958 <cleanup_stdio+0x10>
 8006954:	f001 f992 	bl	8007c7c <_fflush_r>
 8006958:	68a1      	ldr	r1, [r4, #8]
 800695a:	4b09      	ldr	r3, [pc, #36]	@ (8006980 <cleanup_stdio+0x38>)
 800695c:	4299      	cmp	r1, r3
 800695e:	d002      	beq.n	8006966 <cleanup_stdio+0x1e>
 8006960:	4620      	mov	r0, r4
 8006962:	f001 f98b 	bl	8007c7c <_fflush_r>
 8006966:	68e1      	ldr	r1, [r4, #12]
 8006968:	4b06      	ldr	r3, [pc, #24]	@ (8006984 <cleanup_stdio+0x3c>)
 800696a:	4299      	cmp	r1, r3
 800696c:	d004      	beq.n	8006978 <cleanup_stdio+0x30>
 800696e:	4620      	mov	r0, r4
 8006970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006974:	f001 b982 	b.w	8007c7c <_fflush_r>
 8006978:	bd10      	pop	{r4, pc}
 800697a:	bf00      	nop
 800697c:	2000034c 	.word	0x2000034c
 8006980:	200003b4 	.word	0x200003b4
 8006984:	2000041c 	.word	0x2000041c

08006988 <global_stdio_init.part.0>:
 8006988:	b510      	push	{r4, lr}
 800698a:	4b0b      	ldr	r3, [pc, #44]	@ (80069b8 <global_stdio_init.part.0+0x30>)
 800698c:	4c0b      	ldr	r4, [pc, #44]	@ (80069bc <global_stdio_init.part.0+0x34>)
 800698e:	4a0c      	ldr	r2, [pc, #48]	@ (80069c0 <global_stdio_init.part.0+0x38>)
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	4620      	mov	r0, r4
 8006994:	2200      	movs	r2, #0
 8006996:	2104      	movs	r1, #4
 8006998:	f7ff ff94 	bl	80068c4 <std>
 800699c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069a0:	2201      	movs	r2, #1
 80069a2:	2109      	movs	r1, #9
 80069a4:	f7ff ff8e 	bl	80068c4 <std>
 80069a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069ac:	2202      	movs	r2, #2
 80069ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069b2:	2112      	movs	r1, #18
 80069b4:	f7ff bf86 	b.w	80068c4 <std>
 80069b8:	20000484 	.word	0x20000484
 80069bc:	2000034c 	.word	0x2000034c
 80069c0:	08006931 	.word	0x08006931

080069c4 <__sfp_lock_acquire>:
 80069c4:	4801      	ldr	r0, [pc, #4]	@ (80069cc <__sfp_lock_acquire+0x8>)
 80069c6:	f000 b872 	b.w	8006aae <__retarget_lock_acquire_recursive>
 80069ca:	bf00      	nop
 80069cc:	20000489 	.word	0x20000489

080069d0 <__sfp_lock_release>:
 80069d0:	4801      	ldr	r0, [pc, #4]	@ (80069d8 <__sfp_lock_release+0x8>)
 80069d2:	f000 b86d 	b.w	8006ab0 <__retarget_lock_release_recursive>
 80069d6:	bf00      	nop
 80069d8:	20000489 	.word	0x20000489

080069dc <__sinit>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	4604      	mov	r4, r0
 80069e0:	f7ff fff0 	bl	80069c4 <__sfp_lock_acquire>
 80069e4:	6a23      	ldr	r3, [r4, #32]
 80069e6:	b11b      	cbz	r3, 80069f0 <__sinit+0x14>
 80069e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069ec:	f7ff bff0 	b.w	80069d0 <__sfp_lock_release>
 80069f0:	4b04      	ldr	r3, [pc, #16]	@ (8006a04 <__sinit+0x28>)
 80069f2:	6223      	str	r3, [r4, #32]
 80069f4:	4b04      	ldr	r3, [pc, #16]	@ (8006a08 <__sinit+0x2c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1f5      	bne.n	80069e8 <__sinit+0xc>
 80069fc:	f7ff ffc4 	bl	8006988 <global_stdio_init.part.0>
 8006a00:	e7f2      	b.n	80069e8 <__sinit+0xc>
 8006a02:	bf00      	nop
 8006a04:	08006949 	.word	0x08006949
 8006a08:	20000484 	.word	0x20000484

08006a0c <_fwalk_sglue>:
 8006a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a10:	4607      	mov	r7, r0
 8006a12:	4688      	mov	r8, r1
 8006a14:	4614      	mov	r4, r2
 8006a16:	2600      	movs	r6, #0
 8006a18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a1c:	f1b9 0901 	subs.w	r9, r9, #1
 8006a20:	d505      	bpl.n	8006a2e <_fwalk_sglue+0x22>
 8006a22:	6824      	ldr	r4, [r4, #0]
 8006a24:	2c00      	cmp	r4, #0
 8006a26:	d1f7      	bne.n	8006a18 <_fwalk_sglue+0xc>
 8006a28:	4630      	mov	r0, r6
 8006a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a2e:	89ab      	ldrh	r3, [r5, #12]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d907      	bls.n	8006a44 <_fwalk_sglue+0x38>
 8006a34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	d003      	beq.n	8006a44 <_fwalk_sglue+0x38>
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	4638      	mov	r0, r7
 8006a40:	47c0      	blx	r8
 8006a42:	4306      	orrs	r6, r0
 8006a44:	3568      	adds	r5, #104	@ 0x68
 8006a46:	e7e9      	b.n	8006a1c <_fwalk_sglue+0x10>

08006a48 <memset>:
 8006a48:	4402      	add	r2, r0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d100      	bne.n	8006a52 <memset+0xa>
 8006a50:	4770      	bx	lr
 8006a52:	f803 1b01 	strb.w	r1, [r3], #1
 8006a56:	e7f9      	b.n	8006a4c <memset+0x4>

08006a58 <__errno>:
 8006a58:	4b01      	ldr	r3, [pc, #4]	@ (8006a60 <__errno+0x8>)
 8006a5a:	6818      	ldr	r0, [r3, #0]
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	2000001c 	.word	0x2000001c

08006a64 <__libc_init_array>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	4d0d      	ldr	r5, [pc, #52]	@ (8006a9c <__libc_init_array+0x38>)
 8006a68:	4c0d      	ldr	r4, [pc, #52]	@ (8006aa0 <__libc_init_array+0x3c>)
 8006a6a:	1b64      	subs	r4, r4, r5
 8006a6c:	10a4      	asrs	r4, r4, #2
 8006a6e:	2600      	movs	r6, #0
 8006a70:	42a6      	cmp	r6, r4
 8006a72:	d109      	bne.n	8006a88 <__libc_init_array+0x24>
 8006a74:	4d0b      	ldr	r5, [pc, #44]	@ (8006aa4 <__libc_init_array+0x40>)
 8006a76:	4c0c      	ldr	r4, [pc, #48]	@ (8006aa8 <__libc_init_array+0x44>)
 8006a78:	f002 f8f8 	bl	8008c6c <_init>
 8006a7c:	1b64      	subs	r4, r4, r5
 8006a7e:	10a4      	asrs	r4, r4, #2
 8006a80:	2600      	movs	r6, #0
 8006a82:	42a6      	cmp	r6, r4
 8006a84:	d105      	bne.n	8006a92 <__libc_init_array+0x2e>
 8006a86:	bd70      	pop	{r4, r5, r6, pc}
 8006a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8c:	4798      	blx	r3
 8006a8e:	3601      	adds	r6, #1
 8006a90:	e7ee      	b.n	8006a70 <__libc_init_array+0xc>
 8006a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a96:	4798      	blx	r3
 8006a98:	3601      	adds	r6, #1
 8006a9a:	e7f2      	b.n	8006a82 <__libc_init_array+0x1e>
 8006a9c:	0800909c 	.word	0x0800909c
 8006aa0:	0800909c 	.word	0x0800909c
 8006aa4:	0800909c 	.word	0x0800909c
 8006aa8:	080090a0 	.word	0x080090a0

08006aac <__retarget_lock_init_recursive>:
 8006aac:	4770      	bx	lr

08006aae <__retarget_lock_acquire_recursive>:
 8006aae:	4770      	bx	lr

08006ab0 <__retarget_lock_release_recursive>:
 8006ab0:	4770      	bx	lr
	...

08006ab4 <_localeconv_r>:
 8006ab4:	4800      	ldr	r0, [pc, #0]	@ (8006ab8 <_localeconv_r+0x4>)
 8006ab6:	4770      	bx	lr
 8006ab8:	2000015c 	.word	0x2000015c

08006abc <quorem>:
 8006abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac0:	6903      	ldr	r3, [r0, #16]
 8006ac2:	690c      	ldr	r4, [r1, #16]
 8006ac4:	42a3      	cmp	r3, r4
 8006ac6:	4607      	mov	r7, r0
 8006ac8:	db7e      	blt.n	8006bc8 <quorem+0x10c>
 8006aca:	3c01      	subs	r4, #1
 8006acc:	f101 0814 	add.w	r8, r1, #20
 8006ad0:	00a3      	lsls	r3, r4, #2
 8006ad2:	f100 0514 	add.w	r5, r0, #20
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006aee:	fbb2 f6f3 	udiv	r6, r2, r3
 8006af2:	d32e      	bcc.n	8006b52 <quorem+0x96>
 8006af4:	f04f 0a00 	mov.w	sl, #0
 8006af8:	46c4      	mov	ip, r8
 8006afa:	46ae      	mov	lr, r5
 8006afc:	46d3      	mov	fp, sl
 8006afe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b02:	b298      	uxth	r0, r3
 8006b04:	fb06 a000 	mla	r0, r6, r0, sl
 8006b08:	0c02      	lsrs	r2, r0, #16
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	fb06 2303 	mla	r3, r6, r3, r2
 8006b10:	f8de 2000 	ldr.w	r2, [lr]
 8006b14:	b280      	uxth	r0, r0
 8006b16:	b292      	uxth	r2, r2
 8006b18:	1a12      	subs	r2, r2, r0
 8006b1a:	445a      	add	r2, fp
 8006b1c:	f8de 0000 	ldr.w	r0, [lr]
 8006b20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b2e:	b292      	uxth	r2, r2
 8006b30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b34:	45e1      	cmp	r9, ip
 8006b36:	f84e 2b04 	str.w	r2, [lr], #4
 8006b3a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b3e:	d2de      	bcs.n	8006afe <quorem+0x42>
 8006b40:	9b00      	ldr	r3, [sp, #0]
 8006b42:	58eb      	ldr	r3, [r5, r3]
 8006b44:	b92b      	cbnz	r3, 8006b52 <quorem+0x96>
 8006b46:	9b01      	ldr	r3, [sp, #4]
 8006b48:	3b04      	subs	r3, #4
 8006b4a:	429d      	cmp	r5, r3
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	d32f      	bcc.n	8006bb0 <quorem+0xf4>
 8006b50:	613c      	str	r4, [r7, #16]
 8006b52:	4638      	mov	r0, r7
 8006b54:	f001 fb38 	bl	80081c8 <__mcmp>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	db25      	blt.n	8006ba8 <quorem+0xec>
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	2000      	movs	r0, #0
 8006b60:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b64:	f8d1 c000 	ldr.w	ip, [r1]
 8006b68:	fa1f fe82 	uxth.w	lr, r2
 8006b6c:	fa1f f38c 	uxth.w	r3, ip
 8006b70:	eba3 030e 	sub.w	r3, r3, lr
 8006b74:	4403      	add	r3, r0
 8006b76:	0c12      	lsrs	r2, r2, #16
 8006b78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b7c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b86:	45c1      	cmp	r9, r8
 8006b88:	f841 3b04 	str.w	r3, [r1], #4
 8006b8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b90:	d2e6      	bcs.n	8006b60 <quorem+0xa4>
 8006b92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b9a:	b922      	cbnz	r2, 8006ba6 <quorem+0xea>
 8006b9c:	3b04      	subs	r3, #4
 8006b9e:	429d      	cmp	r5, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	d30b      	bcc.n	8006bbc <quorem+0x100>
 8006ba4:	613c      	str	r4, [r7, #16]
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	4630      	mov	r0, r6
 8006baa:	b003      	add	sp, #12
 8006bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb0:	6812      	ldr	r2, [r2, #0]
 8006bb2:	3b04      	subs	r3, #4
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	d1cb      	bne.n	8006b50 <quorem+0x94>
 8006bb8:	3c01      	subs	r4, #1
 8006bba:	e7c6      	b.n	8006b4a <quorem+0x8e>
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	3b04      	subs	r3, #4
 8006bc0:	2a00      	cmp	r2, #0
 8006bc2:	d1ef      	bne.n	8006ba4 <quorem+0xe8>
 8006bc4:	3c01      	subs	r4, #1
 8006bc6:	e7ea      	b.n	8006b9e <quorem+0xe2>
 8006bc8:	2000      	movs	r0, #0
 8006bca:	e7ee      	b.n	8006baa <quorem+0xee>
 8006bcc:	0000      	movs	r0, r0
	...

08006bd0 <_dtoa_r>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	69c7      	ldr	r7, [r0, #28]
 8006bd6:	b097      	sub	sp, #92	@ 0x5c
 8006bd8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006bdc:	ec55 4b10 	vmov	r4, r5, d0
 8006be0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006be2:	9107      	str	r1, [sp, #28]
 8006be4:	4681      	mov	r9, r0
 8006be6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006be8:	9311      	str	r3, [sp, #68]	@ 0x44
 8006bea:	b97f      	cbnz	r7, 8006c0c <_dtoa_r+0x3c>
 8006bec:	2010      	movs	r0, #16
 8006bee:	f000 ff17 	bl	8007a20 <malloc>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	f8c9 001c 	str.w	r0, [r9, #28]
 8006bf8:	b920      	cbnz	r0, 8006c04 <_dtoa_r+0x34>
 8006bfa:	4ba9      	ldr	r3, [pc, #676]	@ (8006ea0 <_dtoa_r+0x2d0>)
 8006bfc:	21ef      	movs	r1, #239	@ 0xef
 8006bfe:	48a9      	ldr	r0, [pc, #676]	@ (8006ea4 <_dtoa_r+0x2d4>)
 8006c00:	f001 fcda 	bl	80085b8 <__assert_func>
 8006c04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c08:	6007      	str	r7, [r0, #0]
 8006c0a:	60c7      	str	r7, [r0, #12]
 8006c0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c10:	6819      	ldr	r1, [r3, #0]
 8006c12:	b159      	cbz	r1, 8006c2c <_dtoa_r+0x5c>
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	604a      	str	r2, [r1, #4]
 8006c18:	2301      	movs	r3, #1
 8006c1a:	4093      	lsls	r3, r2
 8006c1c:	608b      	str	r3, [r1, #8]
 8006c1e:	4648      	mov	r0, r9
 8006c20:	f001 f8a0 	bl	8007d64 <_Bfree>
 8006c24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	1e2b      	subs	r3, r5, #0
 8006c2e:	bfb9      	ittee	lt
 8006c30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c34:	9305      	strlt	r3, [sp, #20]
 8006c36:	2300      	movge	r3, #0
 8006c38:	6033      	strge	r3, [r6, #0]
 8006c3a:	9f05      	ldr	r7, [sp, #20]
 8006c3c:	4b9a      	ldr	r3, [pc, #616]	@ (8006ea8 <_dtoa_r+0x2d8>)
 8006c3e:	bfbc      	itt	lt
 8006c40:	2201      	movlt	r2, #1
 8006c42:	6032      	strlt	r2, [r6, #0]
 8006c44:	43bb      	bics	r3, r7
 8006c46:	d112      	bne.n	8006c6e <_dtoa_r+0x9e>
 8006c48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006c4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c4e:	6013      	str	r3, [r2, #0]
 8006c50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c54:	4323      	orrs	r3, r4
 8006c56:	f000 855a 	beq.w	800770e <_dtoa_r+0xb3e>
 8006c5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c5c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006ebc <_dtoa_r+0x2ec>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 855c 	beq.w	800771e <_dtoa_r+0xb4e>
 8006c66:	f10a 0303 	add.w	r3, sl, #3
 8006c6a:	f000 bd56 	b.w	800771a <_dtoa_r+0xb4a>
 8006c6e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006c72:	2200      	movs	r2, #0
 8006c74:	ec51 0b17 	vmov	r0, r1, d7
 8006c78:	2300      	movs	r3, #0
 8006c7a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006c7e:	f7f9 ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c82:	4680      	mov	r8, r0
 8006c84:	b158      	cbz	r0, 8006c9e <_dtoa_r+0xce>
 8006c86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006c88:	2301      	movs	r3, #1
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006c8e:	b113      	cbz	r3, 8006c96 <_dtoa_r+0xc6>
 8006c90:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006c92:	4b86      	ldr	r3, [pc, #536]	@ (8006eac <_dtoa_r+0x2dc>)
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006ec0 <_dtoa_r+0x2f0>
 8006c9a:	f000 bd40 	b.w	800771e <_dtoa_r+0xb4e>
 8006c9e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006ca2:	aa14      	add	r2, sp, #80	@ 0x50
 8006ca4:	a915      	add	r1, sp, #84	@ 0x54
 8006ca6:	4648      	mov	r0, r9
 8006ca8:	f001 fb3e 	bl	8008328 <__d2b>
 8006cac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006cb0:	9002      	str	r0, [sp, #8]
 8006cb2:	2e00      	cmp	r6, #0
 8006cb4:	d078      	beq.n	8006da8 <_dtoa_r+0x1d8>
 8006cb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cb8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006cc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006cc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006ccc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	4b76      	ldr	r3, [pc, #472]	@ (8006eb0 <_dtoa_r+0x2e0>)
 8006cd6:	f7f9 fad7 	bl	8000288 <__aeabi_dsub>
 8006cda:	a36b      	add	r3, pc, #428	@ (adr r3, 8006e88 <_dtoa_r+0x2b8>)
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	f7f9 fc8a 	bl	80005f8 <__aeabi_dmul>
 8006ce4:	a36a      	add	r3, pc, #424	@ (adr r3, 8006e90 <_dtoa_r+0x2c0>)
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	f7f9 facf 	bl	800028c <__adddf3>
 8006cee:	4604      	mov	r4, r0
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	f7f9 fc16 	bl	8000524 <__aeabi_i2d>
 8006cf8:	a367      	add	r3, pc, #412	@ (adr r3, 8006e98 <_dtoa_r+0x2c8>)
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f7f9 fc7b 	bl	80005f8 <__aeabi_dmul>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	4620      	mov	r0, r4
 8006d08:	4629      	mov	r1, r5
 8006d0a:	f7f9 fabf 	bl	800028c <__adddf3>
 8006d0e:	4604      	mov	r4, r0
 8006d10:	460d      	mov	r5, r1
 8006d12:	f7f9 ff21 	bl	8000b58 <__aeabi_d2iz>
 8006d16:	2200      	movs	r2, #0
 8006d18:	4607      	mov	r7, r0
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	4629      	mov	r1, r5
 8006d20:	f7f9 fedc 	bl	8000adc <__aeabi_dcmplt>
 8006d24:	b140      	cbz	r0, 8006d38 <_dtoa_r+0x168>
 8006d26:	4638      	mov	r0, r7
 8006d28:	f7f9 fbfc 	bl	8000524 <__aeabi_i2d>
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	462b      	mov	r3, r5
 8006d30:	f7f9 feca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d34:	b900      	cbnz	r0, 8006d38 <_dtoa_r+0x168>
 8006d36:	3f01      	subs	r7, #1
 8006d38:	2f16      	cmp	r7, #22
 8006d3a:	d852      	bhi.n	8006de2 <_dtoa_r+0x212>
 8006d3c:	4b5d      	ldr	r3, [pc, #372]	@ (8006eb4 <_dtoa_r+0x2e4>)
 8006d3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006d4a:	f7f9 fec7 	bl	8000adc <__aeabi_dcmplt>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d049      	beq.n	8006de6 <_dtoa_r+0x216>
 8006d52:	3f01      	subs	r7, #1
 8006d54:	2300      	movs	r3, #0
 8006d56:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d5a:	1b9b      	subs	r3, r3, r6
 8006d5c:	1e5a      	subs	r2, r3, #1
 8006d5e:	bf45      	ittet	mi
 8006d60:	f1c3 0301 	rsbmi	r3, r3, #1
 8006d64:	9300      	strmi	r3, [sp, #0]
 8006d66:	2300      	movpl	r3, #0
 8006d68:	2300      	movmi	r3, #0
 8006d6a:	9206      	str	r2, [sp, #24]
 8006d6c:	bf54      	ite	pl
 8006d6e:	9300      	strpl	r3, [sp, #0]
 8006d70:	9306      	strmi	r3, [sp, #24]
 8006d72:	2f00      	cmp	r7, #0
 8006d74:	db39      	blt.n	8006dea <_dtoa_r+0x21a>
 8006d76:	9b06      	ldr	r3, [sp, #24]
 8006d78:	970d      	str	r7, [sp, #52]	@ 0x34
 8006d7a:	443b      	add	r3, r7
 8006d7c:	9306      	str	r3, [sp, #24]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	9308      	str	r3, [sp, #32]
 8006d82:	9b07      	ldr	r3, [sp, #28]
 8006d84:	2b09      	cmp	r3, #9
 8006d86:	d863      	bhi.n	8006e50 <_dtoa_r+0x280>
 8006d88:	2b05      	cmp	r3, #5
 8006d8a:	bfc4      	itt	gt
 8006d8c:	3b04      	subgt	r3, #4
 8006d8e:	9307      	strgt	r3, [sp, #28]
 8006d90:	9b07      	ldr	r3, [sp, #28]
 8006d92:	f1a3 0302 	sub.w	r3, r3, #2
 8006d96:	bfcc      	ite	gt
 8006d98:	2400      	movgt	r4, #0
 8006d9a:	2401      	movle	r4, #1
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d863      	bhi.n	8006e68 <_dtoa_r+0x298>
 8006da0:	e8df f003 	tbb	[pc, r3]
 8006da4:	2b375452 	.word	0x2b375452
 8006da8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006dac:	441e      	add	r6, r3
 8006dae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006db2:	2b20      	cmp	r3, #32
 8006db4:	bfc1      	itttt	gt
 8006db6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006dba:	409f      	lslgt	r7, r3
 8006dbc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006dc0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006dc4:	bfd6      	itet	le
 8006dc6:	f1c3 0320 	rsble	r3, r3, #32
 8006dca:	ea47 0003 	orrgt.w	r0, r7, r3
 8006dce:	fa04 f003 	lslle.w	r0, r4, r3
 8006dd2:	f7f9 fb97 	bl	8000504 <__aeabi_ui2d>
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ddc:	3e01      	subs	r6, #1
 8006dde:	9212      	str	r2, [sp, #72]	@ 0x48
 8006de0:	e776      	b.n	8006cd0 <_dtoa_r+0x100>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e7b7      	b.n	8006d56 <_dtoa_r+0x186>
 8006de6:	9010      	str	r0, [sp, #64]	@ 0x40
 8006de8:	e7b6      	b.n	8006d58 <_dtoa_r+0x188>
 8006dea:	9b00      	ldr	r3, [sp, #0]
 8006dec:	1bdb      	subs	r3, r3, r7
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	427b      	negs	r3, r7
 8006df2:	9308      	str	r3, [sp, #32]
 8006df4:	2300      	movs	r3, #0
 8006df6:	930d      	str	r3, [sp, #52]	@ 0x34
 8006df8:	e7c3      	b.n	8006d82 <_dtoa_r+0x1b2>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e00:	eb07 0b03 	add.w	fp, r7, r3
 8006e04:	f10b 0301 	add.w	r3, fp, #1
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	9303      	str	r3, [sp, #12]
 8006e0c:	bfb8      	it	lt
 8006e0e:	2301      	movlt	r3, #1
 8006e10:	e006      	b.n	8006e20 <_dtoa_r+0x250>
 8006e12:	2301      	movs	r3, #1
 8006e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	dd28      	ble.n	8006e6e <_dtoa_r+0x29e>
 8006e1c:	469b      	mov	fp, r3
 8006e1e:	9303      	str	r3, [sp, #12]
 8006e20:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006e24:	2100      	movs	r1, #0
 8006e26:	2204      	movs	r2, #4
 8006e28:	f102 0514 	add.w	r5, r2, #20
 8006e2c:	429d      	cmp	r5, r3
 8006e2e:	d926      	bls.n	8006e7e <_dtoa_r+0x2ae>
 8006e30:	6041      	str	r1, [r0, #4]
 8006e32:	4648      	mov	r0, r9
 8006e34:	f000 ff56 	bl	8007ce4 <_Balloc>
 8006e38:	4682      	mov	sl, r0
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d142      	bne.n	8006ec4 <_dtoa_r+0x2f4>
 8006e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8006eb8 <_dtoa_r+0x2e8>)
 8006e40:	4602      	mov	r2, r0
 8006e42:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e46:	e6da      	b.n	8006bfe <_dtoa_r+0x2e>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	e7e3      	b.n	8006e14 <_dtoa_r+0x244>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e7d5      	b.n	8006dfc <_dtoa_r+0x22c>
 8006e50:	2401      	movs	r4, #1
 8006e52:	2300      	movs	r3, #0
 8006e54:	9307      	str	r3, [sp, #28]
 8006e56:	9409      	str	r4, [sp, #36]	@ 0x24
 8006e58:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006e62:	2312      	movs	r3, #18
 8006e64:	920c      	str	r2, [sp, #48]	@ 0x30
 8006e66:	e7db      	b.n	8006e20 <_dtoa_r+0x250>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e6c:	e7f4      	b.n	8006e58 <_dtoa_r+0x288>
 8006e6e:	f04f 0b01 	mov.w	fp, #1
 8006e72:	f8cd b00c 	str.w	fp, [sp, #12]
 8006e76:	465b      	mov	r3, fp
 8006e78:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006e7c:	e7d0      	b.n	8006e20 <_dtoa_r+0x250>
 8006e7e:	3101      	adds	r1, #1
 8006e80:	0052      	lsls	r2, r2, #1
 8006e82:	e7d1      	b.n	8006e28 <_dtoa_r+0x258>
 8006e84:	f3af 8000 	nop.w
 8006e88:	636f4361 	.word	0x636f4361
 8006e8c:	3fd287a7 	.word	0x3fd287a7
 8006e90:	8b60c8b3 	.word	0x8b60c8b3
 8006e94:	3fc68a28 	.word	0x3fc68a28
 8006e98:	509f79fb 	.word	0x509f79fb
 8006e9c:	3fd34413 	.word	0x3fd34413
 8006ea0:	08008d61 	.word	0x08008d61
 8006ea4:	08008d78 	.word	0x08008d78
 8006ea8:	7ff00000 	.word	0x7ff00000
 8006eac:	08008d31 	.word	0x08008d31
 8006eb0:	3ff80000 	.word	0x3ff80000
 8006eb4:	08008ec8 	.word	0x08008ec8
 8006eb8:	08008dd0 	.word	0x08008dd0
 8006ebc:	08008d5d 	.word	0x08008d5d
 8006ec0:	08008d30 	.word	0x08008d30
 8006ec4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ec8:	6018      	str	r0, [r3, #0]
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	2b0e      	cmp	r3, #14
 8006ece:	f200 80a1 	bhi.w	8007014 <_dtoa_r+0x444>
 8006ed2:	2c00      	cmp	r4, #0
 8006ed4:	f000 809e 	beq.w	8007014 <_dtoa_r+0x444>
 8006ed8:	2f00      	cmp	r7, #0
 8006eda:	dd33      	ble.n	8006f44 <_dtoa_r+0x374>
 8006edc:	4b9c      	ldr	r3, [pc, #624]	@ (8007150 <_dtoa_r+0x580>)
 8006ede:	f007 020f 	and.w	r2, r7, #15
 8006ee2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ee6:	ed93 7b00 	vldr	d7, [r3]
 8006eea:	05f8      	lsls	r0, r7, #23
 8006eec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006ef0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006ef4:	d516      	bpl.n	8006f24 <_dtoa_r+0x354>
 8006ef6:	4b97      	ldr	r3, [pc, #604]	@ (8007154 <_dtoa_r+0x584>)
 8006ef8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006efc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f00:	f7f9 fca4 	bl	800084c <__aeabi_ddiv>
 8006f04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f08:	f004 040f 	and.w	r4, r4, #15
 8006f0c:	2603      	movs	r6, #3
 8006f0e:	4d91      	ldr	r5, [pc, #580]	@ (8007154 <_dtoa_r+0x584>)
 8006f10:	b954      	cbnz	r4, 8006f28 <_dtoa_r+0x358>
 8006f12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006f16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f1a:	f7f9 fc97 	bl	800084c <__aeabi_ddiv>
 8006f1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f22:	e028      	b.n	8006f76 <_dtoa_r+0x3a6>
 8006f24:	2602      	movs	r6, #2
 8006f26:	e7f2      	b.n	8006f0e <_dtoa_r+0x33e>
 8006f28:	07e1      	lsls	r1, r4, #31
 8006f2a:	d508      	bpl.n	8006f3e <_dtoa_r+0x36e>
 8006f2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006f30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f34:	f7f9 fb60 	bl	80005f8 <__aeabi_dmul>
 8006f38:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006f3c:	3601      	adds	r6, #1
 8006f3e:	1064      	asrs	r4, r4, #1
 8006f40:	3508      	adds	r5, #8
 8006f42:	e7e5      	b.n	8006f10 <_dtoa_r+0x340>
 8006f44:	f000 80af 	beq.w	80070a6 <_dtoa_r+0x4d6>
 8006f48:	427c      	negs	r4, r7
 8006f4a:	4b81      	ldr	r3, [pc, #516]	@ (8007150 <_dtoa_r+0x580>)
 8006f4c:	4d81      	ldr	r5, [pc, #516]	@ (8007154 <_dtoa_r+0x584>)
 8006f4e:	f004 020f 	and.w	r2, r4, #15
 8006f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006f5e:	f7f9 fb4b 	bl	80005f8 <__aeabi_dmul>
 8006f62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f66:	1124      	asrs	r4, r4, #4
 8006f68:	2300      	movs	r3, #0
 8006f6a:	2602      	movs	r6, #2
 8006f6c:	2c00      	cmp	r4, #0
 8006f6e:	f040 808f 	bne.w	8007090 <_dtoa_r+0x4c0>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1d3      	bne.n	8006f1e <_dtoa_r+0x34e>
 8006f76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f78:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 8094 	beq.w	80070aa <_dtoa_r+0x4da>
 8006f82:	4b75      	ldr	r3, [pc, #468]	@ (8007158 <_dtoa_r+0x588>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	4620      	mov	r0, r4
 8006f88:	4629      	mov	r1, r5
 8006f8a:	f7f9 fda7 	bl	8000adc <__aeabi_dcmplt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	f000 808b 	beq.w	80070aa <_dtoa_r+0x4da>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 8087 	beq.w	80070aa <_dtoa_r+0x4da>
 8006f9c:	f1bb 0f00 	cmp.w	fp, #0
 8006fa0:	dd34      	ble.n	800700c <_dtoa_r+0x43c>
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	4b6d      	ldr	r3, [pc, #436]	@ (800715c <_dtoa_r+0x58c>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f7f9 fb25 	bl	80005f8 <__aeabi_dmul>
 8006fae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fb2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006fb6:	3601      	adds	r6, #1
 8006fb8:	465c      	mov	r4, fp
 8006fba:	4630      	mov	r0, r6
 8006fbc:	f7f9 fab2 	bl	8000524 <__aeabi_i2d>
 8006fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fc4:	f7f9 fb18 	bl	80005f8 <__aeabi_dmul>
 8006fc8:	4b65      	ldr	r3, [pc, #404]	@ (8007160 <_dtoa_r+0x590>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f7f9 f95e 	bl	800028c <__adddf3>
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006fd6:	2c00      	cmp	r4, #0
 8006fd8:	d16a      	bne.n	80070b0 <_dtoa_r+0x4e0>
 8006fda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fde:	4b61      	ldr	r3, [pc, #388]	@ (8007164 <_dtoa_r+0x594>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f7f9 f951 	bl	8000288 <__aeabi_dsub>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006fee:	462a      	mov	r2, r5
 8006ff0:	4633      	mov	r3, r6
 8006ff2:	f7f9 fd91 	bl	8000b18 <__aeabi_dcmpgt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f040 8298 	bne.w	800752c <_dtoa_r+0x95c>
 8006ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007000:	462a      	mov	r2, r5
 8007002:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007006:	f7f9 fd69 	bl	8000adc <__aeabi_dcmplt>
 800700a:	bb38      	cbnz	r0, 800705c <_dtoa_r+0x48c>
 800700c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007010:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007014:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007016:	2b00      	cmp	r3, #0
 8007018:	f2c0 8157 	blt.w	80072ca <_dtoa_r+0x6fa>
 800701c:	2f0e      	cmp	r7, #14
 800701e:	f300 8154 	bgt.w	80072ca <_dtoa_r+0x6fa>
 8007022:	4b4b      	ldr	r3, [pc, #300]	@ (8007150 <_dtoa_r+0x580>)
 8007024:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007028:	ed93 7b00 	vldr	d7, [r3]
 800702c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800702e:	2b00      	cmp	r3, #0
 8007030:	ed8d 7b00 	vstr	d7, [sp]
 8007034:	f280 80e5 	bge.w	8007202 <_dtoa_r+0x632>
 8007038:	9b03      	ldr	r3, [sp, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	f300 80e1 	bgt.w	8007202 <_dtoa_r+0x632>
 8007040:	d10c      	bne.n	800705c <_dtoa_r+0x48c>
 8007042:	4b48      	ldr	r3, [pc, #288]	@ (8007164 <_dtoa_r+0x594>)
 8007044:	2200      	movs	r2, #0
 8007046:	ec51 0b17 	vmov	r0, r1, d7
 800704a:	f7f9 fad5 	bl	80005f8 <__aeabi_dmul>
 800704e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007052:	f7f9 fd57 	bl	8000b04 <__aeabi_dcmpge>
 8007056:	2800      	cmp	r0, #0
 8007058:	f000 8266 	beq.w	8007528 <_dtoa_r+0x958>
 800705c:	2400      	movs	r4, #0
 800705e:	4625      	mov	r5, r4
 8007060:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007062:	4656      	mov	r6, sl
 8007064:	ea6f 0803 	mvn.w	r8, r3
 8007068:	2700      	movs	r7, #0
 800706a:	4621      	mov	r1, r4
 800706c:	4648      	mov	r0, r9
 800706e:	f000 fe79 	bl	8007d64 <_Bfree>
 8007072:	2d00      	cmp	r5, #0
 8007074:	f000 80bd 	beq.w	80071f2 <_dtoa_r+0x622>
 8007078:	b12f      	cbz	r7, 8007086 <_dtoa_r+0x4b6>
 800707a:	42af      	cmp	r7, r5
 800707c:	d003      	beq.n	8007086 <_dtoa_r+0x4b6>
 800707e:	4639      	mov	r1, r7
 8007080:	4648      	mov	r0, r9
 8007082:	f000 fe6f 	bl	8007d64 <_Bfree>
 8007086:	4629      	mov	r1, r5
 8007088:	4648      	mov	r0, r9
 800708a:	f000 fe6b 	bl	8007d64 <_Bfree>
 800708e:	e0b0      	b.n	80071f2 <_dtoa_r+0x622>
 8007090:	07e2      	lsls	r2, r4, #31
 8007092:	d505      	bpl.n	80070a0 <_dtoa_r+0x4d0>
 8007094:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007098:	f7f9 faae 	bl	80005f8 <__aeabi_dmul>
 800709c:	3601      	adds	r6, #1
 800709e:	2301      	movs	r3, #1
 80070a0:	1064      	asrs	r4, r4, #1
 80070a2:	3508      	adds	r5, #8
 80070a4:	e762      	b.n	8006f6c <_dtoa_r+0x39c>
 80070a6:	2602      	movs	r6, #2
 80070a8:	e765      	b.n	8006f76 <_dtoa_r+0x3a6>
 80070aa:	9c03      	ldr	r4, [sp, #12]
 80070ac:	46b8      	mov	r8, r7
 80070ae:	e784      	b.n	8006fba <_dtoa_r+0x3ea>
 80070b0:	4b27      	ldr	r3, [pc, #156]	@ (8007150 <_dtoa_r+0x580>)
 80070b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80070b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070bc:	4454      	add	r4, sl
 80070be:	2900      	cmp	r1, #0
 80070c0:	d054      	beq.n	800716c <_dtoa_r+0x59c>
 80070c2:	4929      	ldr	r1, [pc, #164]	@ (8007168 <_dtoa_r+0x598>)
 80070c4:	2000      	movs	r0, #0
 80070c6:	f7f9 fbc1 	bl	800084c <__aeabi_ddiv>
 80070ca:	4633      	mov	r3, r6
 80070cc:	462a      	mov	r2, r5
 80070ce:	f7f9 f8db 	bl	8000288 <__aeabi_dsub>
 80070d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80070d6:	4656      	mov	r6, sl
 80070d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070dc:	f7f9 fd3c 	bl	8000b58 <__aeabi_d2iz>
 80070e0:	4605      	mov	r5, r0
 80070e2:	f7f9 fa1f 	bl	8000524 <__aeabi_i2d>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070ee:	f7f9 f8cb 	bl	8000288 <__aeabi_dsub>
 80070f2:	3530      	adds	r5, #48	@ 0x30
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070fc:	f806 5b01 	strb.w	r5, [r6], #1
 8007100:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007104:	f7f9 fcea 	bl	8000adc <__aeabi_dcmplt>
 8007108:	2800      	cmp	r0, #0
 800710a:	d172      	bne.n	80071f2 <_dtoa_r+0x622>
 800710c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007110:	4911      	ldr	r1, [pc, #68]	@ (8007158 <_dtoa_r+0x588>)
 8007112:	2000      	movs	r0, #0
 8007114:	f7f9 f8b8 	bl	8000288 <__aeabi_dsub>
 8007118:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800711c:	f7f9 fcde 	bl	8000adc <__aeabi_dcmplt>
 8007120:	2800      	cmp	r0, #0
 8007122:	f040 80b4 	bne.w	800728e <_dtoa_r+0x6be>
 8007126:	42a6      	cmp	r6, r4
 8007128:	f43f af70 	beq.w	800700c <_dtoa_r+0x43c>
 800712c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007130:	4b0a      	ldr	r3, [pc, #40]	@ (800715c <_dtoa_r+0x58c>)
 8007132:	2200      	movs	r2, #0
 8007134:	f7f9 fa60 	bl	80005f8 <__aeabi_dmul>
 8007138:	4b08      	ldr	r3, [pc, #32]	@ (800715c <_dtoa_r+0x58c>)
 800713a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800713e:	2200      	movs	r2, #0
 8007140:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007144:	f7f9 fa58 	bl	80005f8 <__aeabi_dmul>
 8007148:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800714c:	e7c4      	b.n	80070d8 <_dtoa_r+0x508>
 800714e:	bf00      	nop
 8007150:	08008ec8 	.word	0x08008ec8
 8007154:	08008ea0 	.word	0x08008ea0
 8007158:	3ff00000 	.word	0x3ff00000
 800715c:	40240000 	.word	0x40240000
 8007160:	401c0000 	.word	0x401c0000
 8007164:	40140000 	.word	0x40140000
 8007168:	3fe00000 	.word	0x3fe00000
 800716c:	4631      	mov	r1, r6
 800716e:	4628      	mov	r0, r5
 8007170:	f7f9 fa42 	bl	80005f8 <__aeabi_dmul>
 8007174:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007178:	9413      	str	r4, [sp, #76]	@ 0x4c
 800717a:	4656      	mov	r6, sl
 800717c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007180:	f7f9 fcea 	bl	8000b58 <__aeabi_d2iz>
 8007184:	4605      	mov	r5, r0
 8007186:	f7f9 f9cd 	bl	8000524 <__aeabi_i2d>
 800718a:	4602      	mov	r2, r0
 800718c:	460b      	mov	r3, r1
 800718e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007192:	f7f9 f879 	bl	8000288 <__aeabi_dsub>
 8007196:	3530      	adds	r5, #48	@ 0x30
 8007198:	f806 5b01 	strb.w	r5, [r6], #1
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	42a6      	cmp	r6, r4
 80071a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071a6:	f04f 0200 	mov.w	r2, #0
 80071aa:	d124      	bne.n	80071f6 <_dtoa_r+0x626>
 80071ac:	4baf      	ldr	r3, [pc, #700]	@ (800746c <_dtoa_r+0x89c>)
 80071ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80071b2:	f7f9 f86b 	bl	800028c <__adddf3>
 80071b6:	4602      	mov	r2, r0
 80071b8:	460b      	mov	r3, r1
 80071ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071be:	f7f9 fcab 	bl	8000b18 <__aeabi_dcmpgt>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d163      	bne.n	800728e <_dtoa_r+0x6be>
 80071c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80071ca:	49a8      	ldr	r1, [pc, #672]	@ (800746c <_dtoa_r+0x89c>)
 80071cc:	2000      	movs	r0, #0
 80071ce:	f7f9 f85b 	bl	8000288 <__aeabi_dsub>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071da:	f7f9 fc7f 	bl	8000adc <__aeabi_dcmplt>
 80071de:	2800      	cmp	r0, #0
 80071e0:	f43f af14 	beq.w	800700c <_dtoa_r+0x43c>
 80071e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80071e6:	1e73      	subs	r3, r6, #1
 80071e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80071ee:	2b30      	cmp	r3, #48	@ 0x30
 80071f0:	d0f8      	beq.n	80071e4 <_dtoa_r+0x614>
 80071f2:	4647      	mov	r7, r8
 80071f4:	e03b      	b.n	800726e <_dtoa_r+0x69e>
 80071f6:	4b9e      	ldr	r3, [pc, #632]	@ (8007470 <_dtoa_r+0x8a0>)
 80071f8:	f7f9 f9fe 	bl	80005f8 <__aeabi_dmul>
 80071fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007200:	e7bc      	b.n	800717c <_dtoa_r+0x5ac>
 8007202:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007206:	4656      	mov	r6, sl
 8007208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800720c:	4620      	mov	r0, r4
 800720e:	4629      	mov	r1, r5
 8007210:	f7f9 fb1c 	bl	800084c <__aeabi_ddiv>
 8007214:	f7f9 fca0 	bl	8000b58 <__aeabi_d2iz>
 8007218:	4680      	mov	r8, r0
 800721a:	f7f9 f983 	bl	8000524 <__aeabi_i2d>
 800721e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007222:	f7f9 f9e9 	bl	80005f8 <__aeabi_dmul>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4620      	mov	r0, r4
 800722c:	4629      	mov	r1, r5
 800722e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007232:	f7f9 f829 	bl	8000288 <__aeabi_dsub>
 8007236:	f806 4b01 	strb.w	r4, [r6], #1
 800723a:	9d03      	ldr	r5, [sp, #12]
 800723c:	eba6 040a 	sub.w	r4, r6, sl
 8007240:	42a5      	cmp	r5, r4
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	d133      	bne.n	80072b0 <_dtoa_r+0x6e0>
 8007248:	f7f9 f820 	bl	800028c <__adddf3>
 800724c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007250:	4604      	mov	r4, r0
 8007252:	460d      	mov	r5, r1
 8007254:	f7f9 fc60 	bl	8000b18 <__aeabi_dcmpgt>
 8007258:	b9c0      	cbnz	r0, 800728c <_dtoa_r+0x6bc>
 800725a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800725e:	4620      	mov	r0, r4
 8007260:	4629      	mov	r1, r5
 8007262:	f7f9 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8007266:	b110      	cbz	r0, 800726e <_dtoa_r+0x69e>
 8007268:	f018 0f01 	tst.w	r8, #1
 800726c:	d10e      	bne.n	800728c <_dtoa_r+0x6bc>
 800726e:	9902      	ldr	r1, [sp, #8]
 8007270:	4648      	mov	r0, r9
 8007272:	f000 fd77 	bl	8007d64 <_Bfree>
 8007276:	2300      	movs	r3, #0
 8007278:	7033      	strb	r3, [r6, #0]
 800727a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800727c:	3701      	adds	r7, #1
 800727e:	601f      	str	r7, [r3, #0]
 8007280:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 824b 	beq.w	800771e <_dtoa_r+0xb4e>
 8007288:	601e      	str	r6, [r3, #0]
 800728a:	e248      	b.n	800771e <_dtoa_r+0xb4e>
 800728c:	46b8      	mov	r8, r7
 800728e:	4633      	mov	r3, r6
 8007290:	461e      	mov	r6, r3
 8007292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007296:	2a39      	cmp	r2, #57	@ 0x39
 8007298:	d106      	bne.n	80072a8 <_dtoa_r+0x6d8>
 800729a:	459a      	cmp	sl, r3
 800729c:	d1f8      	bne.n	8007290 <_dtoa_r+0x6c0>
 800729e:	2230      	movs	r2, #48	@ 0x30
 80072a0:	f108 0801 	add.w	r8, r8, #1
 80072a4:	f88a 2000 	strb.w	r2, [sl]
 80072a8:	781a      	ldrb	r2, [r3, #0]
 80072aa:	3201      	adds	r2, #1
 80072ac:	701a      	strb	r2, [r3, #0]
 80072ae:	e7a0      	b.n	80071f2 <_dtoa_r+0x622>
 80072b0:	4b6f      	ldr	r3, [pc, #444]	@ (8007470 <_dtoa_r+0x8a0>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	f7f9 f9a0 	bl	80005f8 <__aeabi_dmul>
 80072b8:	2200      	movs	r2, #0
 80072ba:	2300      	movs	r3, #0
 80072bc:	4604      	mov	r4, r0
 80072be:	460d      	mov	r5, r1
 80072c0:	f7f9 fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d09f      	beq.n	8007208 <_dtoa_r+0x638>
 80072c8:	e7d1      	b.n	800726e <_dtoa_r+0x69e>
 80072ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072cc:	2a00      	cmp	r2, #0
 80072ce:	f000 80ea 	beq.w	80074a6 <_dtoa_r+0x8d6>
 80072d2:	9a07      	ldr	r2, [sp, #28]
 80072d4:	2a01      	cmp	r2, #1
 80072d6:	f300 80cd 	bgt.w	8007474 <_dtoa_r+0x8a4>
 80072da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80072dc:	2a00      	cmp	r2, #0
 80072de:	f000 80c1 	beq.w	8007464 <_dtoa_r+0x894>
 80072e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80072e6:	9c08      	ldr	r4, [sp, #32]
 80072e8:	9e00      	ldr	r6, [sp, #0]
 80072ea:	9a00      	ldr	r2, [sp, #0]
 80072ec:	441a      	add	r2, r3
 80072ee:	9200      	str	r2, [sp, #0]
 80072f0:	9a06      	ldr	r2, [sp, #24]
 80072f2:	2101      	movs	r1, #1
 80072f4:	441a      	add	r2, r3
 80072f6:	4648      	mov	r0, r9
 80072f8:	9206      	str	r2, [sp, #24]
 80072fa:	f000 fde7 	bl	8007ecc <__i2b>
 80072fe:	4605      	mov	r5, r0
 8007300:	b166      	cbz	r6, 800731c <_dtoa_r+0x74c>
 8007302:	9b06      	ldr	r3, [sp, #24]
 8007304:	2b00      	cmp	r3, #0
 8007306:	dd09      	ble.n	800731c <_dtoa_r+0x74c>
 8007308:	42b3      	cmp	r3, r6
 800730a:	9a00      	ldr	r2, [sp, #0]
 800730c:	bfa8      	it	ge
 800730e:	4633      	movge	r3, r6
 8007310:	1ad2      	subs	r2, r2, r3
 8007312:	9200      	str	r2, [sp, #0]
 8007314:	9a06      	ldr	r2, [sp, #24]
 8007316:	1af6      	subs	r6, r6, r3
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	9306      	str	r3, [sp, #24]
 800731c:	9b08      	ldr	r3, [sp, #32]
 800731e:	b30b      	cbz	r3, 8007364 <_dtoa_r+0x794>
 8007320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	f000 80c6 	beq.w	80074b4 <_dtoa_r+0x8e4>
 8007328:	2c00      	cmp	r4, #0
 800732a:	f000 80c0 	beq.w	80074ae <_dtoa_r+0x8de>
 800732e:	4629      	mov	r1, r5
 8007330:	4622      	mov	r2, r4
 8007332:	4648      	mov	r0, r9
 8007334:	f000 fe82 	bl	800803c <__pow5mult>
 8007338:	9a02      	ldr	r2, [sp, #8]
 800733a:	4601      	mov	r1, r0
 800733c:	4605      	mov	r5, r0
 800733e:	4648      	mov	r0, r9
 8007340:	f000 fdda 	bl	8007ef8 <__multiply>
 8007344:	9902      	ldr	r1, [sp, #8]
 8007346:	4680      	mov	r8, r0
 8007348:	4648      	mov	r0, r9
 800734a:	f000 fd0b 	bl	8007d64 <_Bfree>
 800734e:	9b08      	ldr	r3, [sp, #32]
 8007350:	1b1b      	subs	r3, r3, r4
 8007352:	9308      	str	r3, [sp, #32]
 8007354:	f000 80b1 	beq.w	80074ba <_dtoa_r+0x8ea>
 8007358:	9a08      	ldr	r2, [sp, #32]
 800735a:	4641      	mov	r1, r8
 800735c:	4648      	mov	r0, r9
 800735e:	f000 fe6d 	bl	800803c <__pow5mult>
 8007362:	9002      	str	r0, [sp, #8]
 8007364:	2101      	movs	r1, #1
 8007366:	4648      	mov	r0, r9
 8007368:	f000 fdb0 	bl	8007ecc <__i2b>
 800736c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800736e:	4604      	mov	r4, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 81d8 	beq.w	8007726 <_dtoa_r+0xb56>
 8007376:	461a      	mov	r2, r3
 8007378:	4601      	mov	r1, r0
 800737a:	4648      	mov	r0, r9
 800737c:	f000 fe5e 	bl	800803c <__pow5mult>
 8007380:	9b07      	ldr	r3, [sp, #28]
 8007382:	2b01      	cmp	r3, #1
 8007384:	4604      	mov	r4, r0
 8007386:	f300 809f 	bgt.w	80074c8 <_dtoa_r+0x8f8>
 800738a:	9b04      	ldr	r3, [sp, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f040 8097 	bne.w	80074c0 <_dtoa_r+0x8f0>
 8007392:	9b05      	ldr	r3, [sp, #20]
 8007394:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007398:	2b00      	cmp	r3, #0
 800739a:	f040 8093 	bne.w	80074c4 <_dtoa_r+0x8f4>
 800739e:	9b05      	ldr	r3, [sp, #20]
 80073a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073a4:	0d1b      	lsrs	r3, r3, #20
 80073a6:	051b      	lsls	r3, r3, #20
 80073a8:	b133      	cbz	r3, 80073b8 <_dtoa_r+0x7e8>
 80073aa:	9b00      	ldr	r3, [sp, #0]
 80073ac:	3301      	adds	r3, #1
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	9b06      	ldr	r3, [sp, #24]
 80073b2:	3301      	adds	r3, #1
 80073b4:	9306      	str	r3, [sp, #24]
 80073b6:	2301      	movs	r3, #1
 80073b8:	9308      	str	r3, [sp, #32]
 80073ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 81b8 	beq.w	8007732 <_dtoa_r+0xb62>
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073c8:	6918      	ldr	r0, [r3, #16]
 80073ca:	f000 fd33 	bl	8007e34 <__hi0bits>
 80073ce:	f1c0 0020 	rsb	r0, r0, #32
 80073d2:	9b06      	ldr	r3, [sp, #24]
 80073d4:	4418      	add	r0, r3
 80073d6:	f010 001f 	ands.w	r0, r0, #31
 80073da:	f000 8082 	beq.w	80074e2 <_dtoa_r+0x912>
 80073de:	f1c0 0320 	rsb	r3, r0, #32
 80073e2:	2b04      	cmp	r3, #4
 80073e4:	dd73      	ble.n	80074ce <_dtoa_r+0x8fe>
 80073e6:	9b00      	ldr	r3, [sp, #0]
 80073e8:	f1c0 001c 	rsb	r0, r0, #28
 80073ec:	4403      	add	r3, r0
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	9b06      	ldr	r3, [sp, #24]
 80073f2:	4403      	add	r3, r0
 80073f4:	4406      	add	r6, r0
 80073f6:	9306      	str	r3, [sp, #24]
 80073f8:	9b00      	ldr	r3, [sp, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	dd05      	ble.n	800740a <_dtoa_r+0x83a>
 80073fe:	9902      	ldr	r1, [sp, #8]
 8007400:	461a      	mov	r2, r3
 8007402:	4648      	mov	r0, r9
 8007404:	f000 fe74 	bl	80080f0 <__lshift>
 8007408:	9002      	str	r0, [sp, #8]
 800740a:	9b06      	ldr	r3, [sp, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	dd05      	ble.n	800741c <_dtoa_r+0x84c>
 8007410:	4621      	mov	r1, r4
 8007412:	461a      	mov	r2, r3
 8007414:	4648      	mov	r0, r9
 8007416:	f000 fe6b 	bl	80080f0 <__lshift>
 800741a:	4604      	mov	r4, r0
 800741c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	d061      	beq.n	80074e6 <_dtoa_r+0x916>
 8007422:	9802      	ldr	r0, [sp, #8]
 8007424:	4621      	mov	r1, r4
 8007426:	f000 fecf 	bl	80081c8 <__mcmp>
 800742a:	2800      	cmp	r0, #0
 800742c:	da5b      	bge.n	80074e6 <_dtoa_r+0x916>
 800742e:	2300      	movs	r3, #0
 8007430:	9902      	ldr	r1, [sp, #8]
 8007432:	220a      	movs	r2, #10
 8007434:	4648      	mov	r0, r9
 8007436:	f000 fcb7 	bl	8007da8 <__multadd>
 800743a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800743c:	9002      	str	r0, [sp, #8]
 800743e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 8177 	beq.w	8007736 <_dtoa_r+0xb66>
 8007448:	4629      	mov	r1, r5
 800744a:	2300      	movs	r3, #0
 800744c:	220a      	movs	r2, #10
 800744e:	4648      	mov	r0, r9
 8007450:	f000 fcaa 	bl	8007da8 <__multadd>
 8007454:	f1bb 0f00 	cmp.w	fp, #0
 8007458:	4605      	mov	r5, r0
 800745a:	dc6f      	bgt.n	800753c <_dtoa_r+0x96c>
 800745c:	9b07      	ldr	r3, [sp, #28]
 800745e:	2b02      	cmp	r3, #2
 8007460:	dc49      	bgt.n	80074f6 <_dtoa_r+0x926>
 8007462:	e06b      	b.n	800753c <_dtoa_r+0x96c>
 8007464:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007466:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800746a:	e73c      	b.n	80072e6 <_dtoa_r+0x716>
 800746c:	3fe00000 	.word	0x3fe00000
 8007470:	40240000 	.word	0x40240000
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	1e5c      	subs	r4, r3, #1
 8007478:	9b08      	ldr	r3, [sp, #32]
 800747a:	42a3      	cmp	r3, r4
 800747c:	db09      	blt.n	8007492 <_dtoa_r+0x8c2>
 800747e:	1b1c      	subs	r4, r3, r4
 8007480:	9b03      	ldr	r3, [sp, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f6bf af30 	bge.w	80072e8 <_dtoa_r+0x718>
 8007488:	9b00      	ldr	r3, [sp, #0]
 800748a:	9a03      	ldr	r2, [sp, #12]
 800748c:	1a9e      	subs	r6, r3, r2
 800748e:	2300      	movs	r3, #0
 8007490:	e72b      	b.n	80072ea <_dtoa_r+0x71a>
 8007492:	9b08      	ldr	r3, [sp, #32]
 8007494:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007496:	9408      	str	r4, [sp, #32]
 8007498:	1ae3      	subs	r3, r4, r3
 800749a:	441a      	add	r2, r3
 800749c:	9e00      	ldr	r6, [sp, #0]
 800749e:	9b03      	ldr	r3, [sp, #12]
 80074a0:	920d      	str	r2, [sp, #52]	@ 0x34
 80074a2:	2400      	movs	r4, #0
 80074a4:	e721      	b.n	80072ea <_dtoa_r+0x71a>
 80074a6:	9c08      	ldr	r4, [sp, #32]
 80074a8:	9e00      	ldr	r6, [sp, #0]
 80074aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80074ac:	e728      	b.n	8007300 <_dtoa_r+0x730>
 80074ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80074b2:	e751      	b.n	8007358 <_dtoa_r+0x788>
 80074b4:	9a08      	ldr	r2, [sp, #32]
 80074b6:	9902      	ldr	r1, [sp, #8]
 80074b8:	e750      	b.n	800735c <_dtoa_r+0x78c>
 80074ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80074be:	e751      	b.n	8007364 <_dtoa_r+0x794>
 80074c0:	2300      	movs	r3, #0
 80074c2:	e779      	b.n	80073b8 <_dtoa_r+0x7e8>
 80074c4:	9b04      	ldr	r3, [sp, #16]
 80074c6:	e777      	b.n	80073b8 <_dtoa_r+0x7e8>
 80074c8:	2300      	movs	r3, #0
 80074ca:	9308      	str	r3, [sp, #32]
 80074cc:	e779      	b.n	80073c2 <_dtoa_r+0x7f2>
 80074ce:	d093      	beq.n	80073f8 <_dtoa_r+0x828>
 80074d0:	9a00      	ldr	r2, [sp, #0]
 80074d2:	331c      	adds	r3, #28
 80074d4:	441a      	add	r2, r3
 80074d6:	9200      	str	r2, [sp, #0]
 80074d8:	9a06      	ldr	r2, [sp, #24]
 80074da:	441a      	add	r2, r3
 80074dc:	441e      	add	r6, r3
 80074de:	9206      	str	r2, [sp, #24]
 80074e0:	e78a      	b.n	80073f8 <_dtoa_r+0x828>
 80074e2:	4603      	mov	r3, r0
 80074e4:	e7f4      	b.n	80074d0 <_dtoa_r+0x900>
 80074e6:	9b03      	ldr	r3, [sp, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	46b8      	mov	r8, r7
 80074ec:	dc20      	bgt.n	8007530 <_dtoa_r+0x960>
 80074ee:	469b      	mov	fp, r3
 80074f0:	9b07      	ldr	r3, [sp, #28]
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	dd1e      	ble.n	8007534 <_dtoa_r+0x964>
 80074f6:	f1bb 0f00 	cmp.w	fp, #0
 80074fa:	f47f adb1 	bne.w	8007060 <_dtoa_r+0x490>
 80074fe:	4621      	mov	r1, r4
 8007500:	465b      	mov	r3, fp
 8007502:	2205      	movs	r2, #5
 8007504:	4648      	mov	r0, r9
 8007506:	f000 fc4f 	bl	8007da8 <__multadd>
 800750a:	4601      	mov	r1, r0
 800750c:	4604      	mov	r4, r0
 800750e:	9802      	ldr	r0, [sp, #8]
 8007510:	f000 fe5a 	bl	80081c8 <__mcmp>
 8007514:	2800      	cmp	r0, #0
 8007516:	f77f ada3 	ble.w	8007060 <_dtoa_r+0x490>
 800751a:	4656      	mov	r6, sl
 800751c:	2331      	movs	r3, #49	@ 0x31
 800751e:	f806 3b01 	strb.w	r3, [r6], #1
 8007522:	f108 0801 	add.w	r8, r8, #1
 8007526:	e59f      	b.n	8007068 <_dtoa_r+0x498>
 8007528:	9c03      	ldr	r4, [sp, #12]
 800752a:	46b8      	mov	r8, r7
 800752c:	4625      	mov	r5, r4
 800752e:	e7f4      	b.n	800751a <_dtoa_r+0x94a>
 8007530:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 8101 	beq.w	800773e <_dtoa_r+0xb6e>
 800753c:	2e00      	cmp	r6, #0
 800753e:	dd05      	ble.n	800754c <_dtoa_r+0x97c>
 8007540:	4629      	mov	r1, r5
 8007542:	4632      	mov	r2, r6
 8007544:	4648      	mov	r0, r9
 8007546:	f000 fdd3 	bl	80080f0 <__lshift>
 800754a:	4605      	mov	r5, r0
 800754c:	9b08      	ldr	r3, [sp, #32]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d05c      	beq.n	800760c <_dtoa_r+0xa3c>
 8007552:	6869      	ldr	r1, [r5, #4]
 8007554:	4648      	mov	r0, r9
 8007556:	f000 fbc5 	bl	8007ce4 <_Balloc>
 800755a:	4606      	mov	r6, r0
 800755c:	b928      	cbnz	r0, 800756a <_dtoa_r+0x99a>
 800755e:	4b82      	ldr	r3, [pc, #520]	@ (8007768 <_dtoa_r+0xb98>)
 8007560:	4602      	mov	r2, r0
 8007562:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007566:	f7ff bb4a 	b.w	8006bfe <_dtoa_r+0x2e>
 800756a:	692a      	ldr	r2, [r5, #16]
 800756c:	3202      	adds	r2, #2
 800756e:	0092      	lsls	r2, r2, #2
 8007570:	f105 010c 	add.w	r1, r5, #12
 8007574:	300c      	adds	r0, #12
 8007576:	f001 f811 	bl	800859c <memcpy>
 800757a:	2201      	movs	r2, #1
 800757c:	4631      	mov	r1, r6
 800757e:	4648      	mov	r0, r9
 8007580:	f000 fdb6 	bl	80080f0 <__lshift>
 8007584:	f10a 0301 	add.w	r3, sl, #1
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	eb0a 030b 	add.w	r3, sl, fp
 800758e:	9308      	str	r3, [sp, #32]
 8007590:	9b04      	ldr	r3, [sp, #16]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	462f      	mov	r7, r5
 8007598:	9306      	str	r3, [sp, #24]
 800759a:	4605      	mov	r5, r0
 800759c:	9b00      	ldr	r3, [sp, #0]
 800759e:	9802      	ldr	r0, [sp, #8]
 80075a0:	4621      	mov	r1, r4
 80075a2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80075a6:	f7ff fa89 	bl	8006abc <quorem>
 80075aa:	4603      	mov	r3, r0
 80075ac:	3330      	adds	r3, #48	@ 0x30
 80075ae:	9003      	str	r0, [sp, #12]
 80075b0:	4639      	mov	r1, r7
 80075b2:	9802      	ldr	r0, [sp, #8]
 80075b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075b6:	f000 fe07 	bl	80081c8 <__mcmp>
 80075ba:	462a      	mov	r2, r5
 80075bc:	9004      	str	r0, [sp, #16]
 80075be:	4621      	mov	r1, r4
 80075c0:	4648      	mov	r0, r9
 80075c2:	f000 fe1d 	bl	8008200 <__mdiff>
 80075c6:	68c2      	ldr	r2, [r0, #12]
 80075c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ca:	4606      	mov	r6, r0
 80075cc:	bb02      	cbnz	r2, 8007610 <_dtoa_r+0xa40>
 80075ce:	4601      	mov	r1, r0
 80075d0:	9802      	ldr	r0, [sp, #8]
 80075d2:	f000 fdf9 	bl	80081c8 <__mcmp>
 80075d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d8:	4602      	mov	r2, r0
 80075da:	4631      	mov	r1, r6
 80075dc:	4648      	mov	r0, r9
 80075de:	920c      	str	r2, [sp, #48]	@ 0x30
 80075e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80075e2:	f000 fbbf 	bl	8007d64 <_Bfree>
 80075e6:	9b07      	ldr	r3, [sp, #28]
 80075e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075ea:	9e00      	ldr	r6, [sp, #0]
 80075ec:	ea42 0103 	orr.w	r1, r2, r3
 80075f0:	9b06      	ldr	r3, [sp, #24]
 80075f2:	4319      	orrs	r1, r3
 80075f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f6:	d10d      	bne.n	8007614 <_dtoa_r+0xa44>
 80075f8:	2b39      	cmp	r3, #57	@ 0x39
 80075fa:	d027      	beq.n	800764c <_dtoa_r+0xa7c>
 80075fc:	9a04      	ldr	r2, [sp, #16]
 80075fe:	2a00      	cmp	r2, #0
 8007600:	dd01      	ble.n	8007606 <_dtoa_r+0xa36>
 8007602:	9b03      	ldr	r3, [sp, #12]
 8007604:	3331      	adds	r3, #49	@ 0x31
 8007606:	f88b 3000 	strb.w	r3, [fp]
 800760a:	e52e      	b.n	800706a <_dtoa_r+0x49a>
 800760c:	4628      	mov	r0, r5
 800760e:	e7b9      	b.n	8007584 <_dtoa_r+0x9b4>
 8007610:	2201      	movs	r2, #1
 8007612:	e7e2      	b.n	80075da <_dtoa_r+0xa0a>
 8007614:	9904      	ldr	r1, [sp, #16]
 8007616:	2900      	cmp	r1, #0
 8007618:	db04      	blt.n	8007624 <_dtoa_r+0xa54>
 800761a:	9807      	ldr	r0, [sp, #28]
 800761c:	4301      	orrs	r1, r0
 800761e:	9806      	ldr	r0, [sp, #24]
 8007620:	4301      	orrs	r1, r0
 8007622:	d120      	bne.n	8007666 <_dtoa_r+0xa96>
 8007624:	2a00      	cmp	r2, #0
 8007626:	ddee      	ble.n	8007606 <_dtoa_r+0xa36>
 8007628:	9902      	ldr	r1, [sp, #8]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	2201      	movs	r2, #1
 800762e:	4648      	mov	r0, r9
 8007630:	f000 fd5e 	bl	80080f0 <__lshift>
 8007634:	4621      	mov	r1, r4
 8007636:	9002      	str	r0, [sp, #8]
 8007638:	f000 fdc6 	bl	80081c8 <__mcmp>
 800763c:	2800      	cmp	r0, #0
 800763e:	9b00      	ldr	r3, [sp, #0]
 8007640:	dc02      	bgt.n	8007648 <_dtoa_r+0xa78>
 8007642:	d1e0      	bne.n	8007606 <_dtoa_r+0xa36>
 8007644:	07da      	lsls	r2, r3, #31
 8007646:	d5de      	bpl.n	8007606 <_dtoa_r+0xa36>
 8007648:	2b39      	cmp	r3, #57	@ 0x39
 800764a:	d1da      	bne.n	8007602 <_dtoa_r+0xa32>
 800764c:	2339      	movs	r3, #57	@ 0x39
 800764e:	f88b 3000 	strb.w	r3, [fp]
 8007652:	4633      	mov	r3, r6
 8007654:	461e      	mov	r6, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800765c:	2a39      	cmp	r2, #57	@ 0x39
 800765e:	d04e      	beq.n	80076fe <_dtoa_r+0xb2e>
 8007660:	3201      	adds	r2, #1
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	e501      	b.n	800706a <_dtoa_r+0x49a>
 8007666:	2a00      	cmp	r2, #0
 8007668:	dd03      	ble.n	8007672 <_dtoa_r+0xaa2>
 800766a:	2b39      	cmp	r3, #57	@ 0x39
 800766c:	d0ee      	beq.n	800764c <_dtoa_r+0xa7c>
 800766e:	3301      	adds	r3, #1
 8007670:	e7c9      	b.n	8007606 <_dtoa_r+0xa36>
 8007672:	9a00      	ldr	r2, [sp, #0]
 8007674:	9908      	ldr	r1, [sp, #32]
 8007676:	f802 3c01 	strb.w	r3, [r2, #-1]
 800767a:	428a      	cmp	r2, r1
 800767c:	d028      	beq.n	80076d0 <_dtoa_r+0xb00>
 800767e:	9902      	ldr	r1, [sp, #8]
 8007680:	2300      	movs	r3, #0
 8007682:	220a      	movs	r2, #10
 8007684:	4648      	mov	r0, r9
 8007686:	f000 fb8f 	bl	8007da8 <__multadd>
 800768a:	42af      	cmp	r7, r5
 800768c:	9002      	str	r0, [sp, #8]
 800768e:	f04f 0300 	mov.w	r3, #0
 8007692:	f04f 020a 	mov.w	r2, #10
 8007696:	4639      	mov	r1, r7
 8007698:	4648      	mov	r0, r9
 800769a:	d107      	bne.n	80076ac <_dtoa_r+0xadc>
 800769c:	f000 fb84 	bl	8007da8 <__multadd>
 80076a0:	4607      	mov	r7, r0
 80076a2:	4605      	mov	r5, r0
 80076a4:	9b00      	ldr	r3, [sp, #0]
 80076a6:	3301      	adds	r3, #1
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	e777      	b.n	800759c <_dtoa_r+0x9cc>
 80076ac:	f000 fb7c 	bl	8007da8 <__multadd>
 80076b0:	4629      	mov	r1, r5
 80076b2:	4607      	mov	r7, r0
 80076b4:	2300      	movs	r3, #0
 80076b6:	220a      	movs	r2, #10
 80076b8:	4648      	mov	r0, r9
 80076ba:	f000 fb75 	bl	8007da8 <__multadd>
 80076be:	4605      	mov	r5, r0
 80076c0:	e7f0      	b.n	80076a4 <_dtoa_r+0xad4>
 80076c2:	f1bb 0f00 	cmp.w	fp, #0
 80076c6:	bfcc      	ite	gt
 80076c8:	465e      	movgt	r6, fp
 80076ca:	2601      	movle	r6, #1
 80076cc:	4456      	add	r6, sl
 80076ce:	2700      	movs	r7, #0
 80076d0:	9902      	ldr	r1, [sp, #8]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	2201      	movs	r2, #1
 80076d6:	4648      	mov	r0, r9
 80076d8:	f000 fd0a 	bl	80080f0 <__lshift>
 80076dc:	4621      	mov	r1, r4
 80076de:	9002      	str	r0, [sp, #8]
 80076e0:	f000 fd72 	bl	80081c8 <__mcmp>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	dcb4      	bgt.n	8007652 <_dtoa_r+0xa82>
 80076e8:	d102      	bne.n	80076f0 <_dtoa_r+0xb20>
 80076ea:	9b00      	ldr	r3, [sp, #0]
 80076ec:	07db      	lsls	r3, r3, #31
 80076ee:	d4b0      	bmi.n	8007652 <_dtoa_r+0xa82>
 80076f0:	4633      	mov	r3, r6
 80076f2:	461e      	mov	r6, r3
 80076f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076f8:	2a30      	cmp	r2, #48	@ 0x30
 80076fa:	d0fa      	beq.n	80076f2 <_dtoa_r+0xb22>
 80076fc:	e4b5      	b.n	800706a <_dtoa_r+0x49a>
 80076fe:	459a      	cmp	sl, r3
 8007700:	d1a8      	bne.n	8007654 <_dtoa_r+0xa84>
 8007702:	2331      	movs	r3, #49	@ 0x31
 8007704:	f108 0801 	add.w	r8, r8, #1
 8007708:	f88a 3000 	strb.w	r3, [sl]
 800770c:	e4ad      	b.n	800706a <_dtoa_r+0x49a>
 800770e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007710:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800776c <_dtoa_r+0xb9c>
 8007714:	b11b      	cbz	r3, 800771e <_dtoa_r+0xb4e>
 8007716:	f10a 0308 	add.w	r3, sl, #8
 800771a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	4650      	mov	r0, sl
 8007720:	b017      	add	sp, #92	@ 0x5c
 8007722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007726:	9b07      	ldr	r3, [sp, #28]
 8007728:	2b01      	cmp	r3, #1
 800772a:	f77f ae2e 	ble.w	800738a <_dtoa_r+0x7ba>
 800772e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007730:	9308      	str	r3, [sp, #32]
 8007732:	2001      	movs	r0, #1
 8007734:	e64d      	b.n	80073d2 <_dtoa_r+0x802>
 8007736:	f1bb 0f00 	cmp.w	fp, #0
 800773a:	f77f aed9 	ble.w	80074f0 <_dtoa_r+0x920>
 800773e:	4656      	mov	r6, sl
 8007740:	9802      	ldr	r0, [sp, #8]
 8007742:	4621      	mov	r1, r4
 8007744:	f7ff f9ba 	bl	8006abc <quorem>
 8007748:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800774c:	f806 3b01 	strb.w	r3, [r6], #1
 8007750:	eba6 020a 	sub.w	r2, r6, sl
 8007754:	4593      	cmp	fp, r2
 8007756:	ddb4      	ble.n	80076c2 <_dtoa_r+0xaf2>
 8007758:	9902      	ldr	r1, [sp, #8]
 800775a:	2300      	movs	r3, #0
 800775c:	220a      	movs	r2, #10
 800775e:	4648      	mov	r0, r9
 8007760:	f000 fb22 	bl	8007da8 <__multadd>
 8007764:	9002      	str	r0, [sp, #8]
 8007766:	e7eb      	b.n	8007740 <_dtoa_r+0xb70>
 8007768:	08008dd0 	.word	0x08008dd0
 800776c:	08008d54 	.word	0x08008d54

08007770 <__ssputs_r>:
 8007770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007774:	688e      	ldr	r6, [r1, #8]
 8007776:	461f      	mov	r7, r3
 8007778:	42be      	cmp	r6, r7
 800777a:	680b      	ldr	r3, [r1, #0]
 800777c:	4682      	mov	sl, r0
 800777e:	460c      	mov	r4, r1
 8007780:	4690      	mov	r8, r2
 8007782:	d82d      	bhi.n	80077e0 <__ssputs_r+0x70>
 8007784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007788:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800778c:	d026      	beq.n	80077dc <__ssputs_r+0x6c>
 800778e:	6965      	ldr	r5, [r4, #20]
 8007790:	6909      	ldr	r1, [r1, #16]
 8007792:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007796:	eba3 0901 	sub.w	r9, r3, r1
 800779a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800779e:	1c7b      	adds	r3, r7, #1
 80077a0:	444b      	add	r3, r9
 80077a2:	106d      	asrs	r5, r5, #1
 80077a4:	429d      	cmp	r5, r3
 80077a6:	bf38      	it	cc
 80077a8:	461d      	movcc	r5, r3
 80077aa:	0553      	lsls	r3, r2, #21
 80077ac:	d527      	bpl.n	80077fe <__ssputs_r+0x8e>
 80077ae:	4629      	mov	r1, r5
 80077b0:	f000 f960 	bl	8007a74 <_malloc_r>
 80077b4:	4606      	mov	r6, r0
 80077b6:	b360      	cbz	r0, 8007812 <__ssputs_r+0xa2>
 80077b8:	6921      	ldr	r1, [r4, #16]
 80077ba:	464a      	mov	r2, r9
 80077bc:	f000 feee 	bl	800859c <memcpy>
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80077c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ca:	81a3      	strh	r3, [r4, #12]
 80077cc:	6126      	str	r6, [r4, #16]
 80077ce:	6165      	str	r5, [r4, #20]
 80077d0:	444e      	add	r6, r9
 80077d2:	eba5 0509 	sub.w	r5, r5, r9
 80077d6:	6026      	str	r6, [r4, #0]
 80077d8:	60a5      	str	r5, [r4, #8]
 80077da:	463e      	mov	r6, r7
 80077dc:	42be      	cmp	r6, r7
 80077de:	d900      	bls.n	80077e2 <__ssputs_r+0x72>
 80077e0:	463e      	mov	r6, r7
 80077e2:	6820      	ldr	r0, [r4, #0]
 80077e4:	4632      	mov	r2, r6
 80077e6:	4641      	mov	r1, r8
 80077e8:	f000 fe67 	bl	80084ba <memmove>
 80077ec:	68a3      	ldr	r3, [r4, #8]
 80077ee:	1b9b      	subs	r3, r3, r6
 80077f0:	60a3      	str	r3, [r4, #8]
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	4433      	add	r3, r6
 80077f6:	6023      	str	r3, [r4, #0]
 80077f8:	2000      	movs	r0, #0
 80077fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fe:	462a      	mov	r2, r5
 8007800:	f000 fe2d 	bl	800845e <_realloc_r>
 8007804:	4606      	mov	r6, r0
 8007806:	2800      	cmp	r0, #0
 8007808:	d1e0      	bne.n	80077cc <__ssputs_r+0x5c>
 800780a:	6921      	ldr	r1, [r4, #16]
 800780c:	4650      	mov	r0, sl
 800780e:	f000 ff05 	bl	800861c <_free_r>
 8007812:	230c      	movs	r3, #12
 8007814:	f8ca 3000 	str.w	r3, [sl]
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800781e:	81a3      	strh	r3, [r4, #12]
 8007820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007824:	e7e9      	b.n	80077fa <__ssputs_r+0x8a>
	...

08007828 <_svfiprintf_r>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	4698      	mov	r8, r3
 800782e:	898b      	ldrh	r3, [r1, #12]
 8007830:	061b      	lsls	r3, r3, #24
 8007832:	b09d      	sub	sp, #116	@ 0x74
 8007834:	4607      	mov	r7, r0
 8007836:	460d      	mov	r5, r1
 8007838:	4614      	mov	r4, r2
 800783a:	d510      	bpl.n	800785e <_svfiprintf_r+0x36>
 800783c:	690b      	ldr	r3, [r1, #16]
 800783e:	b973      	cbnz	r3, 800785e <_svfiprintf_r+0x36>
 8007840:	2140      	movs	r1, #64	@ 0x40
 8007842:	f000 f917 	bl	8007a74 <_malloc_r>
 8007846:	6028      	str	r0, [r5, #0]
 8007848:	6128      	str	r0, [r5, #16]
 800784a:	b930      	cbnz	r0, 800785a <_svfiprintf_r+0x32>
 800784c:	230c      	movs	r3, #12
 800784e:	603b      	str	r3, [r7, #0]
 8007850:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007854:	b01d      	add	sp, #116	@ 0x74
 8007856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785a:	2340      	movs	r3, #64	@ 0x40
 800785c:	616b      	str	r3, [r5, #20]
 800785e:	2300      	movs	r3, #0
 8007860:	9309      	str	r3, [sp, #36]	@ 0x24
 8007862:	2320      	movs	r3, #32
 8007864:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007868:	f8cd 800c 	str.w	r8, [sp, #12]
 800786c:	2330      	movs	r3, #48	@ 0x30
 800786e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a0c <_svfiprintf_r+0x1e4>
 8007872:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007876:	f04f 0901 	mov.w	r9, #1
 800787a:	4623      	mov	r3, r4
 800787c:	469a      	mov	sl, r3
 800787e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007882:	b10a      	cbz	r2, 8007888 <_svfiprintf_r+0x60>
 8007884:	2a25      	cmp	r2, #37	@ 0x25
 8007886:	d1f9      	bne.n	800787c <_svfiprintf_r+0x54>
 8007888:	ebba 0b04 	subs.w	fp, sl, r4
 800788c:	d00b      	beq.n	80078a6 <_svfiprintf_r+0x7e>
 800788e:	465b      	mov	r3, fp
 8007890:	4622      	mov	r2, r4
 8007892:	4629      	mov	r1, r5
 8007894:	4638      	mov	r0, r7
 8007896:	f7ff ff6b 	bl	8007770 <__ssputs_r>
 800789a:	3001      	adds	r0, #1
 800789c:	f000 80a7 	beq.w	80079ee <_svfiprintf_r+0x1c6>
 80078a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078a2:	445a      	add	r2, fp
 80078a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80078a6:	f89a 3000 	ldrb.w	r3, [sl]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f000 809f 	beq.w	80079ee <_svfiprintf_r+0x1c6>
 80078b0:	2300      	movs	r3, #0
 80078b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ba:	f10a 0a01 	add.w	sl, sl, #1
 80078be:	9304      	str	r3, [sp, #16]
 80078c0:	9307      	str	r3, [sp, #28]
 80078c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80078c8:	4654      	mov	r4, sl
 80078ca:	2205      	movs	r2, #5
 80078cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d0:	484e      	ldr	r0, [pc, #312]	@ (8007a0c <_svfiprintf_r+0x1e4>)
 80078d2:	f7f8 fc7d 	bl	80001d0 <memchr>
 80078d6:	9a04      	ldr	r2, [sp, #16]
 80078d8:	b9d8      	cbnz	r0, 8007912 <_svfiprintf_r+0xea>
 80078da:	06d0      	lsls	r0, r2, #27
 80078dc:	bf44      	itt	mi
 80078de:	2320      	movmi	r3, #32
 80078e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078e4:	0711      	lsls	r1, r2, #28
 80078e6:	bf44      	itt	mi
 80078e8:	232b      	movmi	r3, #43	@ 0x2b
 80078ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078ee:	f89a 3000 	ldrb.w	r3, [sl]
 80078f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80078f4:	d015      	beq.n	8007922 <_svfiprintf_r+0xfa>
 80078f6:	9a07      	ldr	r2, [sp, #28]
 80078f8:	4654      	mov	r4, sl
 80078fa:	2000      	movs	r0, #0
 80078fc:	f04f 0c0a 	mov.w	ip, #10
 8007900:	4621      	mov	r1, r4
 8007902:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007906:	3b30      	subs	r3, #48	@ 0x30
 8007908:	2b09      	cmp	r3, #9
 800790a:	d94b      	bls.n	80079a4 <_svfiprintf_r+0x17c>
 800790c:	b1b0      	cbz	r0, 800793c <_svfiprintf_r+0x114>
 800790e:	9207      	str	r2, [sp, #28]
 8007910:	e014      	b.n	800793c <_svfiprintf_r+0x114>
 8007912:	eba0 0308 	sub.w	r3, r0, r8
 8007916:	fa09 f303 	lsl.w	r3, r9, r3
 800791a:	4313      	orrs	r3, r2
 800791c:	9304      	str	r3, [sp, #16]
 800791e:	46a2      	mov	sl, r4
 8007920:	e7d2      	b.n	80078c8 <_svfiprintf_r+0xa0>
 8007922:	9b03      	ldr	r3, [sp, #12]
 8007924:	1d19      	adds	r1, r3, #4
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	9103      	str	r1, [sp, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	bfbb      	ittet	lt
 800792e:	425b      	neglt	r3, r3
 8007930:	f042 0202 	orrlt.w	r2, r2, #2
 8007934:	9307      	strge	r3, [sp, #28]
 8007936:	9307      	strlt	r3, [sp, #28]
 8007938:	bfb8      	it	lt
 800793a:	9204      	strlt	r2, [sp, #16]
 800793c:	7823      	ldrb	r3, [r4, #0]
 800793e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007940:	d10a      	bne.n	8007958 <_svfiprintf_r+0x130>
 8007942:	7863      	ldrb	r3, [r4, #1]
 8007944:	2b2a      	cmp	r3, #42	@ 0x2a
 8007946:	d132      	bne.n	80079ae <_svfiprintf_r+0x186>
 8007948:	9b03      	ldr	r3, [sp, #12]
 800794a:	1d1a      	adds	r2, r3, #4
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	9203      	str	r2, [sp, #12]
 8007950:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007954:	3402      	adds	r4, #2
 8007956:	9305      	str	r3, [sp, #20]
 8007958:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a1c <_svfiprintf_r+0x1f4>
 800795c:	7821      	ldrb	r1, [r4, #0]
 800795e:	2203      	movs	r2, #3
 8007960:	4650      	mov	r0, sl
 8007962:	f7f8 fc35 	bl	80001d0 <memchr>
 8007966:	b138      	cbz	r0, 8007978 <_svfiprintf_r+0x150>
 8007968:	9b04      	ldr	r3, [sp, #16]
 800796a:	eba0 000a 	sub.w	r0, r0, sl
 800796e:	2240      	movs	r2, #64	@ 0x40
 8007970:	4082      	lsls	r2, r0
 8007972:	4313      	orrs	r3, r2
 8007974:	3401      	adds	r4, #1
 8007976:	9304      	str	r3, [sp, #16]
 8007978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800797c:	4824      	ldr	r0, [pc, #144]	@ (8007a10 <_svfiprintf_r+0x1e8>)
 800797e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007982:	2206      	movs	r2, #6
 8007984:	f7f8 fc24 	bl	80001d0 <memchr>
 8007988:	2800      	cmp	r0, #0
 800798a:	d036      	beq.n	80079fa <_svfiprintf_r+0x1d2>
 800798c:	4b21      	ldr	r3, [pc, #132]	@ (8007a14 <_svfiprintf_r+0x1ec>)
 800798e:	bb1b      	cbnz	r3, 80079d8 <_svfiprintf_r+0x1b0>
 8007990:	9b03      	ldr	r3, [sp, #12]
 8007992:	3307      	adds	r3, #7
 8007994:	f023 0307 	bic.w	r3, r3, #7
 8007998:	3308      	adds	r3, #8
 800799a:	9303      	str	r3, [sp, #12]
 800799c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800799e:	4433      	add	r3, r6
 80079a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80079a2:	e76a      	b.n	800787a <_svfiprintf_r+0x52>
 80079a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80079a8:	460c      	mov	r4, r1
 80079aa:	2001      	movs	r0, #1
 80079ac:	e7a8      	b.n	8007900 <_svfiprintf_r+0xd8>
 80079ae:	2300      	movs	r3, #0
 80079b0:	3401      	adds	r4, #1
 80079b2:	9305      	str	r3, [sp, #20]
 80079b4:	4619      	mov	r1, r3
 80079b6:	f04f 0c0a 	mov.w	ip, #10
 80079ba:	4620      	mov	r0, r4
 80079bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079c0:	3a30      	subs	r2, #48	@ 0x30
 80079c2:	2a09      	cmp	r2, #9
 80079c4:	d903      	bls.n	80079ce <_svfiprintf_r+0x1a6>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0c6      	beq.n	8007958 <_svfiprintf_r+0x130>
 80079ca:	9105      	str	r1, [sp, #20]
 80079cc:	e7c4      	b.n	8007958 <_svfiprintf_r+0x130>
 80079ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80079d2:	4604      	mov	r4, r0
 80079d4:	2301      	movs	r3, #1
 80079d6:	e7f0      	b.n	80079ba <_svfiprintf_r+0x192>
 80079d8:	ab03      	add	r3, sp, #12
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	462a      	mov	r2, r5
 80079de:	4b0e      	ldr	r3, [pc, #56]	@ (8007a18 <_svfiprintf_r+0x1f0>)
 80079e0:	a904      	add	r1, sp, #16
 80079e2:	4638      	mov	r0, r7
 80079e4:	f7fe fb60 	bl	80060a8 <_printf_float>
 80079e8:	1c42      	adds	r2, r0, #1
 80079ea:	4606      	mov	r6, r0
 80079ec:	d1d6      	bne.n	800799c <_svfiprintf_r+0x174>
 80079ee:	89ab      	ldrh	r3, [r5, #12]
 80079f0:	065b      	lsls	r3, r3, #25
 80079f2:	f53f af2d 	bmi.w	8007850 <_svfiprintf_r+0x28>
 80079f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079f8:	e72c      	b.n	8007854 <_svfiprintf_r+0x2c>
 80079fa:	ab03      	add	r3, sp, #12
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	462a      	mov	r2, r5
 8007a00:	4b05      	ldr	r3, [pc, #20]	@ (8007a18 <_svfiprintf_r+0x1f0>)
 8007a02:	a904      	add	r1, sp, #16
 8007a04:	4638      	mov	r0, r7
 8007a06:	f7fe fde7 	bl	80065d8 <_printf_i>
 8007a0a:	e7ed      	b.n	80079e8 <_svfiprintf_r+0x1c0>
 8007a0c:	08008de1 	.word	0x08008de1
 8007a10:	08008deb 	.word	0x08008deb
 8007a14:	080060a9 	.word	0x080060a9
 8007a18:	08007771 	.word	0x08007771
 8007a1c:	08008de7 	.word	0x08008de7

08007a20 <malloc>:
 8007a20:	4b02      	ldr	r3, [pc, #8]	@ (8007a2c <malloc+0xc>)
 8007a22:	4601      	mov	r1, r0
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	f000 b825 	b.w	8007a74 <_malloc_r>
 8007a2a:	bf00      	nop
 8007a2c:	2000001c 	.word	0x2000001c

08007a30 <sbrk_aligned>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	4e0f      	ldr	r6, [pc, #60]	@ (8007a70 <sbrk_aligned+0x40>)
 8007a34:	460c      	mov	r4, r1
 8007a36:	6831      	ldr	r1, [r6, #0]
 8007a38:	4605      	mov	r5, r0
 8007a3a:	b911      	cbnz	r1, 8007a42 <sbrk_aligned+0x12>
 8007a3c:	f000 fd7c 	bl	8008538 <_sbrk_r>
 8007a40:	6030      	str	r0, [r6, #0]
 8007a42:	4621      	mov	r1, r4
 8007a44:	4628      	mov	r0, r5
 8007a46:	f000 fd77 	bl	8008538 <_sbrk_r>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	d103      	bne.n	8007a56 <sbrk_aligned+0x26>
 8007a4e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007a52:	4620      	mov	r0, r4
 8007a54:	bd70      	pop	{r4, r5, r6, pc}
 8007a56:	1cc4      	adds	r4, r0, #3
 8007a58:	f024 0403 	bic.w	r4, r4, #3
 8007a5c:	42a0      	cmp	r0, r4
 8007a5e:	d0f8      	beq.n	8007a52 <sbrk_aligned+0x22>
 8007a60:	1a21      	subs	r1, r4, r0
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 fd68 	bl	8008538 <_sbrk_r>
 8007a68:	3001      	adds	r0, #1
 8007a6a:	d1f2      	bne.n	8007a52 <sbrk_aligned+0x22>
 8007a6c:	e7ef      	b.n	8007a4e <sbrk_aligned+0x1e>
 8007a6e:	bf00      	nop
 8007a70:	2000048c 	.word	0x2000048c

08007a74 <_malloc_r>:
 8007a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a78:	1ccd      	adds	r5, r1, #3
 8007a7a:	f025 0503 	bic.w	r5, r5, #3
 8007a7e:	3508      	adds	r5, #8
 8007a80:	2d0c      	cmp	r5, #12
 8007a82:	bf38      	it	cc
 8007a84:	250c      	movcc	r5, #12
 8007a86:	2d00      	cmp	r5, #0
 8007a88:	4606      	mov	r6, r0
 8007a8a:	db01      	blt.n	8007a90 <_malloc_r+0x1c>
 8007a8c:	42a9      	cmp	r1, r5
 8007a8e:	d904      	bls.n	8007a9a <_malloc_r+0x26>
 8007a90:	230c      	movs	r3, #12
 8007a92:	6033      	str	r3, [r6, #0]
 8007a94:	2000      	movs	r0, #0
 8007a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b70 <_malloc_r+0xfc>
 8007a9e:	f000 f915 	bl	8007ccc <__malloc_lock>
 8007aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa6:	461c      	mov	r4, r3
 8007aa8:	bb44      	cbnz	r4, 8007afc <_malloc_r+0x88>
 8007aaa:	4629      	mov	r1, r5
 8007aac:	4630      	mov	r0, r6
 8007aae:	f7ff ffbf 	bl	8007a30 <sbrk_aligned>
 8007ab2:	1c43      	adds	r3, r0, #1
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	d158      	bne.n	8007b6a <_malloc_r+0xf6>
 8007ab8:	f8d8 4000 	ldr.w	r4, [r8]
 8007abc:	4627      	mov	r7, r4
 8007abe:	2f00      	cmp	r7, #0
 8007ac0:	d143      	bne.n	8007b4a <_malloc_r+0xd6>
 8007ac2:	2c00      	cmp	r4, #0
 8007ac4:	d04b      	beq.n	8007b5e <_malloc_r+0xea>
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	4639      	mov	r1, r7
 8007aca:	4630      	mov	r0, r6
 8007acc:	eb04 0903 	add.w	r9, r4, r3
 8007ad0:	f000 fd32 	bl	8008538 <_sbrk_r>
 8007ad4:	4581      	cmp	r9, r0
 8007ad6:	d142      	bne.n	8007b5e <_malloc_r+0xea>
 8007ad8:	6821      	ldr	r1, [r4, #0]
 8007ada:	1a6d      	subs	r5, r5, r1
 8007adc:	4629      	mov	r1, r5
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f7ff ffa6 	bl	8007a30 <sbrk_aligned>
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	d03a      	beq.n	8007b5e <_malloc_r+0xea>
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	442b      	add	r3, r5
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	f8d8 3000 	ldr.w	r3, [r8]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	bb62      	cbnz	r2, 8007b50 <_malloc_r+0xdc>
 8007af6:	f8c8 7000 	str.w	r7, [r8]
 8007afa:	e00f      	b.n	8007b1c <_malloc_r+0xa8>
 8007afc:	6822      	ldr	r2, [r4, #0]
 8007afe:	1b52      	subs	r2, r2, r5
 8007b00:	d420      	bmi.n	8007b44 <_malloc_r+0xd0>
 8007b02:	2a0b      	cmp	r2, #11
 8007b04:	d917      	bls.n	8007b36 <_malloc_r+0xc2>
 8007b06:	1961      	adds	r1, r4, r5
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	6025      	str	r5, [r4, #0]
 8007b0c:	bf18      	it	ne
 8007b0e:	6059      	strne	r1, [r3, #4]
 8007b10:	6863      	ldr	r3, [r4, #4]
 8007b12:	bf08      	it	eq
 8007b14:	f8c8 1000 	streq.w	r1, [r8]
 8007b18:	5162      	str	r2, [r4, r5]
 8007b1a:	604b      	str	r3, [r1, #4]
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	f000 f8db 	bl	8007cd8 <__malloc_unlock>
 8007b22:	f104 000b 	add.w	r0, r4, #11
 8007b26:	1d23      	adds	r3, r4, #4
 8007b28:	f020 0007 	bic.w	r0, r0, #7
 8007b2c:	1ac2      	subs	r2, r0, r3
 8007b2e:	bf1c      	itt	ne
 8007b30:	1a1b      	subne	r3, r3, r0
 8007b32:	50a3      	strne	r3, [r4, r2]
 8007b34:	e7af      	b.n	8007a96 <_malloc_r+0x22>
 8007b36:	6862      	ldr	r2, [r4, #4]
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	bf0c      	ite	eq
 8007b3c:	f8c8 2000 	streq.w	r2, [r8]
 8007b40:	605a      	strne	r2, [r3, #4]
 8007b42:	e7eb      	b.n	8007b1c <_malloc_r+0xa8>
 8007b44:	4623      	mov	r3, r4
 8007b46:	6864      	ldr	r4, [r4, #4]
 8007b48:	e7ae      	b.n	8007aa8 <_malloc_r+0x34>
 8007b4a:	463c      	mov	r4, r7
 8007b4c:	687f      	ldr	r7, [r7, #4]
 8007b4e:	e7b6      	b.n	8007abe <_malloc_r+0x4a>
 8007b50:	461a      	mov	r2, r3
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	42a3      	cmp	r3, r4
 8007b56:	d1fb      	bne.n	8007b50 <_malloc_r+0xdc>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	6053      	str	r3, [r2, #4]
 8007b5c:	e7de      	b.n	8007b1c <_malloc_r+0xa8>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	6033      	str	r3, [r6, #0]
 8007b62:	4630      	mov	r0, r6
 8007b64:	f000 f8b8 	bl	8007cd8 <__malloc_unlock>
 8007b68:	e794      	b.n	8007a94 <_malloc_r+0x20>
 8007b6a:	6005      	str	r5, [r0, #0]
 8007b6c:	e7d6      	b.n	8007b1c <_malloc_r+0xa8>
 8007b6e:	bf00      	nop
 8007b70:	20000490 	.word	0x20000490

08007b74 <__sflush_r>:
 8007b74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7c:	0716      	lsls	r6, r2, #28
 8007b7e:	4605      	mov	r5, r0
 8007b80:	460c      	mov	r4, r1
 8007b82:	d454      	bmi.n	8007c2e <__sflush_r+0xba>
 8007b84:	684b      	ldr	r3, [r1, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	dc02      	bgt.n	8007b90 <__sflush_r+0x1c>
 8007b8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dd48      	ble.n	8007c22 <__sflush_r+0xae>
 8007b90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	d045      	beq.n	8007c22 <__sflush_r+0xae>
 8007b96:	2300      	movs	r3, #0
 8007b98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b9c:	682f      	ldr	r7, [r5, #0]
 8007b9e:	6a21      	ldr	r1, [r4, #32]
 8007ba0:	602b      	str	r3, [r5, #0]
 8007ba2:	d030      	beq.n	8007c06 <__sflush_r+0x92>
 8007ba4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	0759      	lsls	r1, r3, #29
 8007baa:	d505      	bpl.n	8007bb8 <__sflush_r+0x44>
 8007bac:	6863      	ldr	r3, [r4, #4]
 8007bae:	1ad2      	subs	r2, r2, r3
 8007bb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bb2:	b10b      	cbz	r3, 8007bb8 <__sflush_r+0x44>
 8007bb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bb6:	1ad2      	subs	r2, r2, r3
 8007bb8:	2300      	movs	r3, #0
 8007bba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bbc:	6a21      	ldr	r1, [r4, #32]
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	47b0      	blx	r6
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	d106      	bne.n	8007bd6 <__sflush_r+0x62>
 8007bc8:	6829      	ldr	r1, [r5, #0]
 8007bca:	291d      	cmp	r1, #29
 8007bcc:	d82b      	bhi.n	8007c26 <__sflush_r+0xb2>
 8007bce:	4a2a      	ldr	r2, [pc, #168]	@ (8007c78 <__sflush_r+0x104>)
 8007bd0:	40ca      	lsrs	r2, r1
 8007bd2:	07d6      	lsls	r6, r2, #31
 8007bd4:	d527      	bpl.n	8007c26 <__sflush_r+0xb2>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	6062      	str	r2, [r4, #4]
 8007bda:	04d9      	lsls	r1, r3, #19
 8007bdc:	6922      	ldr	r2, [r4, #16]
 8007bde:	6022      	str	r2, [r4, #0]
 8007be0:	d504      	bpl.n	8007bec <__sflush_r+0x78>
 8007be2:	1c42      	adds	r2, r0, #1
 8007be4:	d101      	bne.n	8007bea <__sflush_r+0x76>
 8007be6:	682b      	ldr	r3, [r5, #0]
 8007be8:	b903      	cbnz	r3, 8007bec <__sflush_r+0x78>
 8007bea:	6560      	str	r0, [r4, #84]	@ 0x54
 8007bec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007bee:	602f      	str	r7, [r5, #0]
 8007bf0:	b1b9      	cbz	r1, 8007c22 <__sflush_r+0xae>
 8007bf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bf6:	4299      	cmp	r1, r3
 8007bf8:	d002      	beq.n	8007c00 <__sflush_r+0x8c>
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f000 fd0e 	bl	800861c <_free_r>
 8007c00:	2300      	movs	r3, #0
 8007c02:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c04:	e00d      	b.n	8007c22 <__sflush_r+0xae>
 8007c06:	2301      	movs	r3, #1
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b0      	blx	r6
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	1c50      	adds	r0, r2, #1
 8007c10:	d1c9      	bne.n	8007ba6 <__sflush_r+0x32>
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d0c6      	beq.n	8007ba6 <__sflush_r+0x32>
 8007c18:	2b1d      	cmp	r3, #29
 8007c1a:	d001      	beq.n	8007c20 <__sflush_r+0xac>
 8007c1c:	2b16      	cmp	r3, #22
 8007c1e:	d11e      	bne.n	8007c5e <__sflush_r+0xea>
 8007c20:	602f      	str	r7, [r5, #0]
 8007c22:	2000      	movs	r0, #0
 8007c24:	e022      	b.n	8007c6c <__sflush_r+0xf8>
 8007c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c2a:	b21b      	sxth	r3, r3
 8007c2c:	e01b      	b.n	8007c66 <__sflush_r+0xf2>
 8007c2e:	690f      	ldr	r7, [r1, #16]
 8007c30:	2f00      	cmp	r7, #0
 8007c32:	d0f6      	beq.n	8007c22 <__sflush_r+0xae>
 8007c34:	0793      	lsls	r3, r2, #30
 8007c36:	680e      	ldr	r6, [r1, #0]
 8007c38:	bf08      	it	eq
 8007c3a:	694b      	ldreq	r3, [r1, #20]
 8007c3c:	600f      	str	r7, [r1, #0]
 8007c3e:	bf18      	it	ne
 8007c40:	2300      	movne	r3, #0
 8007c42:	eba6 0807 	sub.w	r8, r6, r7
 8007c46:	608b      	str	r3, [r1, #8]
 8007c48:	f1b8 0f00 	cmp.w	r8, #0
 8007c4c:	dde9      	ble.n	8007c22 <__sflush_r+0xae>
 8007c4e:	6a21      	ldr	r1, [r4, #32]
 8007c50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c52:	4643      	mov	r3, r8
 8007c54:	463a      	mov	r2, r7
 8007c56:	4628      	mov	r0, r5
 8007c58:	47b0      	blx	r6
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	dc08      	bgt.n	8007c70 <__sflush_r+0xfc>
 8007c5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c66:	81a3      	strh	r3, [r4, #12]
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c70:	4407      	add	r7, r0
 8007c72:	eba8 0800 	sub.w	r8, r8, r0
 8007c76:	e7e7      	b.n	8007c48 <__sflush_r+0xd4>
 8007c78:	20400001 	.word	0x20400001

08007c7c <_fflush_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	690b      	ldr	r3, [r1, #16]
 8007c80:	4605      	mov	r5, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	b913      	cbnz	r3, 8007c8c <_fflush_r+0x10>
 8007c86:	2500      	movs	r5, #0
 8007c88:	4628      	mov	r0, r5
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	b118      	cbz	r0, 8007c96 <_fflush_r+0x1a>
 8007c8e:	6a03      	ldr	r3, [r0, #32]
 8007c90:	b90b      	cbnz	r3, 8007c96 <_fflush_r+0x1a>
 8007c92:	f7fe fea3 	bl	80069dc <__sinit>
 8007c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d0f3      	beq.n	8007c86 <_fflush_r+0xa>
 8007c9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007ca0:	07d0      	lsls	r0, r2, #31
 8007ca2:	d404      	bmi.n	8007cae <_fflush_r+0x32>
 8007ca4:	0599      	lsls	r1, r3, #22
 8007ca6:	d402      	bmi.n	8007cae <_fflush_r+0x32>
 8007ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007caa:	f7fe ff00 	bl	8006aae <__retarget_lock_acquire_recursive>
 8007cae:	4628      	mov	r0, r5
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	f7ff ff5f 	bl	8007b74 <__sflush_r>
 8007cb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cb8:	07da      	lsls	r2, r3, #31
 8007cba:	4605      	mov	r5, r0
 8007cbc:	d4e4      	bmi.n	8007c88 <_fflush_r+0xc>
 8007cbe:	89a3      	ldrh	r3, [r4, #12]
 8007cc0:	059b      	lsls	r3, r3, #22
 8007cc2:	d4e1      	bmi.n	8007c88 <_fflush_r+0xc>
 8007cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cc6:	f7fe fef3 	bl	8006ab0 <__retarget_lock_release_recursive>
 8007cca:	e7dd      	b.n	8007c88 <_fflush_r+0xc>

08007ccc <__malloc_lock>:
 8007ccc:	4801      	ldr	r0, [pc, #4]	@ (8007cd4 <__malloc_lock+0x8>)
 8007cce:	f7fe beee 	b.w	8006aae <__retarget_lock_acquire_recursive>
 8007cd2:	bf00      	nop
 8007cd4:	20000488 	.word	0x20000488

08007cd8 <__malloc_unlock>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	@ (8007ce0 <__malloc_unlock+0x8>)
 8007cda:	f7fe bee9 	b.w	8006ab0 <__retarget_lock_release_recursive>
 8007cde:	bf00      	nop
 8007ce0:	20000488 	.word	0x20000488

08007ce4 <_Balloc>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	69c6      	ldr	r6, [r0, #28]
 8007ce8:	4604      	mov	r4, r0
 8007cea:	460d      	mov	r5, r1
 8007cec:	b976      	cbnz	r6, 8007d0c <_Balloc+0x28>
 8007cee:	2010      	movs	r0, #16
 8007cf0:	f7ff fe96 	bl	8007a20 <malloc>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	61e0      	str	r0, [r4, #28]
 8007cf8:	b920      	cbnz	r0, 8007d04 <_Balloc+0x20>
 8007cfa:	4b18      	ldr	r3, [pc, #96]	@ (8007d5c <_Balloc+0x78>)
 8007cfc:	4818      	ldr	r0, [pc, #96]	@ (8007d60 <_Balloc+0x7c>)
 8007cfe:	216b      	movs	r1, #107	@ 0x6b
 8007d00:	f000 fc5a 	bl	80085b8 <__assert_func>
 8007d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d08:	6006      	str	r6, [r0, #0]
 8007d0a:	60c6      	str	r6, [r0, #12]
 8007d0c:	69e6      	ldr	r6, [r4, #28]
 8007d0e:	68f3      	ldr	r3, [r6, #12]
 8007d10:	b183      	cbz	r3, 8007d34 <_Balloc+0x50>
 8007d12:	69e3      	ldr	r3, [r4, #28]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d1a:	b9b8      	cbnz	r0, 8007d4c <_Balloc+0x68>
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	fa01 f605 	lsl.w	r6, r1, r5
 8007d22:	1d72      	adds	r2, r6, #5
 8007d24:	0092      	lsls	r2, r2, #2
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 fc64 	bl	80085f4 <_calloc_r>
 8007d2c:	b160      	cbz	r0, 8007d48 <_Balloc+0x64>
 8007d2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d32:	e00e      	b.n	8007d52 <_Balloc+0x6e>
 8007d34:	2221      	movs	r2, #33	@ 0x21
 8007d36:	2104      	movs	r1, #4
 8007d38:	4620      	mov	r0, r4
 8007d3a:	f000 fc5b 	bl	80085f4 <_calloc_r>
 8007d3e:	69e3      	ldr	r3, [r4, #28]
 8007d40:	60f0      	str	r0, [r6, #12]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e4      	bne.n	8007d12 <_Balloc+0x2e>
 8007d48:	2000      	movs	r0, #0
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}
 8007d4c:	6802      	ldr	r2, [r0, #0]
 8007d4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d52:	2300      	movs	r3, #0
 8007d54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d58:	e7f7      	b.n	8007d4a <_Balloc+0x66>
 8007d5a:	bf00      	nop
 8007d5c:	08008d61 	.word	0x08008d61
 8007d60:	08008df2 	.word	0x08008df2

08007d64 <_Bfree>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	69c6      	ldr	r6, [r0, #28]
 8007d68:	4605      	mov	r5, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	b976      	cbnz	r6, 8007d8c <_Bfree+0x28>
 8007d6e:	2010      	movs	r0, #16
 8007d70:	f7ff fe56 	bl	8007a20 <malloc>
 8007d74:	4602      	mov	r2, r0
 8007d76:	61e8      	str	r0, [r5, #28]
 8007d78:	b920      	cbnz	r0, 8007d84 <_Bfree+0x20>
 8007d7a:	4b09      	ldr	r3, [pc, #36]	@ (8007da0 <_Bfree+0x3c>)
 8007d7c:	4809      	ldr	r0, [pc, #36]	@ (8007da4 <_Bfree+0x40>)
 8007d7e:	218f      	movs	r1, #143	@ 0x8f
 8007d80:	f000 fc1a 	bl	80085b8 <__assert_func>
 8007d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d88:	6006      	str	r6, [r0, #0]
 8007d8a:	60c6      	str	r6, [r0, #12]
 8007d8c:	b13c      	cbz	r4, 8007d9e <_Bfree+0x3a>
 8007d8e:	69eb      	ldr	r3, [r5, #28]
 8007d90:	6862      	ldr	r2, [r4, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d98:	6021      	str	r1, [r4, #0]
 8007d9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	08008d61 	.word	0x08008d61
 8007da4:	08008df2 	.word	0x08008df2

08007da8 <__multadd>:
 8007da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dac:	690d      	ldr	r5, [r1, #16]
 8007dae:	4607      	mov	r7, r0
 8007db0:	460c      	mov	r4, r1
 8007db2:	461e      	mov	r6, r3
 8007db4:	f101 0c14 	add.w	ip, r1, #20
 8007db8:	2000      	movs	r0, #0
 8007dba:	f8dc 3000 	ldr.w	r3, [ip]
 8007dbe:	b299      	uxth	r1, r3
 8007dc0:	fb02 6101 	mla	r1, r2, r1, r6
 8007dc4:	0c1e      	lsrs	r6, r3, #16
 8007dc6:	0c0b      	lsrs	r3, r1, #16
 8007dc8:	fb02 3306 	mla	r3, r2, r6, r3
 8007dcc:	b289      	uxth	r1, r1
 8007dce:	3001      	adds	r0, #1
 8007dd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007dd4:	4285      	cmp	r5, r0
 8007dd6:	f84c 1b04 	str.w	r1, [ip], #4
 8007dda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007dde:	dcec      	bgt.n	8007dba <__multadd+0x12>
 8007de0:	b30e      	cbz	r6, 8007e26 <__multadd+0x7e>
 8007de2:	68a3      	ldr	r3, [r4, #8]
 8007de4:	42ab      	cmp	r3, r5
 8007de6:	dc19      	bgt.n	8007e1c <__multadd+0x74>
 8007de8:	6861      	ldr	r1, [r4, #4]
 8007dea:	4638      	mov	r0, r7
 8007dec:	3101      	adds	r1, #1
 8007dee:	f7ff ff79 	bl	8007ce4 <_Balloc>
 8007df2:	4680      	mov	r8, r0
 8007df4:	b928      	cbnz	r0, 8007e02 <__multadd+0x5a>
 8007df6:	4602      	mov	r2, r0
 8007df8:	4b0c      	ldr	r3, [pc, #48]	@ (8007e2c <__multadd+0x84>)
 8007dfa:	480d      	ldr	r0, [pc, #52]	@ (8007e30 <__multadd+0x88>)
 8007dfc:	21ba      	movs	r1, #186	@ 0xba
 8007dfe:	f000 fbdb 	bl	80085b8 <__assert_func>
 8007e02:	6922      	ldr	r2, [r4, #16]
 8007e04:	3202      	adds	r2, #2
 8007e06:	f104 010c 	add.w	r1, r4, #12
 8007e0a:	0092      	lsls	r2, r2, #2
 8007e0c:	300c      	adds	r0, #12
 8007e0e:	f000 fbc5 	bl	800859c <memcpy>
 8007e12:	4621      	mov	r1, r4
 8007e14:	4638      	mov	r0, r7
 8007e16:	f7ff ffa5 	bl	8007d64 <_Bfree>
 8007e1a:	4644      	mov	r4, r8
 8007e1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e20:	3501      	adds	r5, #1
 8007e22:	615e      	str	r6, [r3, #20]
 8007e24:	6125      	str	r5, [r4, #16]
 8007e26:	4620      	mov	r0, r4
 8007e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e2c:	08008dd0 	.word	0x08008dd0
 8007e30:	08008df2 	.word	0x08008df2

08007e34 <__hi0bits>:
 8007e34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e38:	4603      	mov	r3, r0
 8007e3a:	bf36      	itet	cc
 8007e3c:	0403      	lslcc	r3, r0, #16
 8007e3e:	2000      	movcs	r0, #0
 8007e40:	2010      	movcc	r0, #16
 8007e42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e46:	bf3c      	itt	cc
 8007e48:	021b      	lslcc	r3, r3, #8
 8007e4a:	3008      	addcc	r0, #8
 8007e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e50:	bf3c      	itt	cc
 8007e52:	011b      	lslcc	r3, r3, #4
 8007e54:	3004      	addcc	r0, #4
 8007e56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e5a:	bf3c      	itt	cc
 8007e5c:	009b      	lslcc	r3, r3, #2
 8007e5e:	3002      	addcc	r0, #2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	db05      	blt.n	8007e70 <__hi0bits+0x3c>
 8007e64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e68:	f100 0001 	add.w	r0, r0, #1
 8007e6c:	bf08      	it	eq
 8007e6e:	2020      	moveq	r0, #32
 8007e70:	4770      	bx	lr

08007e72 <__lo0bits>:
 8007e72:	6803      	ldr	r3, [r0, #0]
 8007e74:	4602      	mov	r2, r0
 8007e76:	f013 0007 	ands.w	r0, r3, #7
 8007e7a:	d00b      	beq.n	8007e94 <__lo0bits+0x22>
 8007e7c:	07d9      	lsls	r1, r3, #31
 8007e7e:	d421      	bmi.n	8007ec4 <__lo0bits+0x52>
 8007e80:	0798      	lsls	r0, r3, #30
 8007e82:	bf49      	itett	mi
 8007e84:	085b      	lsrmi	r3, r3, #1
 8007e86:	089b      	lsrpl	r3, r3, #2
 8007e88:	2001      	movmi	r0, #1
 8007e8a:	6013      	strmi	r3, [r2, #0]
 8007e8c:	bf5c      	itt	pl
 8007e8e:	6013      	strpl	r3, [r2, #0]
 8007e90:	2002      	movpl	r0, #2
 8007e92:	4770      	bx	lr
 8007e94:	b299      	uxth	r1, r3
 8007e96:	b909      	cbnz	r1, 8007e9c <__lo0bits+0x2a>
 8007e98:	0c1b      	lsrs	r3, r3, #16
 8007e9a:	2010      	movs	r0, #16
 8007e9c:	b2d9      	uxtb	r1, r3
 8007e9e:	b909      	cbnz	r1, 8007ea4 <__lo0bits+0x32>
 8007ea0:	3008      	adds	r0, #8
 8007ea2:	0a1b      	lsrs	r3, r3, #8
 8007ea4:	0719      	lsls	r1, r3, #28
 8007ea6:	bf04      	itt	eq
 8007ea8:	091b      	lsreq	r3, r3, #4
 8007eaa:	3004      	addeq	r0, #4
 8007eac:	0799      	lsls	r1, r3, #30
 8007eae:	bf04      	itt	eq
 8007eb0:	089b      	lsreq	r3, r3, #2
 8007eb2:	3002      	addeq	r0, #2
 8007eb4:	07d9      	lsls	r1, r3, #31
 8007eb6:	d403      	bmi.n	8007ec0 <__lo0bits+0x4e>
 8007eb8:	085b      	lsrs	r3, r3, #1
 8007eba:	f100 0001 	add.w	r0, r0, #1
 8007ebe:	d003      	beq.n	8007ec8 <__lo0bits+0x56>
 8007ec0:	6013      	str	r3, [r2, #0]
 8007ec2:	4770      	bx	lr
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	4770      	bx	lr
 8007ec8:	2020      	movs	r0, #32
 8007eca:	4770      	bx	lr

08007ecc <__i2b>:
 8007ecc:	b510      	push	{r4, lr}
 8007ece:	460c      	mov	r4, r1
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	f7ff ff07 	bl	8007ce4 <_Balloc>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	b928      	cbnz	r0, 8007ee6 <__i2b+0x1a>
 8007eda:	4b05      	ldr	r3, [pc, #20]	@ (8007ef0 <__i2b+0x24>)
 8007edc:	4805      	ldr	r0, [pc, #20]	@ (8007ef4 <__i2b+0x28>)
 8007ede:	f240 1145 	movw	r1, #325	@ 0x145
 8007ee2:	f000 fb69 	bl	80085b8 <__assert_func>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	6144      	str	r4, [r0, #20]
 8007eea:	6103      	str	r3, [r0, #16]
 8007eec:	bd10      	pop	{r4, pc}
 8007eee:	bf00      	nop
 8007ef0:	08008dd0 	.word	0x08008dd0
 8007ef4:	08008df2 	.word	0x08008df2

08007ef8 <__multiply>:
 8007ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007efc:	4617      	mov	r7, r2
 8007efe:	690a      	ldr	r2, [r1, #16]
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	bfa8      	it	ge
 8007f06:	463b      	movge	r3, r7
 8007f08:	4689      	mov	r9, r1
 8007f0a:	bfa4      	itt	ge
 8007f0c:	460f      	movge	r7, r1
 8007f0e:	4699      	movge	r9, r3
 8007f10:	693d      	ldr	r5, [r7, #16]
 8007f12:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	6879      	ldr	r1, [r7, #4]
 8007f1a:	eb05 060a 	add.w	r6, r5, sl
 8007f1e:	42b3      	cmp	r3, r6
 8007f20:	b085      	sub	sp, #20
 8007f22:	bfb8      	it	lt
 8007f24:	3101      	addlt	r1, #1
 8007f26:	f7ff fedd 	bl	8007ce4 <_Balloc>
 8007f2a:	b930      	cbnz	r0, 8007f3a <__multiply+0x42>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	4b41      	ldr	r3, [pc, #260]	@ (8008034 <__multiply+0x13c>)
 8007f30:	4841      	ldr	r0, [pc, #260]	@ (8008038 <__multiply+0x140>)
 8007f32:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f36:	f000 fb3f 	bl	80085b8 <__assert_func>
 8007f3a:	f100 0414 	add.w	r4, r0, #20
 8007f3e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007f42:	4623      	mov	r3, r4
 8007f44:	2200      	movs	r2, #0
 8007f46:	4573      	cmp	r3, lr
 8007f48:	d320      	bcc.n	8007f8c <__multiply+0x94>
 8007f4a:	f107 0814 	add.w	r8, r7, #20
 8007f4e:	f109 0114 	add.w	r1, r9, #20
 8007f52:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007f56:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007f5a:	9302      	str	r3, [sp, #8]
 8007f5c:	1beb      	subs	r3, r5, r7
 8007f5e:	3b15      	subs	r3, #21
 8007f60:	f023 0303 	bic.w	r3, r3, #3
 8007f64:	3304      	adds	r3, #4
 8007f66:	3715      	adds	r7, #21
 8007f68:	42bd      	cmp	r5, r7
 8007f6a:	bf38      	it	cc
 8007f6c:	2304      	movcc	r3, #4
 8007f6e:	9301      	str	r3, [sp, #4]
 8007f70:	9b02      	ldr	r3, [sp, #8]
 8007f72:	9103      	str	r1, [sp, #12]
 8007f74:	428b      	cmp	r3, r1
 8007f76:	d80c      	bhi.n	8007f92 <__multiply+0x9a>
 8007f78:	2e00      	cmp	r6, #0
 8007f7a:	dd03      	ble.n	8007f84 <__multiply+0x8c>
 8007f7c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d055      	beq.n	8008030 <__multiply+0x138>
 8007f84:	6106      	str	r6, [r0, #16]
 8007f86:	b005      	add	sp, #20
 8007f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8c:	f843 2b04 	str.w	r2, [r3], #4
 8007f90:	e7d9      	b.n	8007f46 <__multiply+0x4e>
 8007f92:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f96:	f1ba 0f00 	cmp.w	sl, #0
 8007f9a:	d01f      	beq.n	8007fdc <__multiply+0xe4>
 8007f9c:	46c4      	mov	ip, r8
 8007f9e:	46a1      	mov	r9, r4
 8007fa0:	2700      	movs	r7, #0
 8007fa2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007fa6:	f8d9 3000 	ldr.w	r3, [r9]
 8007faa:	fa1f fb82 	uxth.w	fp, r2
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	fb0a 330b 	mla	r3, sl, fp, r3
 8007fb4:	443b      	add	r3, r7
 8007fb6:	f8d9 7000 	ldr.w	r7, [r9]
 8007fba:	0c12      	lsrs	r2, r2, #16
 8007fbc:	0c3f      	lsrs	r7, r7, #16
 8007fbe:	fb0a 7202 	mla	r2, sl, r2, r7
 8007fc2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fcc:	4565      	cmp	r5, ip
 8007fce:	f849 3b04 	str.w	r3, [r9], #4
 8007fd2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007fd6:	d8e4      	bhi.n	8007fa2 <__multiply+0xaa>
 8007fd8:	9b01      	ldr	r3, [sp, #4]
 8007fda:	50e7      	str	r7, [r4, r3]
 8007fdc:	9b03      	ldr	r3, [sp, #12]
 8007fde:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fe2:	3104      	adds	r1, #4
 8007fe4:	f1b9 0f00 	cmp.w	r9, #0
 8007fe8:	d020      	beq.n	800802c <__multiply+0x134>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	4647      	mov	r7, r8
 8007fee:	46a4      	mov	ip, r4
 8007ff0:	f04f 0a00 	mov.w	sl, #0
 8007ff4:	f8b7 b000 	ldrh.w	fp, [r7]
 8007ff8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007ffc:	fb09 220b 	mla	r2, r9, fp, r2
 8008000:	4452      	add	r2, sl
 8008002:	b29b      	uxth	r3, r3
 8008004:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008008:	f84c 3b04 	str.w	r3, [ip], #4
 800800c:	f857 3b04 	ldr.w	r3, [r7], #4
 8008010:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008014:	f8bc 3000 	ldrh.w	r3, [ip]
 8008018:	fb09 330a 	mla	r3, r9, sl, r3
 800801c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008020:	42bd      	cmp	r5, r7
 8008022:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008026:	d8e5      	bhi.n	8007ff4 <__multiply+0xfc>
 8008028:	9a01      	ldr	r2, [sp, #4]
 800802a:	50a3      	str	r3, [r4, r2]
 800802c:	3404      	adds	r4, #4
 800802e:	e79f      	b.n	8007f70 <__multiply+0x78>
 8008030:	3e01      	subs	r6, #1
 8008032:	e7a1      	b.n	8007f78 <__multiply+0x80>
 8008034:	08008dd0 	.word	0x08008dd0
 8008038:	08008df2 	.word	0x08008df2

0800803c <__pow5mult>:
 800803c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008040:	4615      	mov	r5, r2
 8008042:	f012 0203 	ands.w	r2, r2, #3
 8008046:	4607      	mov	r7, r0
 8008048:	460e      	mov	r6, r1
 800804a:	d007      	beq.n	800805c <__pow5mult+0x20>
 800804c:	4c25      	ldr	r4, [pc, #148]	@ (80080e4 <__pow5mult+0xa8>)
 800804e:	3a01      	subs	r2, #1
 8008050:	2300      	movs	r3, #0
 8008052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008056:	f7ff fea7 	bl	8007da8 <__multadd>
 800805a:	4606      	mov	r6, r0
 800805c:	10ad      	asrs	r5, r5, #2
 800805e:	d03d      	beq.n	80080dc <__pow5mult+0xa0>
 8008060:	69fc      	ldr	r4, [r7, #28]
 8008062:	b97c      	cbnz	r4, 8008084 <__pow5mult+0x48>
 8008064:	2010      	movs	r0, #16
 8008066:	f7ff fcdb 	bl	8007a20 <malloc>
 800806a:	4602      	mov	r2, r0
 800806c:	61f8      	str	r0, [r7, #28]
 800806e:	b928      	cbnz	r0, 800807c <__pow5mult+0x40>
 8008070:	4b1d      	ldr	r3, [pc, #116]	@ (80080e8 <__pow5mult+0xac>)
 8008072:	481e      	ldr	r0, [pc, #120]	@ (80080ec <__pow5mult+0xb0>)
 8008074:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008078:	f000 fa9e 	bl	80085b8 <__assert_func>
 800807c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008080:	6004      	str	r4, [r0, #0]
 8008082:	60c4      	str	r4, [r0, #12]
 8008084:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800808c:	b94c      	cbnz	r4, 80080a2 <__pow5mult+0x66>
 800808e:	f240 2171 	movw	r1, #625	@ 0x271
 8008092:	4638      	mov	r0, r7
 8008094:	f7ff ff1a 	bl	8007ecc <__i2b>
 8008098:	2300      	movs	r3, #0
 800809a:	f8c8 0008 	str.w	r0, [r8, #8]
 800809e:	4604      	mov	r4, r0
 80080a0:	6003      	str	r3, [r0, #0]
 80080a2:	f04f 0900 	mov.w	r9, #0
 80080a6:	07eb      	lsls	r3, r5, #31
 80080a8:	d50a      	bpl.n	80080c0 <__pow5mult+0x84>
 80080aa:	4631      	mov	r1, r6
 80080ac:	4622      	mov	r2, r4
 80080ae:	4638      	mov	r0, r7
 80080b0:	f7ff ff22 	bl	8007ef8 <__multiply>
 80080b4:	4631      	mov	r1, r6
 80080b6:	4680      	mov	r8, r0
 80080b8:	4638      	mov	r0, r7
 80080ba:	f7ff fe53 	bl	8007d64 <_Bfree>
 80080be:	4646      	mov	r6, r8
 80080c0:	106d      	asrs	r5, r5, #1
 80080c2:	d00b      	beq.n	80080dc <__pow5mult+0xa0>
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	b938      	cbnz	r0, 80080d8 <__pow5mult+0x9c>
 80080c8:	4622      	mov	r2, r4
 80080ca:	4621      	mov	r1, r4
 80080cc:	4638      	mov	r0, r7
 80080ce:	f7ff ff13 	bl	8007ef8 <__multiply>
 80080d2:	6020      	str	r0, [r4, #0]
 80080d4:	f8c0 9000 	str.w	r9, [r0]
 80080d8:	4604      	mov	r4, r0
 80080da:	e7e4      	b.n	80080a6 <__pow5mult+0x6a>
 80080dc:	4630      	mov	r0, r6
 80080de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e2:	bf00      	nop
 80080e4:	08008e94 	.word	0x08008e94
 80080e8:	08008d61 	.word	0x08008d61
 80080ec:	08008df2 	.word	0x08008df2

080080f0 <__lshift>:
 80080f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f4:	460c      	mov	r4, r1
 80080f6:	6849      	ldr	r1, [r1, #4]
 80080f8:	6923      	ldr	r3, [r4, #16]
 80080fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080fe:	68a3      	ldr	r3, [r4, #8]
 8008100:	4607      	mov	r7, r0
 8008102:	4691      	mov	r9, r2
 8008104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008108:	f108 0601 	add.w	r6, r8, #1
 800810c:	42b3      	cmp	r3, r6
 800810e:	db0b      	blt.n	8008128 <__lshift+0x38>
 8008110:	4638      	mov	r0, r7
 8008112:	f7ff fde7 	bl	8007ce4 <_Balloc>
 8008116:	4605      	mov	r5, r0
 8008118:	b948      	cbnz	r0, 800812e <__lshift+0x3e>
 800811a:	4602      	mov	r2, r0
 800811c:	4b28      	ldr	r3, [pc, #160]	@ (80081c0 <__lshift+0xd0>)
 800811e:	4829      	ldr	r0, [pc, #164]	@ (80081c4 <__lshift+0xd4>)
 8008120:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008124:	f000 fa48 	bl	80085b8 <__assert_func>
 8008128:	3101      	adds	r1, #1
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	e7ee      	b.n	800810c <__lshift+0x1c>
 800812e:	2300      	movs	r3, #0
 8008130:	f100 0114 	add.w	r1, r0, #20
 8008134:	f100 0210 	add.w	r2, r0, #16
 8008138:	4618      	mov	r0, r3
 800813a:	4553      	cmp	r3, sl
 800813c:	db33      	blt.n	80081a6 <__lshift+0xb6>
 800813e:	6920      	ldr	r0, [r4, #16]
 8008140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008144:	f104 0314 	add.w	r3, r4, #20
 8008148:	f019 091f 	ands.w	r9, r9, #31
 800814c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008150:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008154:	d02b      	beq.n	80081ae <__lshift+0xbe>
 8008156:	f1c9 0e20 	rsb	lr, r9, #32
 800815a:	468a      	mov	sl, r1
 800815c:	2200      	movs	r2, #0
 800815e:	6818      	ldr	r0, [r3, #0]
 8008160:	fa00 f009 	lsl.w	r0, r0, r9
 8008164:	4310      	orrs	r0, r2
 8008166:	f84a 0b04 	str.w	r0, [sl], #4
 800816a:	f853 2b04 	ldr.w	r2, [r3], #4
 800816e:	459c      	cmp	ip, r3
 8008170:	fa22 f20e 	lsr.w	r2, r2, lr
 8008174:	d8f3      	bhi.n	800815e <__lshift+0x6e>
 8008176:	ebac 0304 	sub.w	r3, ip, r4
 800817a:	3b15      	subs	r3, #21
 800817c:	f023 0303 	bic.w	r3, r3, #3
 8008180:	3304      	adds	r3, #4
 8008182:	f104 0015 	add.w	r0, r4, #21
 8008186:	4560      	cmp	r0, ip
 8008188:	bf88      	it	hi
 800818a:	2304      	movhi	r3, #4
 800818c:	50ca      	str	r2, [r1, r3]
 800818e:	b10a      	cbz	r2, 8008194 <__lshift+0xa4>
 8008190:	f108 0602 	add.w	r6, r8, #2
 8008194:	3e01      	subs	r6, #1
 8008196:	4638      	mov	r0, r7
 8008198:	612e      	str	r6, [r5, #16]
 800819a:	4621      	mov	r1, r4
 800819c:	f7ff fde2 	bl	8007d64 <_Bfree>
 80081a0:	4628      	mov	r0, r5
 80081a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80081aa:	3301      	adds	r3, #1
 80081ac:	e7c5      	b.n	800813a <__lshift+0x4a>
 80081ae:	3904      	subs	r1, #4
 80081b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80081b8:	459c      	cmp	ip, r3
 80081ba:	d8f9      	bhi.n	80081b0 <__lshift+0xc0>
 80081bc:	e7ea      	b.n	8008194 <__lshift+0xa4>
 80081be:	bf00      	nop
 80081c0:	08008dd0 	.word	0x08008dd0
 80081c4:	08008df2 	.word	0x08008df2

080081c8 <__mcmp>:
 80081c8:	690a      	ldr	r2, [r1, #16]
 80081ca:	4603      	mov	r3, r0
 80081cc:	6900      	ldr	r0, [r0, #16]
 80081ce:	1a80      	subs	r0, r0, r2
 80081d0:	b530      	push	{r4, r5, lr}
 80081d2:	d10e      	bne.n	80081f2 <__mcmp+0x2a>
 80081d4:	3314      	adds	r3, #20
 80081d6:	3114      	adds	r1, #20
 80081d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081e8:	4295      	cmp	r5, r2
 80081ea:	d003      	beq.n	80081f4 <__mcmp+0x2c>
 80081ec:	d205      	bcs.n	80081fa <__mcmp+0x32>
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081f2:	bd30      	pop	{r4, r5, pc}
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	d3f3      	bcc.n	80081e0 <__mcmp+0x18>
 80081f8:	e7fb      	b.n	80081f2 <__mcmp+0x2a>
 80081fa:	2001      	movs	r0, #1
 80081fc:	e7f9      	b.n	80081f2 <__mcmp+0x2a>
	...

08008200 <__mdiff>:
 8008200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	4689      	mov	r9, r1
 8008206:	4606      	mov	r6, r0
 8008208:	4611      	mov	r1, r2
 800820a:	4648      	mov	r0, r9
 800820c:	4614      	mov	r4, r2
 800820e:	f7ff ffdb 	bl	80081c8 <__mcmp>
 8008212:	1e05      	subs	r5, r0, #0
 8008214:	d112      	bne.n	800823c <__mdiff+0x3c>
 8008216:	4629      	mov	r1, r5
 8008218:	4630      	mov	r0, r6
 800821a:	f7ff fd63 	bl	8007ce4 <_Balloc>
 800821e:	4602      	mov	r2, r0
 8008220:	b928      	cbnz	r0, 800822e <__mdiff+0x2e>
 8008222:	4b3f      	ldr	r3, [pc, #252]	@ (8008320 <__mdiff+0x120>)
 8008224:	f240 2137 	movw	r1, #567	@ 0x237
 8008228:	483e      	ldr	r0, [pc, #248]	@ (8008324 <__mdiff+0x124>)
 800822a:	f000 f9c5 	bl	80085b8 <__assert_func>
 800822e:	2301      	movs	r3, #1
 8008230:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008234:	4610      	mov	r0, r2
 8008236:	b003      	add	sp, #12
 8008238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823c:	bfbc      	itt	lt
 800823e:	464b      	movlt	r3, r9
 8008240:	46a1      	movlt	r9, r4
 8008242:	4630      	mov	r0, r6
 8008244:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008248:	bfba      	itte	lt
 800824a:	461c      	movlt	r4, r3
 800824c:	2501      	movlt	r5, #1
 800824e:	2500      	movge	r5, #0
 8008250:	f7ff fd48 	bl	8007ce4 <_Balloc>
 8008254:	4602      	mov	r2, r0
 8008256:	b918      	cbnz	r0, 8008260 <__mdiff+0x60>
 8008258:	4b31      	ldr	r3, [pc, #196]	@ (8008320 <__mdiff+0x120>)
 800825a:	f240 2145 	movw	r1, #581	@ 0x245
 800825e:	e7e3      	b.n	8008228 <__mdiff+0x28>
 8008260:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008264:	6926      	ldr	r6, [r4, #16]
 8008266:	60c5      	str	r5, [r0, #12]
 8008268:	f109 0310 	add.w	r3, r9, #16
 800826c:	f109 0514 	add.w	r5, r9, #20
 8008270:	f104 0e14 	add.w	lr, r4, #20
 8008274:	f100 0b14 	add.w	fp, r0, #20
 8008278:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800827c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008280:	9301      	str	r3, [sp, #4]
 8008282:	46d9      	mov	r9, fp
 8008284:	f04f 0c00 	mov.w	ip, #0
 8008288:	9b01      	ldr	r3, [sp, #4]
 800828a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800828e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008292:	9301      	str	r3, [sp, #4]
 8008294:	fa1f f38a 	uxth.w	r3, sl
 8008298:	4619      	mov	r1, r3
 800829a:	b283      	uxth	r3, r0
 800829c:	1acb      	subs	r3, r1, r3
 800829e:	0c00      	lsrs	r0, r0, #16
 80082a0:	4463      	add	r3, ip
 80082a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80082a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80082b0:	4576      	cmp	r6, lr
 80082b2:	f849 3b04 	str.w	r3, [r9], #4
 80082b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082ba:	d8e5      	bhi.n	8008288 <__mdiff+0x88>
 80082bc:	1b33      	subs	r3, r6, r4
 80082be:	3b15      	subs	r3, #21
 80082c0:	f023 0303 	bic.w	r3, r3, #3
 80082c4:	3415      	adds	r4, #21
 80082c6:	3304      	adds	r3, #4
 80082c8:	42a6      	cmp	r6, r4
 80082ca:	bf38      	it	cc
 80082cc:	2304      	movcc	r3, #4
 80082ce:	441d      	add	r5, r3
 80082d0:	445b      	add	r3, fp
 80082d2:	461e      	mov	r6, r3
 80082d4:	462c      	mov	r4, r5
 80082d6:	4544      	cmp	r4, r8
 80082d8:	d30e      	bcc.n	80082f8 <__mdiff+0xf8>
 80082da:	f108 0103 	add.w	r1, r8, #3
 80082de:	1b49      	subs	r1, r1, r5
 80082e0:	f021 0103 	bic.w	r1, r1, #3
 80082e4:	3d03      	subs	r5, #3
 80082e6:	45a8      	cmp	r8, r5
 80082e8:	bf38      	it	cc
 80082ea:	2100      	movcc	r1, #0
 80082ec:	440b      	add	r3, r1
 80082ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082f2:	b191      	cbz	r1, 800831a <__mdiff+0x11a>
 80082f4:	6117      	str	r7, [r2, #16]
 80082f6:	e79d      	b.n	8008234 <__mdiff+0x34>
 80082f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80082fc:	46e6      	mov	lr, ip
 80082fe:	0c08      	lsrs	r0, r1, #16
 8008300:	fa1c fc81 	uxtah	ip, ip, r1
 8008304:	4471      	add	r1, lr
 8008306:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800830a:	b289      	uxth	r1, r1
 800830c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008310:	f846 1b04 	str.w	r1, [r6], #4
 8008314:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008318:	e7dd      	b.n	80082d6 <__mdiff+0xd6>
 800831a:	3f01      	subs	r7, #1
 800831c:	e7e7      	b.n	80082ee <__mdiff+0xee>
 800831e:	bf00      	nop
 8008320:	08008dd0 	.word	0x08008dd0
 8008324:	08008df2 	.word	0x08008df2

08008328 <__d2b>:
 8008328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800832c:	460f      	mov	r7, r1
 800832e:	2101      	movs	r1, #1
 8008330:	ec59 8b10 	vmov	r8, r9, d0
 8008334:	4616      	mov	r6, r2
 8008336:	f7ff fcd5 	bl	8007ce4 <_Balloc>
 800833a:	4604      	mov	r4, r0
 800833c:	b930      	cbnz	r0, 800834c <__d2b+0x24>
 800833e:	4602      	mov	r2, r0
 8008340:	4b23      	ldr	r3, [pc, #140]	@ (80083d0 <__d2b+0xa8>)
 8008342:	4824      	ldr	r0, [pc, #144]	@ (80083d4 <__d2b+0xac>)
 8008344:	f240 310f 	movw	r1, #783	@ 0x30f
 8008348:	f000 f936 	bl	80085b8 <__assert_func>
 800834c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008354:	b10d      	cbz	r5, 800835a <__d2b+0x32>
 8008356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	f1b8 0300 	subs.w	r3, r8, #0
 8008360:	d023      	beq.n	80083aa <__d2b+0x82>
 8008362:	4668      	mov	r0, sp
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	f7ff fd84 	bl	8007e72 <__lo0bits>
 800836a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800836e:	b1d0      	cbz	r0, 80083a6 <__d2b+0x7e>
 8008370:	f1c0 0320 	rsb	r3, r0, #32
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	430b      	orrs	r3, r1
 800837a:	40c2      	lsrs	r2, r0
 800837c:	6163      	str	r3, [r4, #20]
 800837e:	9201      	str	r2, [sp, #4]
 8008380:	9b01      	ldr	r3, [sp, #4]
 8008382:	61a3      	str	r3, [r4, #24]
 8008384:	2b00      	cmp	r3, #0
 8008386:	bf0c      	ite	eq
 8008388:	2201      	moveq	r2, #1
 800838a:	2202      	movne	r2, #2
 800838c:	6122      	str	r2, [r4, #16]
 800838e:	b1a5      	cbz	r5, 80083ba <__d2b+0x92>
 8008390:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008394:	4405      	add	r5, r0
 8008396:	603d      	str	r5, [r7, #0]
 8008398:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800839c:	6030      	str	r0, [r6, #0]
 800839e:	4620      	mov	r0, r4
 80083a0:	b003      	add	sp, #12
 80083a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083a6:	6161      	str	r1, [r4, #20]
 80083a8:	e7ea      	b.n	8008380 <__d2b+0x58>
 80083aa:	a801      	add	r0, sp, #4
 80083ac:	f7ff fd61 	bl	8007e72 <__lo0bits>
 80083b0:	9b01      	ldr	r3, [sp, #4]
 80083b2:	6163      	str	r3, [r4, #20]
 80083b4:	3020      	adds	r0, #32
 80083b6:	2201      	movs	r2, #1
 80083b8:	e7e8      	b.n	800838c <__d2b+0x64>
 80083ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80083c2:	6038      	str	r0, [r7, #0]
 80083c4:	6918      	ldr	r0, [r3, #16]
 80083c6:	f7ff fd35 	bl	8007e34 <__hi0bits>
 80083ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083ce:	e7e5      	b.n	800839c <__d2b+0x74>
 80083d0:	08008dd0 	.word	0x08008dd0
 80083d4:	08008df2 	.word	0x08008df2

080083d8 <__sread>:
 80083d8:	b510      	push	{r4, lr}
 80083da:	460c      	mov	r4, r1
 80083dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083e0:	f000 f898 	bl	8008514 <_read_r>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	bfab      	itete	ge
 80083e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80083ea:	89a3      	ldrhlt	r3, [r4, #12]
 80083ec:	181b      	addge	r3, r3, r0
 80083ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80083f2:	bfac      	ite	ge
 80083f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80083f6:	81a3      	strhlt	r3, [r4, #12]
 80083f8:	bd10      	pop	{r4, pc}

080083fa <__swrite>:
 80083fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fe:	461f      	mov	r7, r3
 8008400:	898b      	ldrh	r3, [r1, #12]
 8008402:	05db      	lsls	r3, r3, #23
 8008404:	4605      	mov	r5, r0
 8008406:	460c      	mov	r4, r1
 8008408:	4616      	mov	r6, r2
 800840a:	d505      	bpl.n	8008418 <__swrite+0x1e>
 800840c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008410:	2302      	movs	r3, #2
 8008412:	2200      	movs	r2, #0
 8008414:	f000 f86c 	bl	80084f0 <_lseek_r>
 8008418:	89a3      	ldrh	r3, [r4, #12]
 800841a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800841e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008422:	81a3      	strh	r3, [r4, #12]
 8008424:	4632      	mov	r2, r6
 8008426:	463b      	mov	r3, r7
 8008428:	4628      	mov	r0, r5
 800842a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800842e:	f000 b893 	b.w	8008558 <_write_r>

08008432 <__sseek>:
 8008432:	b510      	push	{r4, lr}
 8008434:	460c      	mov	r4, r1
 8008436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843a:	f000 f859 	bl	80084f0 <_lseek_r>
 800843e:	1c43      	adds	r3, r0, #1
 8008440:	89a3      	ldrh	r3, [r4, #12]
 8008442:	bf15      	itete	ne
 8008444:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008446:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800844a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800844e:	81a3      	strheq	r3, [r4, #12]
 8008450:	bf18      	it	ne
 8008452:	81a3      	strhne	r3, [r4, #12]
 8008454:	bd10      	pop	{r4, pc}

08008456 <__sclose>:
 8008456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800845a:	f000 b88f 	b.w	800857c <_close_r>

0800845e <_realloc_r>:
 800845e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008462:	4607      	mov	r7, r0
 8008464:	4614      	mov	r4, r2
 8008466:	460d      	mov	r5, r1
 8008468:	b921      	cbnz	r1, 8008474 <_realloc_r+0x16>
 800846a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800846e:	4611      	mov	r1, r2
 8008470:	f7ff bb00 	b.w	8007a74 <_malloc_r>
 8008474:	b92a      	cbnz	r2, 8008482 <_realloc_r+0x24>
 8008476:	f000 f8d1 	bl	800861c <_free_r>
 800847a:	4625      	mov	r5, r4
 800847c:	4628      	mov	r0, r5
 800847e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008482:	f000 f927 	bl	80086d4 <_malloc_usable_size_r>
 8008486:	4284      	cmp	r4, r0
 8008488:	4606      	mov	r6, r0
 800848a:	d802      	bhi.n	8008492 <_realloc_r+0x34>
 800848c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008490:	d8f4      	bhi.n	800847c <_realloc_r+0x1e>
 8008492:	4621      	mov	r1, r4
 8008494:	4638      	mov	r0, r7
 8008496:	f7ff faed 	bl	8007a74 <_malloc_r>
 800849a:	4680      	mov	r8, r0
 800849c:	b908      	cbnz	r0, 80084a2 <_realloc_r+0x44>
 800849e:	4645      	mov	r5, r8
 80084a0:	e7ec      	b.n	800847c <_realloc_r+0x1e>
 80084a2:	42b4      	cmp	r4, r6
 80084a4:	4622      	mov	r2, r4
 80084a6:	4629      	mov	r1, r5
 80084a8:	bf28      	it	cs
 80084aa:	4632      	movcs	r2, r6
 80084ac:	f000 f876 	bl	800859c <memcpy>
 80084b0:	4629      	mov	r1, r5
 80084b2:	4638      	mov	r0, r7
 80084b4:	f000 f8b2 	bl	800861c <_free_r>
 80084b8:	e7f1      	b.n	800849e <_realloc_r+0x40>

080084ba <memmove>:
 80084ba:	4288      	cmp	r0, r1
 80084bc:	b510      	push	{r4, lr}
 80084be:	eb01 0402 	add.w	r4, r1, r2
 80084c2:	d902      	bls.n	80084ca <memmove+0x10>
 80084c4:	4284      	cmp	r4, r0
 80084c6:	4623      	mov	r3, r4
 80084c8:	d807      	bhi.n	80084da <memmove+0x20>
 80084ca:	1e43      	subs	r3, r0, #1
 80084cc:	42a1      	cmp	r1, r4
 80084ce:	d008      	beq.n	80084e2 <memmove+0x28>
 80084d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084d8:	e7f8      	b.n	80084cc <memmove+0x12>
 80084da:	4402      	add	r2, r0
 80084dc:	4601      	mov	r1, r0
 80084de:	428a      	cmp	r2, r1
 80084e0:	d100      	bne.n	80084e4 <memmove+0x2a>
 80084e2:	bd10      	pop	{r4, pc}
 80084e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084ec:	e7f7      	b.n	80084de <memmove+0x24>
	...

080084f0 <_lseek_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	4d07      	ldr	r5, [pc, #28]	@ (8008510 <_lseek_r+0x20>)
 80084f4:	4604      	mov	r4, r0
 80084f6:	4608      	mov	r0, r1
 80084f8:	4611      	mov	r1, r2
 80084fa:	2200      	movs	r2, #0
 80084fc:	602a      	str	r2, [r5, #0]
 80084fe:	461a      	mov	r2, r3
 8008500:	f7f9 fabf 	bl	8001a82 <_lseek>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d102      	bne.n	800850e <_lseek_r+0x1e>
 8008508:	682b      	ldr	r3, [r5, #0]
 800850a:	b103      	cbz	r3, 800850e <_lseek_r+0x1e>
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	20000494 	.word	0x20000494

08008514 <_read_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4d07      	ldr	r5, [pc, #28]	@ (8008534 <_read_r+0x20>)
 8008518:	4604      	mov	r4, r0
 800851a:	4608      	mov	r0, r1
 800851c:	4611      	mov	r1, r2
 800851e:	2200      	movs	r2, #0
 8008520:	602a      	str	r2, [r5, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	f7f9 fa4d 	bl	80019c2 <_read>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d102      	bne.n	8008532 <_read_r+0x1e>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	b103      	cbz	r3, 8008532 <_read_r+0x1e>
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	bd38      	pop	{r3, r4, r5, pc}
 8008534:	20000494 	.word	0x20000494

08008538 <_sbrk_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4d06      	ldr	r5, [pc, #24]	@ (8008554 <_sbrk_r+0x1c>)
 800853c:	2300      	movs	r3, #0
 800853e:	4604      	mov	r4, r0
 8008540:	4608      	mov	r0, r1
 8008542:	602b      	str	r3, [r5, #0]
 8008544:	f7f9 faaa 	bl	8001a9c <_sbrk>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_sbrk_r+0x1a>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_sbrk_r+0x1a>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	20000494 	.word	0x20000494

08008558 <_write_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4d07      	ldr	r5, [pc, #28]	@ (8008578 <_write_r+0x20>)
 800855c:	4604      	mov	r4, r0
 800855e:	4608      	mov	r0, r1
 8008560:	4611      	mov	r1, r2
 8008562:	2200      	movs	r2, #0
 8008564:	602a      	str	r2, [r5, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	f7f9 fa48 	bl	80019fc <_write>
 800856c:	1c43      	adds	r3, r0, #1
 800856e:	d102      	bne.n	8008576 <_write_r+0x1e>
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	b103      	cbz	r3, 8008576 <_write_r+0x1e>
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	bd38      	pop	{r3, r4, r5, pc}
 8008578:	20000494 	.word	0x20000494

0800857c <_close_r>:
 800857c:	b538      	push	{r3, r4, r5, lr}
 800857e:	4d06      	ldr	r5, [pc, #24]	@ (8008598 <_close_r+0x1c>)
 8008580:	2300      	movs	r3, #0
 8008582:	4604      	mov	r4, r0
 8008584:	4608      	mov	r0, r1
 8008586:	602b      	str	r3, [r5, #0]
 8008588:	f7f9 fa54 	bl	8001a34 <_close>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	d102      	bne.n	8008596 <_close_r+0x1a>
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	b103      	cbz	r3, 8008596 <_close_r+0x1a>
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	bd38      	pop	{r3, r4, r5, pc}
 8008598:	20000494 	.word	0x20000494

0800859c <memcpy>:
 800859c:	440a      	add	r2, r1
 800859e:	4291      	cmp	r1, r2
 80085a0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80085a4:	d100      	bne.n	80085a8 <memcpy+0xc>
 80085a6:	4770      	bx	lr
 80085a8:	b510      	push	{r4, lr}
 80085aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085b2:	4291      	cmp	r1, r2
 80085b4:	d1f9      	bne.n	80085aa <memcpy+0xe>
 80085b6:	bd10      	pop	{r4, pc}

080085b8 <__assert_func>:
 80085b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085ba:	4614      	mov	r4, r2
 80085bc:	461a      	mov	r2, r3
 80085be:	4b09      	ldr	r3, [pc, #36]	@ (80085e4 <__assert_func+0x2c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4605      	mov	r5, r0
 80085c4:	68d8      	ldr	r0, [r3, #12]
 80085c6:	b14c      	cbz	r4, 80085dc <__assert_func+0x24>
 80085c8:	4b07      	ldr	r3, [pc, #28]	@ (80085e8 <__assert_func+0x30>)
 80085ca:	9100      	str	r1, [sp, #0]
 80085cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085d0:	4906      	ldr	r1, [pc, #24]	@ (80085ec <__assert_func+0x34>)
 80085d2:	462b      	mov	r3, r5
 80085d4:	f000 f886 	bl	80086e4 <fiprintf>
 80085d8:	f000 f8a3 	bl	8008722 <abort>
 80085dc:	4b04      	ldr	r3, [pc, #16]	@ (80085f0 <__assert_func+0x38>)
 80085de:	461c      	mov	r4, r3
 80085e0:	e7f3      	b.n	80085ca <__assert_func+0x12>
 80085e2:	bf00      	nop
 80085e4:	2000001c 	.word	0x2000001c
 80085e8:	08008e55 	.word	0x08008e55
 80085ec:	08008e62 	.word	0x08008e62
 80085f0:	08008e90 	.word	0x08008e90

080085f4 <_calloc_r>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	fba1 5402 	umull	r5, r4, r1, r2
 80085fa:	b934      	cbnz	r4, 800860a <_calloc_r+0x16>
 80085fc:	4629      	mov	r1, r5
 80085fe:	f7ff fa39 	bl	8007a74 <_malloc_r>
 8008602:	4606      	mov	r6, r0
 8008604:	b928      	cbnz	r0, 8008612 <_calloc_r+0x1e>
 8008606:	4630      	mov	r0, r6
 8008608:	bd70      	pop	{r4, r5, r6, pc}
 800860a:	220c      	movs	r2, #12
 800860c:	6002      	str	r2, [r0, #0]
 800860e:	2600      	movs	r6, #0
 8008610:	e7f9      	b.n	8008606 <_calloc_r+0x12>
 8008612:	462a      	mov	r2, r5
 8008614:	4621      	mov	r1, r4
 8008616:	f7fe fa17 	bl	8006a48 <memset>
 800861a:	e7f4      	b.n	8008606 <_calloc_r+0x12>

0800861c <_free_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	4605      	mov	r5, r0
 8008620:	2900      	cmp	r1, #0
 8008622:	d041      	beq.n	80086a8 <_free_r+0x8c>
 8008624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008628:	1f0c      	subs	r4, r1, #4
 800862a:	2b00      	cmp	r3, #0
 800862c:	bfb8      	it	lt
 800862e:	18e4      	addlt	r4, r4, r3
 8008630:	f7ff fb4c 	bl	8007ccc <__malloc_lock>
 8008634:	4a1d      	ldr	r2, [pc, #116]	@ (80086ac <_free_r+0x90>)
 8008636:	6813      	ldr	r3, [r2, #0]
 8008638:	b933      	cbnz	r3, 8008648 <_free_r+0x2c>
 800863a:	6063      	str	r3, [r4, #4]
 800863c:	6014      	str	r4, [r2, #0]
 800863e:	4628      	mov	r0, r5
 8008640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008644:	f7ff bb48 	b.w	8007cd8 <__malloc_unlock>
 8008648:	42a3      	cmp	r3, r4
 800864a:	d908      	bls.n	800865e <_free_r+0x42>
 800864c:	6820      	ldr	r0, [r4, #0]
 800864e:	1821      	adds	r1, r4, r0
 8008650:	428b      	cmp	r3, r1
 8008652:	bf01      	itttt	eq
 8008654:	6819      	ldreq	r1, [r3, #0]
 8008656:	685b      	ldreq	r3, [r3, #4]
 8008658:	1809      	addeq	r1, r1, r0
 800865a:	6021      	streq	r1, [r4, #0]
 800865c:	e7ed      	b.n	800863a <_free_r+0x1e>
 800865e:	461a      	mov	r2, r3
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	b10b      	cbz	r3, 8008668 <_free_r+0x4c>
 8008664:	42a3      	cmp	r3, r4
 8008666:	d9fa      	bls.n	800865e <_free_r+0x42>
 8008668:	6811      	ldr	r1, [r2, #0]
 800866a:	1850      	adds	r0, r2, r1
 800866c:	42a0      	cmp	r0, r4
 800866e:	d10b      	bne.n	8008688 <_free_r+0x6c>
 8008670:	6820      	ldr	r0, [r4, #0]
 8008672:	4401      	add	r1, r0
 8008674:	1850      	adds	r0, r2, r1
 8008676:	4283      	cmp	r3, r0
 8008678:	6011      	str	r1, [r2, #0]
 800867a:	d1e0      	bne.n	800863e <_free_r+0x22>
 800867c:	6818      	ldr	r0, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	6053      	str	r3, [r2, #4]
 8008682:	4408      	add	r0, r1
 8008684:	6010      	str	r0, [r2, #0]
 8008686:	e7da      	b.n	800863e <_free_r+0x22>
 8008688:	d902      	bls.n	8008690 <_free_r+0x74>
 800868a:	230c      	movs	r3, #12
 800868c:	602b      	str	r3, [r5, #0]
 800868e:	e7d6      	b.n	800863e <_free_r+0x22>
 8008690:	6820      	ldr	r0, [r4, #0]
 8008692:	1821      	adds	r1, r4, r0
 8008694:	428b      	cmp	r3, r1
 8008696:	bf04      	itt	eq
 8008698:	6819      	ldreq	r1, [r3, #0]
 800869a:	685b      	ldreq	r3, [r3, #4]
 800869c:	6063      	str	r3, [r4, #4]
 800869e:	bf04      	itt	eq
 80086a0:	1809      	addeq	r1, r1, r0
 80086a2:	6021      	streq	r1, [r4, #0]
 80086a4:	6054      	str	r4, [r2, #4]
 80086a6:	e7ca      	b.n	800863e <_free_r+0x22>
 80086a8:	bd38      	pop	{r3, r4, r5, pc}
 80086aa:	bf00      	nop
 80086ac:	20000490 	.word	0x20000490

080086b0 <__ascii_mbtowc>:
 80086b0:	b082      	sub	sp, #8
 80086b2:	b901      	cbnz	r1, 80086b6 <__ascii_mbtowc+0x6>
 80086b4:	a901      	add	r1, sp, #4
 80086b6:	b142      	cbz	r2, 80086ca <__ascii_mbtowc+0x1a>
 80086b8:	b14b      	cbz	r3, 80086ce <__ascii_mbtowc+0x1e>
 80086ba:	7813      	ldrb	r3, [r2, #0]
 80086bc:	600b      	str	r3, [r1, #0]
 80086be:	7812      	ldrb	r2, [r2, #0]
 80086c0:	1e10      	subs	r0, r2, #0
 80086c2:	bf18      	it	ne
 80086c4:	2001      	movne	r0, #1
 80086c6:	b002      	add	sp, #8
 80086c8:	4770      	bx	lr
 80086ca:	4610      	mov	r0, r2
 80086cc:	e7fb      	b.n	80086c6 <__ascii_mbtowc+0x16>
 80086ce:	f06f 0001 	mvn.w	r0, #1
 80086d2:	e7f8      	b.n	80086c6 <__ascii_mbtowc+0x16>

080086d4 <_malloc_usable_size_r>:
 80086d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086d8:	1f18      	subs	r0, r3, #4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	bfbc      	itt	lt
 80086de:	580b      	ldrlt	r3, [r1, r0]
 80086e0:	18c0      	addlt	r0, r0, r3
 80086e2:	4770      	bx	lr

080086e4 <fiprintf>:
 80086e4:	b40e      	push	{r1, r2, r3}
 80086e6:	b503      	push	{r0, r1, lr}
 80086e8:	4601      	mov	r1, r0
 80086ea:	ab03      	add	r3, sp, #12
 80086ec:	4805      	ldr	r0, [pc, #20]	@ (8008704 <fiprintf+0x20>)
 80086ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80086f2:	6800      	ldr	r0, [r0, #0]
 80086f4:	9301      	str	r3, [sp, #4]
 80086f6:	f000 f845 	bl	8008784 <_vfiprintf_r>
 80086fa:	b002      	add	sp, #8
 80086fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008700:	b003      	add	sp, #12
 8008702:	4770      	bx	lr
 8008704:	2000001c 	.word	0x2000001c

08008708 <__ascii_wctomb>:
 8008708:	4603      	mov	r3, r0
 800870a:	4608      	mov	r0, r1
 800870c:	b141      	cbz	r1, 8008720 <__ascii_wctomb+0x18>
 800870e:	2aff      	cmp	r2, #255	@ 0xff
 8008710:	d904      	bls.n	800871c <__ascii_wctomb+0x14>
 8008712:	228a      	movs	r2, #138	@ 0x8a
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800871a:	4770      	bx	lr
 800871c:	700a      	strb	r2, [r1, #0]
 800871e:	2001      	movs	r0, #1
 8008720:	4770      	bx	lr

08008722 <abort>:
 8008722:	b508      	push	{r3, lr}
 8008724:	2006      	movs	r0, #6
 8008726:	f000 fa63 	bl	8008bf0 <raise>
 800872a:	2001      	movs	r0, #1
 800872c:	f7f9 f93e 	bl	80019ac <_exit>

08008730 <__sfputc_r>:
 8008730:	6893      	ldr	r3, [r2, #8]
 8008732:	3b01      	subs	r3, #1
 8008734:	2b00      	cmp	r3, #0
 8008736:	b410      	push	{r4}
 8008738:	6093      	str	r3, [r2, #8]
 800873a:	da08      	bge.n	800874e <__sfputc_r+0x1e>
 800873c:	6994      	ldr	r4, [r2, #24]
 800873e:	42a3      	cmp	r3, r4
 8008740:	db01      	blt.n	8008746 <__sfputc_r+0x16>
 8008742:	290a      	cmp	r1, #10
 8008744:	d103      	bne.n	800874e <__sfputc_r+0x1e>
 8008746:	f85d 4b04 	ldr.w	r4, [sp], #4
 800874a:	f000 b933 	b.w	80089b4 <__swbuf_r>
 800874e:	6813      	ldr	r3, [r2, #0]
 8008750:	1c58      	adds	r0, r3, #1
 8008752:	6010      	str	r0, [r2, #0]
 8008754:	7019      	strb	r1, [r3, #0]
 8008756:	4608      	mov	r0, r1
 8008758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800875c:	4770      	bx	lr

0800875e <__sfputs_r>:
 800875e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008760:	4606      	mov	r6, r0
 8008762:	460f      	mov	r7, r1
 8008764:	4614      	mov	r4, r2
 8008766:	18d5      	adds	r5, r2, r3
 8008768:	42ac      	cmp	r4, r5
 800876a:	d101      	bne.n	8008770 <__sfputs_r+0x12>
 800876c:	2000      	movs	r0, #0
 800876e:	e007      	b.n	8008780 <__sfputs_r+0x22>
 8008770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008774:	463a      	mov	r2, r7
 8008776:	4630      	mov	r0, r6
 8008778:	f7ff ffda 	bl	8008730 <__sfputc_r>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d1f3      	bne.n	8008768 <__sfputs_r+0xa>
 8008780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008784 <_vfiprintf_r>:
 8008784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	460d      	mov	r5, r1
 800878a:	b09d      	sub	sp, #116	@ 0x74
 800878c:	4614      	mov	r4, r2
 800878e:	4698      	mov	r8, r3
 8008790:	4606      	mov	r6, r0
 8008792:	b118      	cbz	r0, 800879c <_vfiprintf_r+0x18>
 8008794:	6a03      	ldr	r3, [r0, #32]
 8008796:	b90b      	cbnz	r3, 800879c <_vfiprintf_r+0x18>
 8008798:	f7fe f920 	bl	80069dc <__sinit>
 800879c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800879e:	07d9      	lsls	r1, r3, #31
 80087a0:	d405      	bmi.n	80087ae <_vfiprintf_r+0x2a>
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	059a      	lsls	r2, r3, #22
 80087a6:	d402      	bmi.n	80087ae <_vfiprintf_r+0x2a>
 80087a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087aa:	f7fe f980 	bl	8006aae <__retarget_lock_acquire_recursive>
 80087ae:	89ab      	ldrh	r3, [r5, #12]
 80087b0:	071b      	lsls	r3, r3, #28
 80087b2:	d501      	bpl.n	80087b8 <_vfiprintf_r+0x34>
 80087b4:	692b      	ldr	r3, [r5, #16]
 80087b6:	b99b      	cbnz	r3, 80087e0 <_vfiprintf_r+0x5c>
 80087b8:	4629      	mov	r1, r5
 80087ba:	4630      	mov	r0, r6
 80087bc:	f000 f938 	bl	8008a30 <__swsetup_r>
 80087c0:	b170      	cbz	r0, 80087e0 <_vfiprintf_r+0x5c>
 80087c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087c4:	07dc      	lsls	r4, r3, #31
 80087c6:	d504      	bpl.n	80087d2 <_vfiprintf_r+0x4e>
 80087c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087cc:	b01d      	add	sp, #116	@ 0x74
 80087ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d2:	89ab      	ldrh	r3, [r5, #12]
 80087d4:	0598      	lsls	r0, r3, #22
 80087d6:	d4f7      	bmi.n	80087c8 <_vfiprintf_r+0x44>
 80087d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087da:	f7fe f969 	bl	8006ab0 <__retarget_lock_release_recursive>
 80087de:	e7f3      	b.n	80087c8 <_vfiprintf_r+0x44>
 80087e0:	2300      	movs	r3, #0
 80087e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e4:	2320      	movs	r3, #32
 80087e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ee:	2330      	movs	r3, #48	@ 0x30
 80087f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80089a0 <_vfiprintf_r+0x21c>
 80087f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087f8:	f04f 0901 	mov.w	r9, #1
 80087fc:	4623      	mov	r3, r4
 80087fe:	469a      	mov	sl, r3
 8008800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008804:	b10a      	cbz	r2, 800880a <_vfiprintf_r+0x86>
 8008806:	2a25      	cmp	r2, #37	@ 0x25
 8008808:	d1f9      	bne.n	80087fe <_vfiprintf_r+0x7a>
 800880a:	ebba 0b04 	subs.w	fp, sl, r4
 800880e:	d00b      	beq.n	8008828 <_vfiprintf_r+0xa4>
 8008810:	465b      	mov	r3, fp
 8008812:	4622      	mov	r2, r4
 8008814:	4629      	mov	r1, r5
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff ffa1 	bl	800875e <__sfputs_r>
 800881c:	3001      	adds	r0, #1
 800881e:	f000 80a7 	beq.w	8008970 <_vfiprintf_r+0x1ec>
 8008822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008824:	445a      	add	r2, fp
 8008826:	9209      	str	r2, [sp, #36]	@ 0x24
 8008828:	f89a 3000 	ldrb.w	r3, [sl]
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 809f 	beq.w	8008970 <_vfiprintf_r+0x1ec>
 8008832:	2300      	movs	r3, #0
 8008834:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800883c:	f10a 0a01 	add.w	sl, sl, #1
 8008840:	9304      	str	r3, [sp, #16]
 8008842:	9307      	str	r3, [sp, #28]
 8008844:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008848:	931a      	str	r3, [sp, #104]	@ 0x68
 800884a:	4654      	mov	r4, sl
 800884c:	2205      	movs	r2, #5
 800884e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008852:	4853      	ldr	r0, [pc, #332]	@ (80089a0 <_vfiprintf_r+0x21c>)
 8008854:	f7f7 fcbc 	bl	80001d0 <memchr>
 8008858:	9a04      	ldr	r2, [sp, #16]
 800885a:	b9d8      	cbnz	r0, 8008894 <_vfiprintf_r+0x110>
 800885c:	06d1      	lsls	r1, r2, #27
 800885e:	bf44      	itt	mi
 8008860:	2320      	movmi	r3, #32
 8008862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008866:	0713      	lsls	r3, r2, #28
 8008868:	bf44      	itt	mi
 800886a:	232b      	movmi	r3, #43	@ 0x2b
 800886c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008870:	f89a 3000 	ldrb.w	r3, [sl]
 8008874:	2b2a      	cmp	r3, #42	@ 0x2a
 8008876:	d015      	beq.n	80088a4 <_vfiprintf_r+0x120>
 8008878:	9a07      	ldr	r2, [sp, #28]
 800887a:	4654      	mov	r4, sl
 800887c:	2000      	movs	r0, #0
 800887e:	f04f 0c0a 	mov.w	ip, #10
 8008882:	4621      	mov	r1, r4
 8008884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008888:	3b30      	subs	r3, #48	@ 0x30
 800888a:	2b09      	cmp	r3, #9
 800888c:	d94b      	bls.n	8008926 <_vfiprintf_r+0x1a2>
 800888e:	b1b0      	cbz	r0, 80088be <_vfiprintf_r+0x13a>
 8008890:	9207      	str	r2, [sp, #28]
 8008892:	e014      	b.n	80088be <_vfiprintf_r+0x13a>
 8008894:	eba0 0308 	sub.w	r3, r0, r8
 8008898:	fa09 f303 	lsl.w	r3, r9, r3
 800889c:	4313      	orrs	r3, r2
 800889e:	9304      	str	r3, [sp, #16]
 80088a0:	46a2      	mov	sl, r4
 80088a2:	e7d2      	b.n	800884a <_vfiprintf_r+0xc6>
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	1d19      	adds	r1, r3, #4
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	9103      	str	r1, [sp, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bfbb      	ittet	lt
 80088b0:	425b      	neglt	r3, r3
 80088b2:	f042 0202 	orrlt.w	r2, r2, #2
 80088b6:	9307      	strge	r3, [sp, #28]
 80088b8:	9307      	strlt	r3, [sp, #28]
 80088ba:	bfb8      	it	lt
 80088bc:	9204      	strlt	r2, [sp, #16]
 80088be:	7823      	ldrb	r3, [r4, #0]
 80088c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80088c2:	d10a      	bne.n	80088da <_vfiprintf_r+0x156>
 80088c4:	7863      	ldrb	r3, [r4, #1]
 80088c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c8:	d132      	bne.n	8008930 <_vfiprintf_r+0x1ac>
 80088ca:	9b03      	ldr	r3, [sp, #12]
 80088cc:	1d1a      	adds	r2, r3, #4
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	9203      	str	r2, [sp, #12]
 80088d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088d6:	3402      	adds	r4, #2
 80088d8:	9305      	str	r3, [sp, #20]
 80088da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089b0 <_vfiprintf_r+0x22c>
 80088de:	7821      	ldrb	r1, [r4, #0]
 80088e0:	2203      	movs	r2, #3
 80088e2:	4650      	mov	r0, sl
 80088e4:	f7f7 fc74 	bl	80001d0 <memchr>
 80088e8:	b138      	cbz	r0, 80088fa <_vfiprintf_r+0x176>
 80088ea:	9b04      	ldr	r3, [sp, #16]
 80088ec:	eba0 000a 	sub.w	r0, r0, sl
 80088f0:	2240      	movs	r2, #64	@ 0x40
 80088f2:	4082      	lsls	r2, r0
 80088f4:	4313      	orrs	r3, r2
 80088f6:	3401      	adds	r4, #1
 80088f8:	9304      	str	r3, [sp, #16]
 80088fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088fe:	4829      	ldr	r0, [pc, #164]	@ (80089a4 <_vfiprintf_r+0x220>)
 8008900:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008904:	2206      	movs	r2, #6
 8008906:	f7f7 fc63 	bl	80001d0 <memchr>
 800890a:	2800      	cmp	r0, #0
 800890c:	d03f      	beq.n	800898e <_vfiprintf_r+0x20a>
 800890e:	4b26      	ldr	r3, [pc, #152]	@ (80089a8 <_vfiprintf_r+0x224>)
 8008910:	bb1b      	cbnz	r3, 800895a <_vfiprintf_r+0x1d6>
 8008912:	9b03      	ldr	r3, [sp, #12]
 8008914:	3307      	adds	r3, #7
 8008916:	f023 0307 	bic.w	r3, r3, #7
 800891a:	3308      	adds	r3, #8
 800891c:	9303      	str	r3, [sp, #12]
 800891e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008920:	443b      	add	r3, r7
 8008922:	9309      	str	r3, [sp, #36]	@ 0x24
 8008924:	e76a      	b.n	80087fc <_vfiprintf_r+0x78>
 8008926:	fb0c 3202 	mla	r2, ip, r2, r3
 800892a:	460c      	mov	r4, r1
 800892c:	2001      	movs	r0, #1
 800892e:	e7a8      	b.n	8008882 <_vfiprintf_r+0xfe>
 8008930:	2300      	movs	r3, #0
 8008932:	3401      	adds	r4, #1
 8008934:	9305      	str	r3, [sp, #20]
 8008936:	4619      	mov	r1, r3
 8008938:	f04f 0c0a 	mov.w	ip, #10
 800893c:	4620      	mov	r0, r4
 800893e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008942:	3a30      	subs	r2, #48	@ 0x30
 8008944:	2a09      	cmp	r2, #9
 8008946:	d903      	bls.n	8008950 <_vfiprintf_r+0x1cc>
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0c6      	beq.n	80088da <_vfiprintf_r+0x156>
 800894c:	9105      	str	r1, [sp, #20]
 800894e:	e7c4      	b.n	80088da <_vfiprintf_r+0x156>
 8008950:	fb0c 2101 	mla	r1, ip, r1, r2
 8008954:	4604      	mov	r4, r0
 8008956:	2301      	movs	r3, #1
 8008958:	e7f0      	b.n	800893c <_vfiprintf_r+0x1b8>
 800895a:	ab03      	add	r3, sp, #12
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	462a      	mov	r2, r5
 8008960:	4b12      	ldr	r3, [pc, #72]	@ (80089ac <_vfiprintf_r+0x228>)
 8008962:	a904      	add	r1, sp, #16
 8008964:	4630      	mov	r0, r6
 8008966:	f7fd fb9f 	bl	80060a8 <_printf_float>
 800896a:	4607      	mov	r7, r0
 800896c:	1c78      	adds	r0, r7, #1
 800896e:	d1d6      	bne.n	800891e <_vfiprintf_r+0x19a>
 8008970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008972:	07d9      	lsls	r1, r3, #31
 8008974:	d405      	bmi.n	8008982 <_vfiprintf_r+0x1fe>
 8008976:	89ab      	ldrh	r3, [r5, #12]
 8008978:	059a      	lsls	r2, r3, #22
 800897a:	d402      	bmi.n	8008982 <_vfiprintf_r+0x1fe>
 800897c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800897e:	f7fe f897 	bl	8006ab0 <__retarget_lock_release_recursive>
 8008982:	89ab      	ldrh	r3, [r5, #12]
 8008984:	065b      	lsls	r3, r3, #25
 8008986:	f53f af1f 	bmi.w	80087c8 <_vfiprintf_r+0x44>
 800898a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800898c:	e71e      	b.n	80087cc <_vfiprintf_r+0x48>
 800898e:	ab03      	add	r3, sp, #12
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	462a      	mov	r2, r5
 8008994:	4b05      	ldr	r3, [pc, #20]	@ (80089ac <_vfiprintf_r+0x228>)
 8008996:	a904      	add	r1, sp, #16
 8008998:	4630      	mov	r0, r6
 800899a:	f7fd fe1d 	bl	80065d8 <_printf_i>
 800899e:	e7e4      	b.n	800896a <_vfiprintf_r+0x1e6>
 80089a0:	08008de1 	.word	0x08008de1
 80089a4:	08008deb 	.word	0x08008deb
 80089a8:	080060a9 	.word	0x080060a9
 80089ac:	0800875f 	.word	0x0800875f
 80089b0:	08008de7 	.word	0x08008de7

080089b4 <__swbuf_r>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	460e      	mov	r6, r1
 80089b8:	4614      	mov	r4, r2
 80089ba:	4605      	mov	r5, r0
 80089bc:	b118      	cbz	r0, 80089c6 <__swbuf_r+0x12>
 80089be:	6a03      	ldr	r3, [r0, #32]
 80089c0:	b90b      	cbnz	r3, 80089c6 <__swbuf_r+0x12>
 80089c2:	f7fe f80b 	bl	80069dc <__sinit>
 80089c6:	69a3      	ldr	r3, [r4, #24]
 80089c8:	60a3      	str	r3, [r4, #8]
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	071a      	lsls	r2, r3, #28
 80089ce:	d501      	bpl.n	80089d4 <__swbuf_r+0x20>
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	b943      	cbnz	r3, 80089e6 <__swbuf_r+0x32>
 80089d4:	4621      	mov	r1, r4
 80089d6:	4628      	mov	r0, r5
 80089d8:	f000 f82a 	bl	8008a30 <__swsetup_r>
 80089dc:	b118      	cbz	r0, 80089e6 <__swbuf_r+0x32>
 80089de:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80089e2:	4638      	mov	r0, r7
 80089e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089e6:	6823      	ldr	r3, [r4, #0]
 80089e8:	6922      	ldr	r2, [r4, #16]
 80089ea:	1a98      	subs	r0, r3, r2
 80089ec:	6963      	ldr	r3, [r4, #20]
 80089ee:	b2f6      	uxtb	r6, r6
 80089f0:	4283      	cmp	r3, r0
 80089f2:	4637      	mov	r7, r6
 80089f4:	dc05      	bgt.n	8008a02 <__swbuf_r+0x4e>
 80089f6:	4621      	mov	r1, r4
 80089f8:	4628      	mov	r0, r5
 80089fa:	f7ff f93f 	bl	8007c7c <_fflush_r>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d1ed      	bne.n	80089de <__swbuf_r+0x2a>
 8008a02:	68a3      	ldr	r3, [r4, #8]
 8008a04:	3b01      	subs	r3, #1
 8008a06:	60a3      	str	r3, [r4, #8]
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	1c5a      	adds	r2, r3, #1
 8008a0c:	6022      	str	r2, [r4, #0]
 8008a0e:	701e      	strb	r6, [r3, #0]
 8008a10:	6962      	ldr	r2, [r4, #20]
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d004      	beq.n	8008a22 <__swbuf_r+0x6e>
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	07db      	lsls	r3, r3, #31
 8008a1c:	d5e1      	bpl.n	80089e2 <__swbuf_r+0x2e>
 8008a1e:	2e0a      	cmp	r6, #10
 8008a20:	d1df      	bne.n	80089e2 <__swbuf_r+0x2e>
 8008a22:	4621      	mov	r1, r4
 8008a24:	4628      	mov	r0, r5
 8008a26:	f7ff f929 	bl	8007c7c <_fflush_r>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d0d9      	beq.n	80089e2 <__swbuf_r+0x2e>
 8008a2e:	e7d6      	b.n	80089de <__swbuf_r+0x2a>

08008a30 <__swsetup_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4b29      	ldr	r3, [pc, #164]	@ (8008ad8 <__swsetup_r+0xa8>)
 8008a34:	4605      	mov	r5, r0
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	460c      	mov	r4, r1
 8008a3a:	b118      	cbz	r0, 8008a44 <__swsetup_r+0x14>
 8008a3c:	6a03      	ldr	r3, [r0, #32]
 8008a3e:	b90b      	cbnz	r3, 8008a44 <__swsetup_r+0x14>
 8008a40:	f7fd ffcc 	bl	80069dc <__sinit>
 8008a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a48:	0719      	lsls	r1, r3, #28
 8008a4a:	d422      	bmi.n	8008a92 <__swsetup_r+0x62>
 8008a4c:	06da      	lsls	r2, r3, #27
 8008a4e:	d407      	bmi.n	8008a60 <__swsetup_r+0x30>
 8008a50:	2209      	movs	r2, #9
 8008a52:	602a      	str	r2, [r5, #0]
 8008a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a58:	81a3      	strh	r3, [r4, #12]
 8008a5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a5e:	e033      	b.n	8008ac8 <__swsetup_r+0x98>
 8008a60:	0758      	lsls	r0, r3, #29
 8008a62:	d512      	bpl.n	8008a8a <__swsetup_r+0x5a>
 8008a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a66:	b141      	cbz	r1, 8008a7a <__swsetup_r+0x4a>
 8008a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a6c:	4299      	cmp	r1, r3
 8008a6e:	d002      	beq.n	8008a76 <__swsetup_r+0x46>
 8008a70:	4628      	mov	r0, r5
 8008a72:	f7ff fdd3 	bl	800861c <_free_r>
 8008a76:	2300      	movs	r3, #0
 8008a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a80:	81a3      	strh	r3, [r4, #12]
 8008a82:	2300      	movs	r3, #0
 8008a84:	6063      	str	r3, [r4, #4]
 8008a86:	6923      	ldr	r3, [r4, #16]
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	f043 0308 	orr.w	r3, r3, #8
 8008a90:	81a3      	strh	r3, [r4, #12]
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	b94b      	cbnz	r3, 8008aaa <__swsetup_r+0x7a>
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aa0:	d003      	beq.n	8008aaa <__swsetup_r+0x7a>
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f000 f83f 	bl	8008b28 <__smakebuf_r>
 8008aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aae:	f013 0201 	ands.w	r2, r3, #1
 8008ab2:	d00a      	beq.n	8008aca <__swsetup_r+0x9a>
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	60a2      	str	r2, [r4, #8]
 8008ab8:	6962      	ldr	r2, [r4, #20]
 8008aba:	4252      	negs	r2, r2
 8008abc:	61a2      	str	r2, [r4, #24]
 8008abe:	6922      	ldr	r2, [r4, #16]
 8008ac0:	b942      	cbnz	r2, 8008ad4 <__swsetup_r+0xa4>
 8008ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008ac6:	d1c5      	bne.n	8008a54 <__swsetup_r+0x24>
 8008ac8:	bd38      	pop	{r3, r4, r5, pc}
 8008aca:	0799      	lsls	r1, r3, #30
 8008acc:	bf58      	it	pl
 8008ace:	6962      	ldrpl	r2, [r4, #20]
 8008ad0:	60a2      	str	r2, [r4, #8]
 8008ad2:	e7f4      	b.n	8008abe <__swsetup_r+0x8e>
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	e7f7      	b.n	8008ac8 <__swsetup_r+0x98>
 8008ad8:	2000001c 	.word	0x2000001c

08008adc <__swhatbuf_r>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	460c      	mov	r4, r1
 8008ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae4:	2900      	cmp	r1, #0
 8008ae6:	b096      	sub	sp, #88	@ 0x58
 8008ae8:	4615      	mov	r5, r2
 8008aea:	461e      	mov	r6, r3
 8008aec:	da0d      	bge.n	8008b0a <__swhatbuf_r+0x2e>
 8008aee:	89a3      	ldrh	r3, [r4, #12]
 8008af0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008af4:	f04f 0100 	mov.w	r1, #0
 8008af8:	bf14      	ite	ne
 8008afa:	2340      	movne	r3, #64	@ 0x40
 8008afc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b00:	2000      	movs	r0, #0
 8008b02:	6031      	str	r1, [r6, #0]
 8008b04:	602b      	str	r3, [r5, #0]
 8008b06:	b016      	add	sp, #88	@ 0x58
 8008b08:	bd70      	pop	{r4, r5, r6, pc}
 8008b0a:	466a      	mov	r2, sp
 8008b0c:	f000 f89c 	bl	8008c48 <_fstat_r>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	dbec      	blt.n	8008aee <__swhatbuf_r+0x12>
 8008b14:	9901      	ldr	r1, [sp, #4]
 8008b16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b1e:	4259      	negs	r1, r3
 8008b20:	4159      	adcs	r1, r3
 8008b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b26:	e7eb      	b.n	8008b00 <__swhatbuf_r+0x24>

08008b28 <__smakebuf_r>:
 8008b28:	898b      	ldrh	r3, [r1, #12]
 8008b2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b2c:	079d      	lsls	r5, r3, #30
 8008b2e:	4606      	mov	r6, r0
 8008b30:	460c      	mov	r4, r1
 8008b32:	d507      	bpl.n	8008b44 <__smakebuf_r+0x1c>
 8008b34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	6163      	str	r3, [r4, #20]
 8008b40:	b003      	add	sp, #12
 8008b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b44:	ab01      	add	r3, sp, #4
 8008b46:	466a      	mov	r2, sp
 8008b48:	f7ff ffc8 	bl	8008adc <__swhatbuf_r>
 8008b4c:	9f00      	ldr	r7, [sp, #0]
 8008b4e:	4605      	mov	r5, r0
 8008b50:	4639      	mov	r1, r7
 8008b52:	4630      	mov	r0, r6
 8008b54:	f7fe ff8e 	bl	8007a74 <_malloc_r>
 8008b58:	b948      	cbnz	r0, 8008b6e <__smakebuf_r+0x46>
 8008b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b5e:	059a      	lsls	r2, r3, #22
 8008b60:	d4ee      	bmi.n	8008b40 <__smakebuf_r+0x18>
 8008b62:	f023 0303 	bic.w	r3, r3, #3
 8008b66:	f043 0302 	orr.w	r3, r3, #2
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	e7e2      	b.n	8008b34 <__smakebuf_r+0xc>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	6020      	str	r0, [r4, #0]
 8008b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b76:	81a3      	strh	r3, [r4, #12]
 8008b78:	9b01      	ldr	r3, [sp, #4]
 8008b7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b7e:	b15b      	cbz	r3, 8008b98 <__smakebuf_r+0x70>
 8008b80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b84:	4630      	mov	r0, r6
 8008b86:	f000 f83b 	bl	8008c00 <_isatty_r>
 8008b8a:	b128      	cbz	r0, 8008b98 <__smakebuf_r+0x70>
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	f023 0303 	bic.w	r3, r3, #3
 8008b92:	f043 0301 	orr.w	r3, r3, #1
 8008b96:	81a3      	strh	r3, [r4, #12]
 8008b98:	89a3      	ldrh	r3, [r4, #12]
 8008b9a:	431d      	orrs	r5, r3
 8008b9c:	81a5      	strh	r5, [r4, #12]
 8008b9e:	e7cf      	b.n	8008b40 <__smakebuf_r+0x18>

08008ba0 <_raise_r>:
 8008ba0:	291f      	cmp	r1, #31
 8008ba2:	b538      	push	{r3, r4, r5, lr}
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	d904      	bls.n	8008bb4 <_raise_r+0x14>
 8008baa:	2316      	movs	r3, #22
 8008bac:	6003      	str	r3, [r0, #0]
 8008bae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008bb6:	b112      	cbz	r2, 8008bbe <_raise_r+0x1e>
 8008bb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bbc:	b94b      	cbnz	r3, 8008bd2 <_raise_r+0x32>
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	f000 f840 	bl	8008c44 <_getpid_r>
 8008bc4:	4622      	mov	r2, r4
 8008bc6:	4601      	mov	r1, r0
 8008bc8:	4628      	mov	r0, r5
 8008bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bce:	f000 b827 	b.w	8008c20 <_kill_r>
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d00a      	beq.n	8008bec <_raise_r+0x4c>
 8008bd6:	1c59      	adds	r1, r3, #1
 8008bd8:	d103      	bne.n	8008be2 <_raise_r+0x42>
 8008bda:	2316      	movs	r3, #22
 8008bdc:	6003      	str	r3, [r0, #0]
 8008bde:	2001      	movs	r0, #1
 8008be0:	e7e7      	b.n	8008bb2 <_raise_r+0x12>
 8008be2:	2100      	movs	r1, #0
 8008be4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008be8:	4620      	mov	r0, r4
 8008bea:	4798      	blx	r3
 8008bec:	2000      	movs	r0, #0
 8008bee:	e7e0      	b.n	8008bb2 <_raise_r+0x12>

08008bf0 <raise>:
 8008bf0:	4b02      	ldr	r3, [pc, #8]	@ (8008bfc <raise+0xc>)
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	f7ff bfd3 	b.w	8008ba0 <_raise_r>
 8008bfa:	bf00      	nop
 8008bfc:	2000001c 	.word	0x2000001c

08008c00 <_isatty_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4d06      	ldr	r5, [pc, #24]	@ (8008c1c <_isatty_r+0x1c>)
 8008c04:	2300      	movs	r3, #0
 8008c06:	4604      	mov	r4, r0
 8008c08:	4608      	mov	r0, r1
 8008c0a:	602b      	str	r3, [r5, #0]
 8008c0c:	f7f8 ff2e 	bl	8001a6c <_isatty>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d102      	bne.n	8008c1a <_isatty_r+0x1a>
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	b103      	cbz	r3, 8008c1a <_isatty_r+0x1a>
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	20000494 	.word	0x20000494

08008c20 <_kill_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4d07      	ldr	r5, [pc, #28]	@ (8008c40 <_kill_r+0x20>)
 8008c24:	2300      	movs	r3, #0
 8008c26:	4604      	mov	r4, r0
 8008c28:	4608      	mov	r0, r1
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	602b      	str	r3, [r5, #0]
 8008c2e:	f7f8 fead 	bl	800198c <_kill>
 8008c32:	1c43      	adds	r3, r0, #1
 8008c34:	d102      	bne.n	8008c3c <_kill_r+0x1c>
 8008c36:	682b      	ldr	r3, [r5, #0]
 8008c38:	b103      	cbz	r3, 8008c3c <_kill_r+0x1c>
 8008c3a:	6023      	str	r3, [r4, #0]
 8008c3c:	bd38      	pop	{r3, r4, r5, pc}
 8008c3e:	bf00      	nop
 8008c40:	20000494 	.word	0x20000494

08008c44 <_getpid_r>:
 8008c44:	f7f8 be9a 	b.w	800197c <_getpid>

08008c48 <_fstat_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d07      	ldr	r5, [pc, #28]	@ (8008c68 <_fstat_r+0x20>)
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	4611      	mov	r1, r2
 8008c54:	602b      	str	r3, [r5, #0]
 8008c56:	f7f8 fef9 	bl	8001a4c <_fstat>
 8008c5a:	1c43      	adds	r3, r0, #1
 8008c5c:	d102      	bne.n	8008c64 <_fstat_r+0x1c>
 8008c5e:	682b      	ldr	r3, [r5, #0]
 8008c60:	b103      	cbz	r3, 8008c64 <_fstat_r+0x1c>
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	bd38      	pop	{r3, r4, r5, pc}
 8008c66:	bf00      	nop
 8008c68:	20000494 	.word	0x20000494

08008c6c <_init>:
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6e:	bf00      	nop
 8008c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c72:	bc08      	pop	{r3}
 8008c74:	469e      	mov	lr, r3
 8008c76:	4770      	bx	lr

08008c78 <_fini>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	bf00      	nop
 8008c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7e:	bc08      	pop	{r3}
 8008c80:	469e      	mov	lr, r3
 8008c82:	4770      	bx	lr
